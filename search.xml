<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Java的反射与注解]]></title>
      <url>https://bigbignews.club/2018/07/21/Java%E7%9A%84%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>在面向对象的编程语言如Java中，反射允许在编译期间不知道接口的名称，字段（fields，即成员变量）、方法的情况下在运行时检查类、接口、字段和方法。它还允许根据判断结果进行实例化新对象和不同方法的调用。<br>反射还可以使给定的程序动态地适应不同的运行情况。例如，考虑一个应用程序，它使用2个不同的类X和Y互相交替执行类似的操作。没有使用面向反射编程技术，应用程序可能是硬编码的（即把代码写死，缺乏灵活性），以调用方法名称的类X和Y类。然而，使用面向反射的编程范式中，应用程序可以在设计和编写利用反射在没有硬编码方法名称情况下调用类中的方法X和Y。<br>Java 中，无论生成某个类的多少个对象，这些对象都会对应于同一个 Class 对象。</p>
<ul>
<li>Class类：反射的核心类，可以获取类的属性，方法等信息。 </li>
<li>Field类：Java.lang.reflec包中的类，表示类的成员变量，可以用来获取和设置类之中的属性值。 </li>
<li>Method类： Java.lang.reflec包中的类，表示类的方法，它可以用来获取类中的方法信息或者执行方法。 </li>
<li>Constructor类： Java.lang.reflec包中的类，表示类的构造方法。</li>
</ul>
<h3 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h3><p>可以动态的运行指定的类和方法而不用重新编译</p>
<h3 id="获取对象和方法"><a href="#获取对象和方法" class="headerlink" title="获取对象和方法"></a>获取对象和方法</h3><p>被反射的类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonInterface</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">myInterface</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.....</div><div class="line">......</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Preson</span> <span class="keyword">implements</span> <span class="title">PersonInterface</span>  </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	Preson() &#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Preson</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(name);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myInterface</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>反射操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">         <span class="comment">//throws Exception </span></div><div class="line">      Class&lt;?&gt; clazz2=<span class="keyword">new</span> Preson().getClass();<span class="comment">//通过对象获取Class对象</span></div><div class="line">Class&lt;?&gt; clazz1=Preson.class;<span class="comment">//调用类的class属性获取Class对象</span></div><div class="line">Class&lt;?&gt; clazz=Class.forName(<span class="string">"com.cczhr.reflection.Preson"</span>);<span class="comment">//使用类的全路径获取Class对象</span></div><div class="line"></div><div class="line">Method[] methods=clazz.getDeclaredMethods();</div><div class="line"><span class="keyword">for</span>(Method m:methods)&#123;</div><div class="line">	System.out.println(<span class="string">"获取方法"</span>+m);</div><div class="line">&#125;</div><div class="line"></div><div class="line"> Field[] field=clazz.getDeclaredFields();</div><div class="line">       <span class="keyword">for</span>(Field f:field)&#123;</div><div class="line">           System.out.println(<span class="string">"获取成员属性"</span>+f);</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       Constructor[] constructor=clazz.getDeclaredConstructors();</div><div class="line">       <span class="keyword">for</span>(Constructor c:constructor)&#123;</div><div class="line">           System.out.println(<span class="string">"获取构造方法"</span>+c);</div><div class="line">       &#125;</div><div class="line">       Class&lt;?&gt;[] clazzInter= clazz.getInterfaces();</div><div class="line">       <span class="keyword">for</span>(Class c:clazzInter)&#123;</div><div class="line">           System.out.println(<span class="string">"获取Class对象的接口"</span>+c);</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       System.out.println(<span class="string">"获取Class对象的父类"</span>+clazz.getSuperclass());</div></pre></td></tr></table></figure>
<p>输出结果<br><img src="/2018/07/21/Java的反射与注解/f1.jpg" alt=""></p>
<h3 id="生成对象、执行方法、修改成员变量"><a href="#生成对象、执行方法、修改成员变量" class="headerlink" title="生成对象、执行方法、修改成员变量"></a>生成对象、执行方法、修改成员变量</h3><h4 id="生成对象"><a href="#生成对象" class="headerlink" title="生成对象"></a>生成对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Class&lt;?&gt; clazz=Class.forName(<span class="string">"com.cczhr.reflection.Preson"</span>);<span class="comment">//使用类的全路径获取Class对象</span></div><div class="line">Preson p=(Preson) clazz.newInstance();<span class="comment">//生成对象</span></div><div class="line"><span class="comment">/*</span></div><div class="line">   生成有构造参数的对象</div><div class="line">   //获取构造方法</div><div class="line">          Constructor c=clazz.getDeclaredConstructor(String.class);</div><div class="line">          //创建对象并设置属性</div><div class="line">          Person p1=(Person) c.newInstance(小明");</div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="执行方法-需要先生成对象"><a href="#执行方法-需要先生成对象" class="headerlink" title="执行方法(需要先生成对象)"></a>执行方法(需要先生成对象)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  Class&lt;?&gt; clazz=Class.forName(<span class="string">"com.cczhr.reflection.Preson"</span>);<span class="comment">//使用类的全路径获取Class对象</span></div><div class="line">  Preson p=(Preson) clazz.newInstance();<span class="comment">//生成对象</span></div><div class="line"><span class="comment">//getDeclaredMethod可以获取所有方法getMethod获取的是public方法</span></div><div class="line">	Method method=clazz.getDeclaredMethod(<span class="string">"printName"</span>, String.class);<span class="comment">//方法名,参数 多参数可以这样写String.class,int.class</span></div><div class="line">	method.setAccessible(<span class="keyword">true</span>);<span class="comment">//私有方法的执行，必须在调用invoke之前加上一句,使其变为可访问</span></div><div class="line">	method.invoke(p, <span class="string">"哈哈"</span>);<span class="comment">//实例化对象，参数</span></div></pre></td></tr></table></figure>
<p>被执行的方法<br>Preson.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">printName</span><span class="params">(String name)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.name=name;</div><div class="line">		System.out.println(name);</div><div class="line">	&#125;</div><div class="line">....</div></pre></td></tr></table></figure></p>
<p><img src="/2018/07/21/Java的反射与注解/f2.jpg" alt=""></p>
<h4 id="修改成员变量-需要先生成对象"><a href="#修改成员变量-需要先生成对象" class="headerlink" title="修改成员变量(需要先生成对象)"></a>修改成员变量(需要先生成对象)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">     Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.cczhr.reflection.Preson"</span>);<span class="comment">// 使用类的全路径获取Class对象</span></div><div class="line">Preson p = (Preson) clazz.newInstance();<span class="comment">// 生成对象</span></div><div class="line"></div><div class="line">p.setName(<span class="string">"哈哈"</span>);</div><div class="line">      <span class="comment">//获取class对象的字段</span></div><div class="line">Field field = clazz.getDeclaredField(<span class="string">"name"</span>);</div><div class="line">field.setAccessible(<span class="keyword">true</span>);<span class="comment">// 私有的加上这一句</span></div><div class="line"></div><div class="line"><span class="comment">// 获取字段的值并打印</span></div><div class="line">Object val = field.get(p);<span class="comment">//上面的field设了要获取的是name字段</span></div><div class="line">System.out.println(val);</div><div class="line"></div><div class="line">field.set(p, <span class="string">"yoyo"</span>);<span class="comment">//给字段赋值</span></div><div class="line"></div><div class="line"><span class="comment">// 获取字段的值并打印</span></div><div class="line">Object val2 = field.get(p);</div><div class="line">   System.out.println(val2);</div></pre></td></tr></table></figure>
<h3 id="通过类加载器获取文件"><a href="#通过类加载器获取文件" class="headerlink" title="通过类加载器获取文件"></a>通过类加载器获取文件</h3><p><img src="/2018/07/21/Java的反射与注解/f4.jpg" alt=""><br><img src="/2018/07/21/Java的反射与注解/f5.jpg" alt=""><br>文件路径<br><img src="/2018/07/21/Java的反射与注解/f6.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">       Class&lt;?&gt; clazz=Class.forName(<span class="string">"com.cczhr.reflection.Preson"</span>);</div><div class="line">       InputStream in1= clazz.getClassLoader().getResourceAsStream(<span class="string">"com/cczhr/reflection/t1.txt"</span>);  </div><div class="line">       System.out.println(getStr(in1));</div><div class="line">       InputStream in2= clazz.getClassLoader().getResourceAsStream(<span class="string">"t2.txt"</span>);</div><div class="line">       System.out.println(getStr(in2));</div><div class="line">	.....</div><div class="line">	.....</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getStr</span><span class="params">(InputStream is)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">	String str=<span class="keyword">null</span>;</div><div class="line">	StringBuffer stringBuffer=<span class="keyword">new</span> StringBuffer();</div><div class="line">	InputStreamReader read = <span class="keyword">new</span> InputStreamReader (is,<span class="string">"utf-8"</span>);</div><div class="line">	 BufferedReader br= <span class="keyword">new</span> BufferedReader(read);</div><div class="line">	 <span class="keyword">while</span>(<span class="keyword">null</span>!=(str=br.readLine()))&#123;</div><div class="line">	     stringBuffer.append(str);</div><div class="line">	 &#125;</div><div class="line">	 br.close();</div><div class="line">	<span class="keyword">return</span> stringBuffer.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出<br><img src="/2018/07/21/Java的反射与注解/f7.jpg" alt="">  </p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="理论-1"><a href="#理论-1" class="headerlink" title="理论"></a>理论</h3><p>Java注解，是Java语言5.0版本开始支持加入源代码的特殊语法元数据。<br>Java语言中的类、方法、变量、参数和包等都可以被标注。<br>Java注解可以通过反射获取标注内容。<br>在编译器生成类文件时，注解可以被嵌入到字节码中。<br>Java虚拟机可以保留注解内容，在运行时可以获取到标注内容。<br>当然它也支持自定义Java注解</p>
<h3 id="作用在代码的注解"><a href="#作用在代码的注解" class="headerlink" title="作用在代码的注解"></a>作用在代码的注解</h3><p>@Override - 检查该方法是否是重载方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。<br>@Deprecated - 标记过时方法。如果使用该方法，会报编译警告。<br>@SuppressWarnings - 指示编译器去忽略注解中声明的警告。</p>
<h3 id="作用在注解的注解（元注解）"><a href="#作用在注解的注解（元注解）" class="headerlink" title="作用在注解的注解（元注解）"></a>作用在注解的注解（元注解）</h3><p>Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。<br>@Documented - 标记这些注解是否包含在用户文档中。<br>@Target - 标记这个注解应该是哪种 Java 成员。<br>@Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</p>
<h3 id="Java-7-开始才有的注解"><a href="#Java-7-开始才有的注解" class="headerlink" title="Java 7 开始才有的注解"></a>Java 7 开始才有的注解</h3><p>@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。 @FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。<br>@Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</p>
<h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><h4 id="Retention"><a href="#Retention" class="headerlink" title="Retention"></a>Retention</h4><p>例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div></pre></td></tr></table></figure></p>
<p>其中RetentionPolicy有三种级别<br>SOURCE：注解将被编译器丢弃<br>CLASS：注解在class文件中可用，但会被VM丢弃。<br>RUNTIME：VM将在运行期间也保留注解，因此可以通过反射机制读取注解的信息。</p>
<h4 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h4><p>Target可以限定运用的场景。<br>例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(ElementType.METHOD)</div></pre></td></tr></table></figure></p>
<p>ElementType.ANNOTATION_TYPE 可以给一个注解进行注解<br>ElementType.CONSTRUCTOR 可以给构造方法进行注解<br>ElementType.FIELD 可以给属性进行注解<br>ElementType.LOCAL_VARIABLE 可以给局部变量进行注解<br>ElementType.METHOD 可以给方法进行注解<br>ElementType.PACKAGE 可以给一个包进行注解<br>ElementType.PARAMETER 可以给一个方法内的参数进行注解<br>ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举</p>
<h4 id="Inherited"><a href="#Inherited" class="headerlink" title="Inherited"></a>Inherited</h4><p>假如父类用了@Inherited注解 那么子类也会注解父类所用的注解<br>例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Inherited</span></div></pre></td></tr></table></figure></p>
<h4 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h4><p>定义的注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</div><div class="line">	<span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "哈哈"</span>;<span class="comment">//default后面是默认值</span></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 18</span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>定义一个类使用注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@MyAnnotation</span>(name=<span class="string">"yoyo"</span>,age=<span class="number">11</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="meta">@MyAnnotation</span>()</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outPrint</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(name+age);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过反射获取</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">      Class&lt;?&gt; clazz=Class.forName(<span class="string">"com.cczhr.annotation.Person"</span>);<span class="comment">//使用类的全路径获取Class对象</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(clazz.isAnnotationPresent(MyAnnotation.class))&#123;<span class="comment">//获取类的注解</span></div><div class="line">MyAnnotation myClazzAnnotation=	clazz.getAnnotation(MyAnnotation.class);</div><div class="line">System.out.println(myClazzAnnotation.name()+myClazzAnnotation.age());</div><div class="line">&#125;</div><div class="line"></div><div class="line">Method method=clazz.getDeclaredMethod(<span class="string">"test"</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(method.isAnnotationPresent(MyAnnotation.class))&#123;<span class="comment">//获取方法的注解</span></div><div class="line">	MyAnnotation myAnnotation=	method.getAnnotation(MyAnnotation.class);</div><div class="line">	System.out.println(myAnnotation.name()+myAnnotation.age());</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果<br><img src="/2018/07/21/Java的反射与注解/f8.jpg" alt="">  </p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>定义枚举<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MyEnum &#123;</div><div class="line">	Hello(<span class="number">1</span>,<span class="string">"你好"</span>),World(<span class="number">2</span>,<span class="string">"世界"</span>),Java(<span class="number">3</span>,<span class="string">"爪哇"</span>);</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">MyEnum</span><span class="params">(<span class="keyword">int</span> type, String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.type = type;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> type;</div><div class="line">	<span class="keyword">private</span> String  name;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> type;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.type = type;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  System.out.println(MyEnum.Hello);</div><div class="line">System.out.println(MyEnum.Hello.getName());</div><div class="line">MyEnum.Hello.setName(<span class="string">"修改name"</span>);</div><div class="line">System.out.println(MyEnum.Hello.getName());</div><div class="line">System.out.println(MyEnum.Hello.getType());</div></pre></td></tr></table></figure>
<p>输出结果<br><img src="/2018/07/21/Java的反射与注解/f9.jpg" alt="">  </p>
]]></content>
      
        
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派使用日志]]></title>
      <url>https://bigbignews.club/2018/07/15/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>买了个树莓派3b+ 记录一下把♂玩♀它的时刻。</p>
<h2 id="烧录系统"><a href="#烧录系统" class="headerlink" title="烧录系统"></a>烧录系统</h2><p>官方推荐系统： Raspbian <a href="http://downloads.raspberrypi.org/raspbian_latest" target="_blank" rel="external">下载</a><br>默认帐号密码：Username: pi  Password: raspberry<br>烧录工具：USB Image Tool <a href="usbit-162.zip">下载</a><br>准备一张tf卡 一个读卡器 tf卡推荐16g以上<br>解压USB Image Tool打开USB Image Tool.exe，选择你的tf卡设备，点击Restore选择下载的系统即可<br><img src="/2018/07/15/树莓派使用日志/usb1.jpg" alt=""></p>
<h2 id="远程控制"><a href="#远程控制" class="headerlink" title="远程控制"></a>远程控制</h2><p>树莓派 当然要远程控制啦</p>
<h3 id="vnc-可视化界面"><a href="#vnc-可视化界面" class="headerlink" title="vnc 可视化界面"></a>vnc 可视化界面</h3><p>系统自带，手动开启即可。<br><img src="/2018/07/15/树莓派使用日志/vnc.jpg" alt=""><br><img src="/2018/07/15/树莓派使用日志/vnc2.jpg" alt=""><br>电脑上安装vnc  <a href="VNC.zip">下载</a><br>连接使用即可</p>
<h3 id="xrdp-可视化界面"><a href="#xrdp-可视化界面" class="headerlink" title="xrdp 可视化界面"></a>xrdp 可视化界面</h3><p>实际体验下来 vnc操作画面还是比较卡顿，用xrdp会更加流畅一些<br>操作也很简单 打开终端 输入<br>sudo apt-get install xrdp<br>安装完成就可以用电脑的远程连接连上了<br>重启xrdp命令 sudo /etc/init.d/xrdp restart</p>
<h3 id="ssh-命令行界面"><a href="#ssh-命令行界面" class="headerlink" title="ssh 命令行界面"></a>ssh 命令行界面</h3><p>ssh和vnc一样打开即可使用<br>电脑连接ssh可以使用xshell </p>
<h2 id="修改软件源"><a href="#修改软件源" class="headerlink" title="修改软件源"></a>修改软件源</h2><p>国内连树莓派的软件源还是比较卡 所以换成国内的镜像体验比较好我这里使用的是清华大学的镜像<br>首先终端执行 sudo nano /etc/apt/sources.list<br>把里面的内容改为如下 链接前面加#是注释的意思</p>
<p>#deb <a href="http://mirrordirector.raspbian.org/raspbian/" target="_blank" rel="external">http://mirrordirector.raspbian.org/raspbian/</a> jessie main contrib non-free rpi</p>
<p>#Uncomment line below then ‘apt-get update’ to enable ‘apt-get source’</p>
<p>#deb-src <a href="http://archive.raspbian.org/raspbian/" target="_blank" rel="external">http://archive.raspbian.org/raspbian/</a> jessie main contrib non-free rpi</p>
<p>deb <a href="http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/" target="_blank" rel="external">http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/</a> stretch main contrib non-free rpi<br>deb-src <a href="http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/" target="_blank" rel="external">http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/</a> stretch main contrib non-free rpi</p>
<p>然后ctrl+x保存退出，接着执行<br>sudo nano /etc/apt/sources.list.d/raspi.list<br>把里面的内容改为</p>
<p>#deb <a href="http://archive.raspberrypi.org/debian/" target="_blank" rel="external">http://archive.raspberrypi.org/debian/</a> jessie main ui</p>
<p>#Uncomment line below then ‘apt-get update’ to enable ‘apt-get source’</p>
<p>#deb-src <a href="http://archive.raspberrypi.org/debian/" target="_blank" rel="external">http://archive.raspberrypi.org/debian/</a> jessie main ui</p>
<p>deb <a href="http://mirror.tuna.tsinghua.edu.cn/raspberrypi/" target="_blank" rel="external">http://mirror.tuna.tsinghua.edu.cn/raspberrypi/</a> stretch main ui<br>deb-src <a href="http://mirror.tuna.tsinghua.edu.cn/raspberrypi/" target="_blank" rel="external">http://mirror.tuna.tsinghua.edu.cn/raspberrypi/</a> stretch main ui</p>
<p>保存后执行sudo apt-get update 更新一下数据源即可</p>
<h2 id="制作nas"><a href="#制作nas" class="headerlink" title="制作nas"></a>制作nas</h2><p>首先看看你的移动硬盘插进树莓派能否识别如可以请忽略安装ntfs-3g的步骤<br>安装能让树莓派读取NTFS格式的软件包<br>sudo apt-get install fuse-utils ntfs-3g</p>
<p>安装samba<br>sudo apt-get install samba samba-common-bin<br>安装后编辑配置文件<br>sudo nano /etc/samba/smb.conf<br>在最下面一行加上 path填上你移动硬盘的路径 share是命名可以随便命，连接的时候用到valid users 为登录用户。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[share]</div><div class="line">path = /media/pi/cczhr</div><div class="line">valid users = pi</div><div class="line">browseable = yes</div><div class="line">public = yes</div><div class="line">writable = yes</div><div class="line">create mask = 0777</div><div class="line">directory mask = 0777</div></pre></td></tr></table></figure></p>
<p>配置好后重启一下<br>service samba restart<br>添加上面填写的用户<br>useradd pi -m -G pi<br>设置密码<br>passwd pi</p>
<p>电脑上添加一个网络位置 \192.168.x.x\share 即可使用<br>android手机可以使用es文件管理器</p>
<h2 id="制作下载机"><a href="#制作下载机" class="headerlink" title="制作下载机"></a>制作下载机</h2><p>安装aria2<br>sudo apt-get install aria2 </p>
<h2 id="支持百度云盘"><a href="#支持百度云盘" class="headerlink" title="支持百度云盘"></a>支持百度云盘</h2>]]></content>
      
        
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的GreenDao笔记]]></title>
      <url>https://bigbignews.club/2018/07/04/Android%E7%9A%84GreenDao%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="ORM概念"><a href="#ORM概念" class="headerlink" title="ORM概念"></a>ORM概念</h2><p>对象关系映射（英语：Object Relational Mapping，简称ORM，或O/RM，或O/R mapping），是一种程序设计技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换。<br>——维基百科<br>俗称把数据库查询的结果转为对象（就是这么简单 </p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">https://github.com/greenrobot/greenDAO</a><br>官网写的很清楚了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In your root build.gradle file:</span></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        mavenCentral() <span class="comment">// add repository</span></div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:3.1.1'</span></div><div class="line">        classpath <span class="string">'org.greenrobot:greendao-gradle-plugin:3.2.2'</span> <span class="comment">// add plugin</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// In your app projects build.gradle file:</span></div><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line">apply plugin: <span class="string">'org.greenrobot.greendao'</span> <span class="comment">// apply plugin</span></div><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">	....</div><div class="line">    greendao&#123;</div><div class="line">        schemaVersion <span class="number">1</span> <span class="comment">//数据库版本号 每次改动数据库结构要更改</span></div><div class="line">        targetGenDir <span class="string">'src/main/java'</span><span class="comment">///设置DaoMaster 、DaoSession、Dao目录</span></div><div class="line">		</div><div class="line">     <span class="comment">//设置DaoMaster 、DaoSession、Dao包名 非必填</span></div><div class="line">     <span class="comment">// daoPackage 'com.qhn.bhne.footprinting.db'</span></div><div class="line">      <span class="comment">//设置生成单元测试目录</span></div><div class="line"><span class="comment">//    targetGenDirTest</span></div><div class="line">      <span class="comment">//设置自动生成单元测试用例</span></div><div class="line"><span class="comment">//    generateTests	</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">dependencies &#123;</div><div class="line">    implementation <span class="string">'org.greenrobot:greendao:3.2.2'</span> <span class="comment">// add library</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Android 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的RxJava笔记]]></title>
      <url>https://bigbignews.club/2018/06/23/Android%E7%9A%84RxJava%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>rvjava 一个令人欲罢不能的东西呐~说明一下rxjava是基于观察者模式做的东西，至于观察着模式是啥，可以上网搜，下面回顾的第一张图就是标准的观察者模式。<br>另外其实这个文章是在rxjava1的时候就写了一点点，现在都用rxjava2了那就基于rxjava2吧~</p>
<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>观察者模式在Java里有两种实现，一种是完全手动写的一种是调用Java里面的api，先回顾一下传统Java的做法<br>完全手动写的<br><img src="/2018/06/23/Android的RxJava笔记/r1.png" alt=""><br>api版<br><img src="/2018/06/23/Android的RxJava笔记/r2.png" alt=""></p>
<h2 id="RxJava2"><a href="#RxJava2" class="headerlink" title="RxJava2"></a>RxJava2</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>需要在build.gradle引入rxjava和rxandroid，rxandroid主要是负责Android的线程切换的。<br><a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">https://github.com/ReactiveX/RxAndroid</a><br><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">https://github.com/ReactiveX/RxJava</a><br>例如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">implementation <span class="string">'io.reactivex.rxjava2:rxjava:2.1.2'</span></div><div class="line">implementation <span class="string">'io.reactivex.rxjava2:rxandroid:2.0.1'</span></div></pre></td></tr></table></figure></p>
<p>背压什么的先忽略吧，上流发送速度远快于下流处理速度的情景一般项目遇不到。</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Observable ( 被观察者 ) / Observer ( 观察者 )<br>说起被观察者 观察者，因为这两个词好接近，反正我一开始没记住哪个是哪个，这点还是需要下功夫背一背。Observable（被观察者）是属于上流发送指令的，而Observer ( 观察者 ) 是负责接收指令的。<br>subscribeOn() 指定的就是发射事件的线程，observerOn 指定的就是订阅者接收事件的线程。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>最简单的操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Observable observable=Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">            <span class="comment">//ObservableEmitter&lt;String&gt; String可以改成你喜欢的对象 指定发送的事件类型</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                e.onNext(<span class="string">"haha"</span>);<span class="comment">//会在 observer的onNext收到</span></div><div class="line">                e.onError(<span class="keyword">new</span> Throwable(<span class="string">"error"</span>));<span class="comment">//会在observer的onError收到 这个一旦执行后，剩下发送的事件下流无法接收</span></div><div class="line">                e.onComplete();<span class="comment">////会在observer的onComplete收到 这个一旦执行后，剩下发送的事件下流无法接收</span></div><div class="line">               </div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        Observer observer=<span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line">                d.dispose();<span class="comment">//执行后不再接收上游事件</span></div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        observable.subscribe(observer);</div></pre></td></tr></table></figure></p>
<p>rxjava2支持链式操作所以还能这样<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">               e.onNext(<span class="string">"haha"</span>);<span class="comment">//会在 observer的onNext收到</span></div><div class="line">               e.onError(<span class="keyword">new</span> Throwable(<span class="string">"error"</span>));<span class="comment">//会在observer的onError收到 这个一旦执行后，剩下要发送的事件不再发送</span></div><div class="line">               e.onComplete();<span class="comment">////会在observer的onComplete收到 这个一旦执行后，剩下要发送的事件不再发送 不写情况下onNext走完也会自动调用onComplete</span></div><div class="line"></div><div class="line">           &#125;</div><div class="line">       &#125;).subscribe(<span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line">               </div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line"></div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure></p>
<h4 id="Creat"><a href="#Creat" class="headerlink" title="Creat"></a>Creat</h4><p>很简单 就是生成一个 Obserable对象</p>
<h4 id="Just"><a href="#Just" class="headerlink" title="Just"></a>Just</h4><p>为了缩减下面的实例代码先讲这个,相当于一个简单的发射器调用onNext()的简写<br>最多10个<br><img src="/2018/06/23/Android的RxJava笔记/r3.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line">           &#125;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">           &#125;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">           &#125;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure></p>
<h4 id="Observer的简化写法"><a href="#Observer的简化写法" class="headerlink" title="Observer的简化写法"></a>Observer的简化写法</h4><p>也是为了缩减下面的实例代码先讲这个<br>有时候不需要所有的就能这样写<br>例如我只要onNext的 相当省事有木有<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>).subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="comment">//onNext</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>其它的可参考<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>).subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="comment">//onNext</span></div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">               <span class="comment">//onError</span></div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> Action() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="comment">//onComplete</span></div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> Consumer&lt;Disposable&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Disposable disposable)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="comment">//onSubscribe</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<h4 id="Map-数据转换"><a href="#Map-数据转换" class="headerlink" title="Map 数据转换"></a>Map 数据转换</h4><p>map就是数据转换咯，先把上流的数据转换合适的对象再传给下流。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>).map(<span class="keyword">new</span> Function&lt;Integer, String&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">              <span class="keyword">return</span> <span class="string">"这里转为字符串"</span>+integer;</div><div class="line">          &#125;</div><div class="line">      &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">              <span class="comment">//下流接收的就是字符串</span></div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure></p>
<h4 id="Zip-配对合并"><a href="#Zip-配对合并" class="headerlink" title="Zip 配对合并"></a>Zip 配对合并</h4><p>就是每次两个上流各取出一个再转换为下流，两个上流一定有配对关系，上流a取一个，上流b就取一个，两个上流发送的数量要相同，多出来的不会发送到下流。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//BiFunctionz 最后一个参数是你要发送给下流的类型</span></div><div class="line">       Observable.zip(Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), Observable.just(<span class="string">"1"</span>, <span class="string">"2"</span>), <span class="keyword">new</span> BiFunction&lt;Integer, String, String&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Integer integer, String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">               <span class="keyword">return</span> integer+<span class="string">"---"</span>+s;</div><div class="line">           &#125;</div><div class="line">       &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">               System.out.println(s);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">	</div><div class="line">	<span class="comment">//运行结果为</span></div><div class="line">	<span class="comment">//1---4</span></div><div class="line">      <span class="comment">// 2---5</span></div></pre></td></tr></table></figure></p>
<h4 id="Concat-amp-Merge连接合并"><a href="#Concat-amp-Merge连接合并" class="headerlink" title="Concat &amp; Merge连接合并"></a>Concat &amp; Merge连接合并</h4><p>把两个上流连起来发送 concat是保证上流a发完才到上流b 而merge不保证<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable.concat(Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), Observable.just(<span class="number">4</span>, <span class="number">5</span>)).subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                System.out.println(integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>运行结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure></p>
<h4 id="ConcatMap-amp-FlatMap-发送的每个数据转为单独的Observable"><a href="#ConcatMap-amp-FlatMap-发送的每个数据转为单独的Observable" class="headerlink" title="ConcatMap&amp;FlatMap 发送的每个数据转为单独的Observable"></a>ConcatMap&amp;FlatMap 发送的每个数据转为单独的Observable</h4><p>ConcatMap&amp;FlatMap把上流发送的每个数据独立再包装为一个新的上流，<br>假如上流数据为 s1 s2 s3 ，包装后的新上流为k1 k2 k3，ConcatMap保证执行顺序为 s1 -&gt;s1的k1 k2 k3 -&gt;s2-&gt;s2的k1 k2 k3 而FlatMap不保证。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).concatMap(<span class="keyword">new</span> Function&lt;Integer, ObservableSource&lt;String&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> ObservableSource&lt;String&gt; <span class="title">apply</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> Observable.just(integer+<span class="string">"--"</span>);<span class="comment">//concatMap保证这里的Observable是按顺序的，假如这里Observable有多个onNext肯定1的onNext发完才到2</span></div><div class="line">            &#125;</div><div class="line">        &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<h4 id="Filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter 过滤器"></a>Filter 过滤器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">40</span>,<span class="number">3</span>).filter(<span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> integer&gt;<span class="number">3</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                System.out.println(integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">		<span class="comment">//输出结果</span></div><div class="line">		<span class="comment">//8</span></div><div class="line">		<span class="comment">//40</span></div></pre></td></tr></table></figure>
<h4 id="Distinct-去掉重复项"><a href="#Distinct-去掉重复项" class="headerlink" title="Distinct 去掉重复项"></a>Distinct 去掉重复项</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>).distinct().subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                System.out.println(integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">		<span class="comment">//输出结果</span></div><div class="line">		<span class="comment">//1</span></div><div class="line">		<span class="comment">//2</span></div><div class="line">		<span class="comment">//3</span></div><div class="line">		<span class="comment">//4</span></div></pre></td></tr></table></figure>
<h4 id="Buffer-下流一次取多值"><a href="#Buffer-下流一次取多值" class="headerlink" title="Buffer 下流一次取多值"></a>Buffer 下流一次取多值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一个参数是一次取多少值，第二个参数下一次是从上一次开头偏移多少个开始</span></div><div class="line"> Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>).buffer(<span class="number">2</span>,<span class="number">3</span>).subscribe(<span class="keyword">new</span> Consumer&lt;List&lt;Integer&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(List&lt;Integer&gt; integers)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                System.out.println(integers);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">		<span class="comment">//输出结果</span></div><div class="line">		<span class="comment">//[1, 2]</span></div><div class="line">        <span class="comment">//[4, 5]</span></div><div class="line">        <span class="comment">//[7, 8]</span></div><div class="line">		<span class="comment">// 2是每次去的值个个数，3 就是开头的 1 4 7的间隔。</span></div></pre></td></tr></table></figure>
<h4 id="FromIterable发射列表"><a href="#FromIterable发射列表" class="headerlink" title="FromIterable发射列表"></a>FromIterable发射列表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">       list.add(<span class="number">1</span>);</div><div class="line">       list.add(<span class="number">2</span>);</div><div class="line">       Observable.fromIterable(list).subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">               System.out.println(integer);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">	<span class="comment">//输出结果 </span></div><div class="line">	<span class="comment">//1</span></div><div class="line">	<span class="comment">//2</span></div></pre></td></tr></table></figure>
<h4 id="Timer-延迟执行"><a href="#Timer-延迟执行" class="headerlink" title="Timer 延迟执行"></a>Timer 延迟执行</h4><p>此处是延迟2秒执行，注意timer默认在新线程执行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Observable.timer(<span class="number">2</span>, TimeUnit.SECONDS).subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread()) .subscribe(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">              </div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<h4 id="Interval-定时循环执行"><a href="#Interval-定时循环执行" class="headerlink" title="Interval 定时循环执行"></a>Interval 定时循环执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一次延迟了 3 秒后接收到，后面每次间隔了 2 秒</span></div><div class="line">      Disposable mDisposable = Observable.interval(<span class="number">3</span>,<span class="number">2</span>, TimeUnit.SECONDS).subscribeOn(Schedulers.io())</div><div class="line">              .observeOn(AndroidSchedulers.mainThread()).subscribe(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">              Log.e(<span class="string">"interval"</span>, <span class="string">"accept: "</span>+aLong );</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      <span class="comment">//取消</span></div><div class="line">      <span class="keyword">if</span> (mDisposable != <span class="keyword">null</span> &amp;&amp; !mDisposable.isDisposed()) &#123;</div><div class="line">          mDisposable.dispose();</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<h4 id="Skip-跳过某次数执行"><a href="#Skip-跳过某次数执行" class="headerlink" title="Skip 跳过某次数执行"></a>Skip 跳过某次数执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//跳过前两次内容发送</span></div><div class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line">                .skip(<span class="number">2</span>)</div><div class="line">                .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(@NonNull Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                      </div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<h4 id="Take-只执行前几次"><a href="#Take-只执行前几次" class="headerlink" title="Take 只执行前几次"></a>Take 只执行前几次</h4><p>//只发送前两次<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Flowable.fromArray(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line">                .take(<span class="number">2</span>)</div><div class="line">                .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(@NonNull Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                   </div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure></p>
<h4 id="Debounce-过滤频率过快"><a href="#Debounce-过滤频率过快" class="headerlink" title="Debounce 过滤频率过快"></a>Debounce 过滤频率过快</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">               e.onNext(<span class="string">"a"</span>);</div><div class="line">			Thread.sleep(<span class="number">400</span>);</div><div class="line">               e.onNext(<span class="string">"b"</span>);</div><div class="line">			Thread.sleep(<span class="number">605</span>);</div><div class="line">               e.onNext(<span class="string">"c"</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;).debounce(<span class="number">500</span>, TimeUnit.MILLISECONDS)</div><div class="line">               .subscribeOn(Schedulers.io())</div><div class="line">               .observeOn(AndroidSchedulers.mainThread()).subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">               Log.e(<span class="string">"rxjava"</span>, <span class="string">"accept: "</span>+s);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">	<span class="comment">//输出 b c</span></div></pre></td></tr></table></figure>
<h4 id="Defer-为每个观察者创建一个新的Observable"><a href="#Defer-为每个观察者创建一个新的Observable" class="headerlink" title="Defer 为每个观察者创建一个新的Observable"></a>Defer 为每个观察者创建一个新的Observable</h4><p>直到有观察者订阅时才创建Observable，并且为每个观察者创建一个新的Observable，Defer 操作符会一直等待直到有观察者订阅它，然后它使用Observable工厂方法生成一个 Observable。它对每个观察者都这样做，因此尽管每个订阅者都以为自己订阅的是同一个 Observable，事实上每个订阅者获取的是它们自己的单独的数据序列。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一般订阅</span></div><div class="line"> Observable&lt;Integer&gt; observable = Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line">        observable.subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                System.out.print(integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">3000</span>);<span class="comment">//模拟延迟订阅</span></div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        observable.subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                System.out.print(integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">	<span class="comment">//输出123 </span></div><div class="line"><span class="comment">//	defer</span></div><div class="line">Observable&lt;Integer&gt; observable = Observable.defer(<span class="keyword">new</span> Callable&lt;ObservableSource&lt;Integer&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> ObservableSource&lt;Integer&gt; <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        observable.subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                System.out.print(integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">3000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        observable.subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                System.out.print(integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">	<span class="comment">//输出123123</span></div></pre></td></tr></table></figure></p>
<h4 id="Single只发送一个参数"><a href="#Single只发送一个参数" class="headerlink" title="Single只发送一个参数"></a>Single只发送一个参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Single.just(<span class="number">4</span>).subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">         <span class="meta">@Override</span></div><div class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">             </div><div class="line">         &#125;</div><div class="line">     &#125;);</div></pre></td></tr></table></figure>
<h4 id="Last取最后一项"><a href="#Last取最后一项" class="headerlink" title="Last取最后一项"></a>Last取最后一项</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="number">4</span>)</div><div class="line">                .last(<span class="number">4</span>)<span class="comment">//源观测资源为空，则发出默认项</span></div><div class="line">                .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(@NonNull Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                       System.out.print(integer);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<h4 id="Scan-amp-Reduce把上一项的结果传给第下次操作"><a href="#Scan-amp-Reduce把上一项的结果传给第下次操作" class="headerlink" title="Scan&amp;Reduce把上一项的结果传给第下次操作"></a>Scan&amp;Reduce把上一项的结果传给第下次操作</h4><p>scan:每次操作之后先把数据输出，然后在调用scan的回调函数进行第二次操作<br>reduce：把所有的操作都操作完成之后在调用一次观察者，把数据一次性输出<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="number">4</span>).scan(<span class="keyword">new</span> BiFunction&lt;Integer, Integer, Integer&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer integer, Integer integer2)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">               <span class="keyword">return</span> integer+integer2;</div><div class="line">           &#125;</div><div class="line">       &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">               System.out.println(integer);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">       System.out.println(<span class="string">"==========================="</span>);</div><div class="line">       Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="number">4</span>).reduce(<span class="keyword">new</span> BiFunction&lt;Integer, Integer, Integer&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer integer, Integer integer2)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">               <span class="keyword">return</span> integer+integer2;</div><div class="line">           &#125;</div><div class="line">       &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">               System.out.println(integer);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure></p>
<p>输出结果<br><img src="/2018/06/23/Android的RxJava笔记/r4.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android串口开发的一些事]]></title>
      <url>https://bigbignews.club/2018/06/10/Android%E4%B8%B2%E5%8F%A3%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>说到串口，那就有点嵌入式了，说点概念。</p>
<h3 id="上位机："><a href="#上位机：" class="headerlink" title="上位机："></a>上位机：</h3><p>上位机是指可以直接发出操控命令的设备</p>
<h3 id="下位机："><a href="#下位机：" class="headerlink" title="下位机："></a>下位机：</h3><p>下位机一般是指被操控的设备（例如单片机）</p>
<h3 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h3><p>波特率串行每秒传输数据的速率，例如，波特率是9600那么它传输一位0或1的时间就是1/9600秒，也就是每秒能传9600bit。波特率越高，代表传输信号频率越高。相同的电缆，信号频率越高时，感抗越大，信号在传输线上的损耗也就越大。因此，波特率越高，传输距离越短。</p>
<h3 id="比特和字节（bit-amp-byte）"><a href="#比特和字节（bit-amp-byte）" class="headerlink" title="比特和字节（bit&amp;byte）"></a>比特和字节（bit&amp;byte）</h3><p>计算机就是各种电路的开关，每个开关自然就只有两种状态，开和关，在计算机中1表示的是开，0表示是关。而计算机最小的存储单位是字节，每个字节等于8比特（至于为啥自己查），那8比特用二进制表示当然就是0000 0000-1111 1111，那是不表达为十进制就是0-255呢？（ps 255 是由2的5次方减1来的 公式你懂的），当然不是，负数给狗吃了么☻。</p>
<h3 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h3><p>定律：<br>原码就是二进制本身 例如十进制的1等于0000 0001<br>对于正数来说 ：<br>原码 = 反码 = 补码<br>对于负数来说 ：<br>反码 = 原码的非符号位取反（取反就是把1变成0 把0变成1）<br>补码 = 反码+1<br>反码转原码：非符号位取反<br>补码转原码：非符号位取反,末位再加1<br>补码转反码：先转原码，再取反（然并卵）  </p>
<pre><code>一些小知识 两个16进制代表一个字节
异或：两者相等为0,不等为1
如a=a^b=1011^1001=0010
</code></pre><p>对于计算机来说，一个二进制的它的最高位是它的符号位，0代表正数，1代表负数，所以8比特范围区间应该是 1111 1111 - 0111 1111 也就是-127到127，你以为这就是对的么，其实也不是（我真的不是特意耍你）答案是-128到127，为什么呢，这就涉及到了计算机二进制的运算了。<br>对于计算机来说，假如要识别符号位来做加还是减，很麻烦，所以计算机只能做加法，例如1-1=1+(-1)。</p>
<p>计算机内部是用补码来存储一个数的，为什么呢，因为二进制的计算就是补码的加法，至于为啥用补码，举个例子1-1它的原码直接相加会等于 1000 0010 等于-2，肯定不科学，那反码呢，反码的1-1等于 1111 1111 转为原码 1000 0000 也就是 -0也不科学，补码就不一样了 补码的 1-1 等于1 0000 0000 超过8位的会被截掉，那结果就是0000 0000 转回原码还是0000 0000 那就正确了。而127加1二进制就会表示 1000 0000 负数么显然不科学，于是中央就决定1000 0000 就是-128了。所以128转字节会变成-128，也就是溢出了。</p>
<h2 id="安卓的串口通讯"><a href="#安卓的串口通讯" class="headerlink" title="安卓的串口通讯"></a>安卓的串口通讯</h2><p>串口通讯顾名思义就是给串口发送或者接收数据，而串口的数据格式一般来说有<br>包头+数据+校验+包尾<br>或者<br>包头+数据长度+数据+校验值<br>等不同的格式，不同的设备有可能不同，当然安卓的串口通讯涉及了jni，也就是java调用c/c++的操作，不过不用担心，谷歌n年前已经帮我们封装好了，<a href="https://github.com/cepr/android-serialport-api" target="_blank" rel="external">https://github.com/cepr/android-serialport-api</a> ，至于怎么导入，自己搜素。当然，如果你像我一样那么懒，直接用别人弄好的arr包吧。</p>
<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//根build.gradle添加</span></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        ...</div><div class="line">        maven &#123; url <span class="string">'https://jitpack.io'</span> &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//模块build.gradle添加</span></div><div class="line">dependencies &#123;</div><div class="line">        compile <span class="string">'com.github.licheedev.Android-SerialPort-API:serialport:1.0.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h3><p>我这里就提个大概吧，首先给谷歌提供的串口工具类提供串口地址，波特率。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取所有串口地址 返回字符串数组，你设备插了那个口你需要自己尝试。</span></div><div class="line">String[]  mDevices=<span class="keyword">new</span> SerialPortFinder().getAllDevicesPath()</div><div class="line"> SerialPort mSerialPort = <span class="keyword">new</span> SerialPort(device, baurate, <span class="number">0</span>);<span class="comment">//设备地址，波特率，标志位</span></div><div class="line"> </div><div class="line">BufferedInputStream mInputStream=<span class="keyword">new</span> BufferedInputStream(mSerialPort.getInputStream()); <span class="comment">//读取数据的流，需要开个线程不停的读，怎么读相信知道java io流的人都懂的</span></div><div class="line">OutputStream mOutputStream=mSerialPort.getOutputStream();<span class="comment">//写入数据的流</span></div><div class="line">mOutputStream.write(datas);<span class="comment">//发送数据</span></div><div class="line"></div><div class="line"><span class="comment">//最后当然有关闭各种流的操作，这里就不写了</span></div></pre></td></tr></table></figure></p>
<p>是不是很简单哈哈，更详细参考这个开源项目吧 <a href="https://github.com/licheedev/Android-SerialPort-Tool" target="_blank" rel="external">https://github.com/licheedev/Android-SerialPort-Tool</a><br>当然串口通讯也是有坑的（编程怎么可能没坑）<br>会有分包 粘包的坑，至于分包 粘包是啥，下面的图画的很清楚。<br><img src="/2018/06/10/Android串口开发的一些事/p.png" alt=""><br>具体可看<a href="https://blog.csdn.net/qq513036862/article/details/53640317" target="_blank" rel="external">https://blog.csdn.net/qq513036862/article/details/53640317</a><br>对于串口分包，我的思路就是根据头和数据长度来拼接，具体思路为，开两个StringBuffer若出现数据长度不足，有以下情况：<br>1.有包头且在数据起始位的<br>2.有包头且不在数据起始位的<br>3.没包头的<br>StringBuffer1就负责把 1，（2的包头前部分或者3拼接起来，因为2 3在一条完整数据不可能同时存在，所以用或）<br>StringBuffer2 就负责把 2的包头后部分（含包头存起来）<br>当StringBuffer1长度够后，检验数据，正确后取出，然后StringBuffer1清空，把StringBuffer2 的数据导入StringBuffer1，StringBuffer2数据清空即可。</p>
<p>讲完啦~</p>
]]></content>
      
        
        <tags>
            
            <tag> Android 串口 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式笔记]]></title>
      <url>https://bigbignews.club/2018/04/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的运行时权限]]></title>
      <url>https://bigbignews.club/2018/04/09/Android%E7%9A%84%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="一般权限"><a href="#一般权限" class="headerlink" title="一般权限"></a>一般权限</h2><p><a href="http://www.bejson.com/doc/AndroidManifest/" target="_blank" rel="external">http://www.bejson.com/doc/AndroidManifest/</a><br><img src="/2018/04/09/Android的运行时权限/permission.png" alt=""></p>
<h2 id="运行时权限"><a href="#运行时权限" class="headerlink" title="运行时权限"></a>运行时权限</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">group:android.permission-group.CONTACTS</div><div class="line">  permission:android.permission.WRITE_CONTACTS</div><div class="line">  permission:android.permission.GET_ACCOUNTS</div><div class="line">  permission:android.permission.READ_CONTACTS</div><div class="line"></div><div class="line">group:android.permission-group.PHONE</div><div class="line">  permission:android.permission.READ_CALL_LOG</div><div class="line">  permission:android.permission.ANSWER_PHONE_CALLS</div><div class="line">  permission:android.permission.READ_PHONE_NUMBERS</div><div class="line">  permission:android.permission.READ_PHONE_STATE</div><div class="line">  permission:android.permission.CALL_PHONE</div><div class="line">  permission:android.permission.WRITE_CALL_LOG</div><div class="line">  permission:android.permission.USE_SIP</div><div class="line">  permission:android.permission.PROCESS_OUTGOING_CALLS</div><div class="line">  permission:com.android.voicemail.permission.ADD_VOICEMAIL</div><div class="line"></div><div class="line">group:android.permission-group.CALENDAR</div><div class="line">  permission:android.permission.READ_CALENDAR</div><div class="line">  permission:android.permission.WRITE_CALENDAR</div><div class="line"></div><div class="line">group:android.permission-group.CAMERA</div><div class="line">  permission:android.permission.CAMERA</div><div class="line"></div><div class="line">group:android.permission-group.SENSORS</div><div class="line">  permission:android.permission.BODY_SENSORS</div><div class="line"></div><div class="line">group:android.permission-group.LOCATION</div><div class="line">  permission:android.permission.ACCESS_FINE_LOCATION</div><div class="line">  permission:android.permission.ACCESS_COARSE_LOCATION</div><div class="line"></div><div class="line">group:android.permission-group.STORAGE</div><div class="line">  permission:android.permission.READ_EXTERNAL_STORAGE</div><div class="line">  permission:android.permission.WRITE_EXTERNAL_STORAGE</div><div class="line"></div><div class="line">group:com.sina.weibo.permission-group</div><div class="line">  permission:com.sina.weibo.permission.USER</div><div class="line"></div><div class="line">group:android.permission-group.MICROPHONE</div><div class="line">  permission:android.permission.RECORD_AUDIO</div><div class="line"></div><div class="line">group:com.gsma.services.nfc.permission</div><div class="line"></div><div class="line">group:android.permission-group.SMS</div><div class="line">  permission:android.permission.READ_SMS</div><div class="line">  permission:android.permission.RECEIVE_WAP_PUSH</div><div class="line">  permission:android.permission.RECEIVE_MMS</div><div class="line">  permission:android.permission.RECEIVE_SMS</div><div class="line">  permission:android.permission.SEND_SMS</div><div class="line">  permission:android.permission.READ_CELL_BROADCASTS</div></pre></td></tr></table></figure>
<h2 id="简单封装"><a href="#简单封装" class="headerlink" title="简单封装"></a>简单封装</h2><p> PermissionUtils.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionUtils</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERMISSION_REQUEST_CODE = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> String[] permissions;</div><div class="line">    <span class="keyword">private</span> Activity activity;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PermissionUtils</span><span class="params">( Activity activity)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.activity = activity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 检查权限</div><div class="line">     * <span class="doctag">@param</span> permissions</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPermissions</span><span class="params">(String[] permissions)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.permissions=permissions;</div><div class="line">        <span class="keyword">for</span> (String permission : permissions) &#123;</div><div class="line">            <span class="keyword">if</span> (checkPermission(permission)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 检查权限是否全部申请成功onRequestPermissionsResult使用</div><div class="line">     * <span class="doctag">@param</span> grantResults</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkAllPermissionsGranted</span><span class="params">(@NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> grantResult : grantResults) &#123;</div><div class="line">            <span class="keyword">if</span> (grantResult == PackageManager.PERMISSION_DENIED) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkPermission</span><span class="params">(String permission)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ContextCompat.checkSelfPermission(activity.getApplication(), permission) == PackageManager.PERMISSION_DENIED;<span class="comment">//PackageManager.PERMISSION_GRANTED 是不需要授权</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 请求权限</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestPermissions</span><span class="params">()</span> </span>&#123;</div><div class="line">        ActivityCompat.requestPermissions(activity, permissions, PERMISSION_REQUEST_CODE);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> PermissionUtils permissionUtils;</div><div class="line"> <span class="keyword">static</span> <span class="keyword">final</span> String[] PERMISSIONS = <span class="keyword">new</span> String[]&#123;</div><div class="line">            Manifest.permission.CAMERA,</div><div class="line">            Manifest.permission.READ_EXTERNAL_STORAGE,</div><div class="line">            Manifest.permission.WRITE_EXTERNAL_STORAGE,</div><div class="line">            Manifest.permission.RECORD_AUDIO</div><div class="line">    &#125;;</div><div class="line">	......</div><div class="line">	.....</div><div class="line">	 permissionUtils=<span class="keyword">new</span> PermissionUtils(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">if</span>(permissionUtils.checkPermissions(PERMISSIONS))&#123;</div><div class="line">            permissionUtils.requestPermissions();</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">           <span class="comment">//通过权限的操作</span></div><div class="line">        &#125;</div><div class="line">		</div><div class="line">....</div><div class="line">.....</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (requestCode) &#123;</div><div class="line">            <span class="keyword">case</span> PermissionUtils.PERMISSION_REQUEST_CODE:</div><div class="line">                <span class="keyword">if</span> (permissionUtils.checkAllPermissionsGranted(grantResults)) &#123;</div><div class="line">                     <span class="comment">//通过权限的操作</span></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 权限拒绝后的提示</span></div><div class="line">                    ToastUtils.showToast(<span class="keyword">this</span>,<span class="string">"没有权限"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python 入门笔记]]></title>
      <url>https://bigbignews.club/2018/03/19/python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>基于python3.6，感觉熟悉java的人学python非常简单~</p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">a, b = <span class="number">0</span>, <span class="number">1</span></div><div class="line"><span class="keyword">print</span> <span class="number">3</span>/<span class="number">2</span> <span class="comment">#除法 有小数</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="number">3</span>//<span class="number">2</span> <span class="comment">#整除 没小数</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="number">3</span> ** <span class="number">5</span> <span class="comment">#3的5次方</span></div><div class="line"></div><div class="line">xxx=input()  <span class="comment">#输入</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="number">1</span>&lt;<span class="number">5</span> <span class="keyword">and</span> <span class="number">6</span>&lt;<span class="number">8</span> :</div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">elif</span> <span class="number">6</span>&lt;<span class="number">5</span> <span class="keyword">or</span> <span class="number">5</span>&lt;<span class="number">8</span>:</div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">elif</span> <span class="keyword">not</span>(<span class="number">9</span>&lt;<span class="number">7</span>):</div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">print</span> (<span class="string">"我叫 %s 今年 %d 岁!"</span> % (<span class="string">'小明'</span>, <span class="number">10</span>))<span class="comment">#格式化输出</span></div><div class="line"><span class="comment">#循环</span></div><div class="line"><span class="keyword">while</span> b &lt; <span class="number">10</span>:</div><div class="line">    <span class="keyword">pass</span></div><div class="line">	</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>) :</div><div class="line">    print(i)</div><div class="line">	</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">    print(i)</div><div class="line"></div><div class="line">	</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>) :</div><div class="line">    print(i)</div><div class="line"><span class="comment">#输出 </span></div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">9</span></div><div class="line"></div><div class="line"><span class="comment">##转换 </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'123'</span>)</div><div class="line"><span class="number">123</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">12.34</span>)</div><div class="line"><span class="number">12</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>float(<span class="string">'12.34'</span>)</div><div class="line"><span class="number">12.34</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">1.23</span>)</div><div class="line"><span class="string">'1.23'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">100</span>)</div><div class="line"><span class="string">'100'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">1</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">''</span>)</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p><img src="/2018/03/19/python-入门笔记/p2.png" alt=""></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">list1 = [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">1997</span>, <span class="number">2000</span>]</div><div class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> ]</div><div class="line"> </div><div class="line"><span class="keyword">print</span> (<span class="string">"list1[0]: "</span>, list1[<span class="number">0</span>])</div><div class="line"><span class="keyword">print</span> (<span class="string">"list2[1:5]: "</span>, list2[<span class="number">1</span>:<span class="number">5</span>])</div><div class="line"></div><div class="line"><span class="comment">#输出结果</span></div><div class="line">list1[<span class="number">0</span>]:  Google</div><div class="line">list2[<span class="number">1</span>:<span class="number">5</span>]:  [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"></div><div class="line"><span class="comment">#删除</span></div><div class="line"><span class="keyword">del</span> list[<span class="number">2</span>]</div><div class="line"><span class="comment">#长度</span></div><div class="line">len([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="comment">#组合</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] + [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"><span class="comment">#重复</span></div><div class="line">[<span class="string">'Hi!'</span>] * <span class="number">4</span></div><div class="line"><span class="comment"># 截取</span></div><div class="line">L[<span class="number">2</span>] <span class="comment">#截取第三个元素</span></div><div class="line">L[<span class="number">-2</span>] <span class="comment">#从右侧开始读取倒数第二个元素</span></div><div class="line">L[<span class="number">1</span>:] <span class="comment">#输出从第二个元素开始后的所有元素</span></div><div class="line"><span class="comment"># 嵌套</span></div><div class="line">a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">n = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">x = [a, n]</div><div class="line">x[<span class="number">0</span>][<span class="number">1</span>]</div></pre></td></tr></table></figure>
<p><img src="/2018/03/19/python-入门笔记/p1.png" alt=""></p>
<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组的元素不能修改<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">tup1 = (<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">1997</span>, <span class="number">2000</span>)</div><div class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> )</div><div class="line">tup3 = <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span></div><div class="line">tup1 = ()</div><div class="line">tup1 = (<span class="number">50</span>,)</div><div class="line"></div><div class="line"><span class="keyword">del</span> tup1 <span class="comment">#删除元组</span></div></pre></td></tr></table></figure></p>
<p><img src="/2018/03/19/python-入门笔记/p3.png" alt=""><br><img src="/2018/03/19/python-入门笔记/p4.png" alt=""></p>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>键值对 键必须是唯一的，但值则不必。<br>字典值可以是任何的 python 对象，既可以是标准的对象，也可以是用户定义的，但键不行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dict1 = &#123; <span class="string">'abc'</span>: <span class="number">456</span> &#125;;</div><div class="line">dict2 = &#123; <span class="string">'abc'</span>: <span class="number">123</span>, <span class="number">98.6</span>: <span class="number">37</span> &#125;;</div><div class="line"></div><div class="line">dict1[<span class="string">'abc'</span>]<span class="comment">#访问</span></div><div class="line"><span class="keyword">del</span> dict[<span class="string">'Name'</span>] <span class="comment"># 删除键 'Name'</span></div><div class="line">dict.clear()     <span class="comment"># 清空字典</span></div><div class="line"><span class="keyword">del</span> dict         <span class="comment"># 删除字典</span></div></pre></td></tr></table></figure></p>
<p><img src="/2018/03/19/python-入门笔记/p5.png" alt=""></p>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line">it = iter(list)    <span class="comment"># 创建迭代器对象</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> it:</div><div class="line">    <span class="keyword">print</span> (x, end=<span class="string">" "</span>)</div><div class="line">	</div><div class="line">	</div><div class="line"><span class="keyword">import</span> sys         <span class="comment"># 引入 sys 模块</span></div><div class="line">next(it) //直接输出一个</div><div class="line"><span class="comment">#输出 1 2 3 4</span></div></pre></td></tr></table></figure>
<p><img src="/2018/03/19/python-入门笔记/p6.png" alt=""></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>可以返回多个值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> 函数名（参数列表）:</span></div><div class="line">    函数体</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span></div><div class="line">    s = <span class="number">1</span>	</div><div class="line"></div><div class="line"><span class="comment">#参数检查</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(x, (int, float)):</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'bad operand type'</span>)</div><div class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> -x</div></pre></td></tr></table></figure></p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>允许多继承<br><img src="/2018/03/19/python-入门笔记/p7.png" alt=""><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span> <span class="comment">#()里面表示继承的类</span></div><div class="line"><span class="comment">#属性的名称前加上两个下划线 __就是表明私有 </span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span><span class="comment">#构造方法</span></div><div class="line">        self.name = name</div><div class="line">        self.score = score</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'%s: %s'</span> % (self.name, self.score))</div><div class="line">		</div><div class="line">		</div><div class="line">bart = Student(<span class="string">'Bart Simpson'</span>, <span class="number">59</span>)</div><div class="line">lisa = Student(<span class="string">'Lisa Simpson'</span>, <span class="number">87</span>)</div><div class="line">bart.print_score()</div><div class="line">lisa.print_score()</div></pre></td></tr></table></figure></p>
<h2 id="搭建Django"><a href="#搭建Django" class="headerlink" title="搭建Django"></a>搭建Django</h2><pre><code>pip install Django 安装
</code></pre><h3 id="mysql配置"><a href="#mysql配置" class="headerlink" title="mysql配置"></a>mysql配置</h3><p><img src="/2018/03/19/python-入门笔记/p9.png" alt=""></p>
<h4 id="方法一MySQLclient"><a href="#方法一MySQLclient" class="headerlink" title="方法一MySQLclient"></a>方法一MySQLclient</h4><p>安装MySQLclient</p>
<pre><code>pip install mysqlclient
</code></pre><p>MySQLclient目前只支持到 python3.4，使用的更高版本的python到下面目录找到base.py，把图中的代码注释掉。</p>
<pre><code>....\Python36\Lib\site-packages\django\db\backends\mysql
</code></pre><p><img src="/2018/03/19/python-入门笔记/p8.png" alt=""></p>
<p>在settings.py填写数据库信息<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">DATABASES = &#123;</div><div class="line">    'default': &#123;</div><div class="line">        'ENGINE': 'django.db.backends.mysql',</div><div class="line">        'NAME': '数据库名称',</div><div class="line">        'USER': '用户名',</div><div class="line">        'PASSWORD': '密码',</div><div class="line">        'HOST': '域名'',</div><div class="line">        'PORT': '端口',</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">.....</div><div class="line">TIME_ZONE = 'Asia/Shanghai' #时区</div></pre></td></tr></table></figure></p>
<h4 id="方法二pymysql"><a href="#方法二pymysql" class="headerlink" title="方法二pymysql"></a>方法二pymysql</h4><p>安装pymysql</p>
<pre><code>pip install pymysql
</code></pre><p>在settings.py填写数据库信息<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import pymysql       </div><div class="line">pymysql.install_as_MySQLdb()</div><div class="line">....</div><div class="line">....</div><div class="line">DATABASES = &#123;</div><div class="line">    'default': &#123;</div><div class="line">        'ENGINE': 'django.db.backends.mysql',</div><div class="line">        'NAME': '数据库名称',</div><div class="line">        'USER': '用户名',</div><div class="line">        'PASSWORD': '密码',</div><div class="line">        'HOST': '域名'',</div><div class="line">        'PORT': '端口',</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">.....</div><div class="line">TIME_ZONE = 'Asia/Shanghai' #时区</div></pre></td></tr></table></figure></p>
<h4 id="同步已有的表"><a href="#同步已有的表" class="headerlink" title="同步已有的表"></a>同步已有的表</h4><pre><code>python manage.py inspectdb
</code></pre><h3 id="创建管理员"><a href="#创建管理员" class="headerlink" title="创建管理员"></a>创建管理员</h3><pre><code>python manage.py migrate 先同步
python manage.py createsuperuser 新建管理员
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android常用的ViewPager]]></title>
      <url>https://bigbignews.club/2018/03/13/Android%E5%B8%B8%E7%94%A8%E7%9A%84ViewPager/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="ViewPager"><a href="#ViewPager" class="headerlink" title="ViewPager"></a>ViewPager</h1><h2 id="PagerAdapter"><a href="#PagerAdapter" class="headerlink" title="PagerAdapter"></a>PagerAdapter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ViewPager mVp;</div><div class="line">    <span class="keyword">private</span> List&lt;View&gt; mViewList=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mVp = (ViewPager) findViewById(R.id.m_vp);</div><div class="line">        mViewList.add(getLayoutInflater().inflate(R.layout.view1,<span class="keyword">null</span>));</div><div class="line">        mViewList.add(getLayoutInflater().inflate(R.layout.view2,<span class="keyword">null</span>));</div><div class="line">        mViewList.add(getLayoutInflater().inflate(R.layout.view3,<span class="keyword">null</span>));</div><div class="line">        mVp.setAdapter(<span class="keyword">new</span> MyPagerAdapter());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyPagerAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;<span class="comment">//数量</span></div><div class="line">            <span class="keyword">return</span>  mViewList.size();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> view==object;</div><div class="line">            <span class="comment">/*判断容器里的View是否与一个key值相关联，</span></div><div class="line">            但ViewPager并不是直接与View关联，而是关联一个key。</div><div class="line">            我们实现这个方法也很简单谷歌推荐我们只需一句——return view == object;*/</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;<span class="comment">//实例化item，PagerAdapter将选择将这个对象填充到在当前ViewPager里</span></div><div class="line">              container.addView(mViewList.get(position));</div><div class="line">              <span class="keyword">return</span> mViewList.get(position);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;<span class="comment">//将item从指定的位置移出容器</span></div><div class="line">              container.removeView(mViewList.get(position));</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="FragmentPagerAdapter-amp-amp-FragmentStatePagerAdapter"><a href="#FragmentPagerAdapter-amp-amp-FragmentStatePagerAdapter" class="headerlink" title="FragmentPagerAdapter&amp;&amp;FragmentStatePagerAdapter"></a>FragmentPagerAdapter&amp;&amp;FragmentStatePagerAdapter</h2><p>setOffscreenPageLimit() 设置缓存页数，默认为1</p>
<h3 id="FragmentPagerAdapter和FragmentStatePagerAdapter区别："><a href="#FragmentPagerAdapter和FragmentStatePagerAdapter区别：" class="headerlink" title="FragmentPagerAdapter和FragmentStatePagerAdapter区别："></a>FragmentPagerAdapter和FragmentStatePagerAdapter区别：</h3><p>前者对于不需要的fragment只会onDestroyView销毁视图实例还保留在FragmentManager中。<br>而后者则是直接走onDetach，FragmentManager 中的fragment会被彻底移除，可在onSaveInstanceState(Bundle)方法中保存fragment的 Bundle 信息。用户切换回来时，保存的实例状态可用来恢复生成新的fragment。</p>
<p> FragmentPagerAdapter适用于那些相对静态的页，数量也比较少的那种。而多数量的可选择 FragmentStatePagerAdapter。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ViewPager mVp;</div><div class="line">    <span class="keyword">private</span> List&lt;Fragment&gt; mFragmentList=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mVp = (ViewPager) findViewById(R.id.m_vp);</div><div class="line">        mFragmentList.add(<span class="keyword">new</span> Fragment1());</div><div class="line">        mFragmentList.add(<span class="keyword">new</span> Fragment2());</div><div class="line">        mFragmentList.add(<span class="keyword">new</span> Fragment3());</div><div class="line">        mVp.setAdapter(<span class="keyword">new</span> MyFragmentPagerAdapter(getSupportFragmentManager()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyFragmentPagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyFragmentPagerAdapter</span><span class="params">(FragmentManager fm)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(fm);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span>  mFragmentList.get(position);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span>  mFragmentList.size();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="禁止滑动效果的方法"><a href="#禁止滑动效果的方法" class="headerlink" title="禁止滑动效果的方法"></a>禁止滑动效果的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewPager</span> <span class="keyword">extends</span> <span class="title">ViewPager</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyViewPager</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyViewPager</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentItem</span><span class="params">(<span class="keyword">int</span> item)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setCurrentItem(item, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="TabLayout"><a href="#TabLayout" class="headerlink" title="TabLayout"></a>TabLayout</h1><pre><code>compile &apos;com.android.support:design:25.3.1&apos;  
记得要和com.android.support:appcompat版本一样
</code></pre><h2 id="一些属性"><a href="#一些属性" class="headerlink" title="一些属性"></a>一些属性</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/m_ty"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!--</span></div><div class="line">    app:tabBackground 设置Tabs的背景</div><div class="line">    app:tabGravity 设为center，Tabs就居中显示，fill 就充满TabLayout </div><div class="line">    app:tabIndicatorColor 设置指示器的颜色（就是下面的横线 默认为colorAccent 透明@color/transparent）</div><div class="line">	app:tabIndicatorHeight 设置指示器的高度，默认是2dp</div><div class="line">	app:tabMaxWidth 设置 Tab 的最大宽度</div><div class="line">	app:tabMinWidth 设置 Tab 的最小宽度</div><div class="line">	app:tabMode 设置Tabs的显示模式 是否能滚动  Tab个数少的时候用 fixed,当Tab个数较多（大于四个或者5个）时用scrollable</div><div class="line">	app:tabPadding 设置Tab padding 还有Top  Bottom Start End</div><div class="line">	app:tabSelectedTextColor 设置Tab选中后，文字显示的颜色</div><div class="line">    app:tabTextColor 设置Tab未选中，文字显示的颜色</div><div class="line">	app:tabTextAppearance 字体样式</div><div class="line">    --&gt;</div></pre></td></tr></table></figure>
<p>定义文字图片<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//手动设置 图片在上文字再下</span></div><div class="line"> TabLayout mTy = (TabLayout) findViewById(R.id.m_ty);</div><div class="line"> mTy.addTab(mTy.newTab().setText(<span class="string">"3"</span>).setIcon(R.mipmap.collection_namol));</div><div class="line"> </div><div class="line"> <span class="comment">//自定义view</span></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTabs</span><span class="params">(TabLayout tabLayout, LayoutInflater inflater, <span class="keyword">int</span>[] tabTitlees, <span class="keyword">int</span>[] tabImgs)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tabImgs.length; i++) &#123;</div><div class="line">            TabLayout.Tab tab = tabLayout.newTab();</div><div class="line">            View view = inflater.inflate(R.layout.tab_custom, <span class="keyword">null</span>);</div><div class="line">            tab.setCustomView(view);</div><div class="line">            TextView tvTitle = view.findViewById(R.id.tv_tab);</div><div class="line">            tvTitle.setText(tabTitlees[i]);</div><div class="line">            ImageView imgTab = view.findViewById(R.id.img_tab);</div><div class="line">            imgTab.setImageResource(tabImgs[i]);</div><div class="line">            tabLayout.addTab(tab);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">....</div></pre></td></tr></table></figure></p>
<p>布局文件设置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/m_ty"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.TabItem</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"附近"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/collection_namol"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.TabLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="配合ViewPager"><a href="#配合ViewPager" class="headerlink" title="配合ViewPager"></a>配合ViewPager</h2><h3 id="第一种方法-setupWithViewPager"><a href="#第一种方法-setupWithViewPager" class="headerlink" title="第一种方法 setupWithViewPager()"></a>第一种方法 setupWithViewPager()</h3><p>优点：方便。缺点：使用setupWithViewPager就不能单独使用addTab设置TabLayout 的每个item的文字图片，布局文件设置也无效。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">mTy.setupWithViewPager(mVp);</div><div class="line">.....</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyFragmentPagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="title">MyFragmentPagerAdapter</span><span class="params">(FragmentManager fm)</span> </span>&#123;</div><div class="line">           <span class="keyword">super</span>(fm);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">           <span class="keyword">return</span>  mFragmentList.get(position);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">return</span>  mFragmentList.size();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;<span class="comment">//对应TabLayout的标题 图片貌似也可以不过我无法实现 个人感觉灵活性差</span></div><div class="line">       <span class="keyword">return</span> <span class="string">"文字"</span>;</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="第二种方法-手动结合"><a href="#第二种方法-手动结合" class="headerlink" title="第二种方法 手动结合"></a>第二种方法 手动结合</h3><p>这种灵活性高</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">mVp.addOnPageChangeListener(<span class="keyword">new</span> TabLayout.TabLayoutOnPageChangeListener(mTy));</div><div class="line">mTy.addOnTabSelectedListener(<span class="keyword">new</span> TabLayout.OnTabSelectedListener() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabSelected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</div><div class="line">               mVp.setCurrentItem(tab.getPosition());</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabUnselected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</div><div class="line"></div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabReselected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</div><div class="line"></div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[几种常用的设计模式的笔记]]></title>
      <url>https://bigbignews.club/2018/03/09/%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="面向对象的六大原则"><a href="#面向对象的六大原则" class="headerlink" title="面向对象的六大原则"></a>面向对象的六大原则</h2><h3 id="基础-接口和抽象类区别"><a href="#基础-接口和抽象类区别" class="headerlink" title="基础 接口和抽象类区别"></a>基础 接口和抽象类区别</h3><p>抽象类是可以表示一种东西的根源，是可以有成员属性和动作的。而接口则仅仅表示动作。</p>
<h3 id="单一职责原则-SRP"><a href="#单一职责原则-SRP" class="headerlink" title="单一职责原则 SRP"></a>单一职责原则 SRP</h3><p>每个类都应该有一个单一的功能，并且该功能应该由这个类完全封装起来。所有它的（这个类的）服务都应该严密的和该功能平行（功能平行，意味着没有依赖）。<br>——维基百科</p>
<p>就是一个类尽量就只有一个单一功能。<br>——我的理解</p>
<h3 id="开闭原则-OCP"><a href="#开闭原则-OCP" class="headerlink" title="开闭原则 OCP"></a>开闭原则 OCP</h3><p>“软件中的对象（类，模块，函数等等）应该对于扩展是开放的，但是对于修改是封闭的，”这意味着一个实体是允许在不改变它的源代码的前提下变更它的行为。该特性在产品化的环境中是特别有价值的，在这种环境中，改变源代码需要代码审查，单元测试以及诸如此类的用以确保产品使用质量的过程。遵循这种原则的代码在扩展时并不发生改变，因此无需上述的过程。<br>——维基百科</p>
<p>就是说当某个类某个方法内部又有不同的处理时（例如世界上本来只有猫，新建了猫这个类，其中有一个“叫”的方法，突然有一天出现了狗，也有“叫”这个方法）这个时候就应该抽象一个动物类，然猫类和狗类分别继承这个类，分别实现“叫”这个方法。<br>——我的理解</p>
<h3 id="里氏替换原则-LSP"><a href="#里氏替换原则-LSP" class="headerlink" title="里氏替换原则 LSP"></a>里氏替换原则 LSP</h3><p>派生类（子类）对象能够替换其基类（超类）对象被使用。<br>——维基百科</p>
<p>子类可以去扩展父类的功能，但是不能改变父类原有的功能。他包含以下几层意思：<br>子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法。<br>子类可以增加自己独有的方法。<br>当子类的方法重载父类的方法时候，方法的形参要比父类的方法的输入参数更加宽松。<br>当子类的方法实现父类的抽象方法时，方法的返回值要比父类更严格。<br>——<a href="https://www.cnblogs.com/qifengshi/p/5709594.html" target="_blank" rel="external">https://www.cnblogs.com/qifengshi/p/5709594.html</a></p>
<h3 id="依赖倒置原则-DIP"><a href="#依赖倒置原则-DIP" class="headerlink" title="依赖倒置原则 DIP"></a>依赖倒置原则 DIP</h3><p>指一种特定的解耦（传统的依赖关系创建在高层次上，而具体的策略设置则应用在低层次的模块上）形式，使得高层次的模块不依赖于低层次的模块的实现细节，依赖关系被颠倒（反转），从而使得低层次模块依赖于高层次模块的需求抽象<br>——维基百科</p>
<p>方法尽量依赖于抽象，把具体实现留给抽象方法实现。<br>——我的理解</p>
<h3 id="接口隔离原则-ISP-灵活性"><a href="#接口隔离原则-ISP-灵活性" class="headerlink" title="接口隔离原则 ISP(灵活性)"></a>接口隔离原则 ISP(灵活性)</h3><p>指明客户（client）应该不依赖于它不使用的方法<br>——维基百科</p>
<p>设计接口尽量细化，不要让类实现无用的抽象方法。<br>——我的理解</p>
<h3 id="迪米特原则-最少知识原则-LOD"><a href="#迪米特原则-最少知识原则-LOD" class="headerlink" title="迪米特原则/最少知识原则  LOD"></a>迪米特原则/最少知识原则  LOD</h3><p>每个单元对于其他的单元只能拥有有限的知识：只是与当前单元紧密联系的单元；<br>每个单元只能和它的朋友交谈：不能和陌生单元交谈；<br>只和自己直接的朋友交谈。<br>——维基百科</p>
<p>尽量降低类与类之间的耦合。<br>——我的理解</p>
]]></content>
      
        
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的Drawable]]></title>
      <url>https://bigbignews.club/2018/03/09/Android%E7%9A%84Drawable/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="shape"><a href="#shape" class="headerlink" title="shape"></a>shape</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:innerRadius</span>=<span class="string">"5dp"</span></div><div class="line">    <span class="attr">android:shape</span>=<span class="string">"ring"</span></div><div class="line">    <span class="attr">android:thicknessRatio</span>=<span class="string">"9"</span></div><div class="line">    <span class="attr">android:useLevel</span>=<span class="string">"false"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--shape 形状</span></div><div class="line">     rectangle 矩形</div><div class="line">     ————————————————————————————————————————</div><div class="line">     oval 椭圆</div><div class="line">     ————————————————————————————————————————</div><div class="line">     line 线</div><div class="line">     需要设置 stroke 描边 才能显示</div><div class="line">     ————————————————————————————————————————</div><div class="line">     ring 圆环</div><div class="line">     需要设置 stroke 描边 才能显示</div><div class="line">     android:useLevel="false" 一般为false</div><div class="line"></div><div class="line">     圆环内半径</div><div class="line">     android:innerRadius圆环内半径</div><div class="line">     android:innerRadiusRatio 以环的宽度比率来表示内环的半径 默认为3，表示内环半径为环的宽度除以3</div><div class="line">     环的厚度</div><div class="line">     android:thickness</div><div class="line">     android:thicknessRatio 浮点型，以环的宽度比率来表示环的厚度，默认为9，表示环的厚度为环的宽度除以9，</div><div class="line">      --&gt;</div><div class="line"><span class="comment">&lt;!--————————————————————————————————————————————————————————————————————————————————————--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"10dp"</span> /&gt;</span> <span class="comment">&lt;!--四个角的角度 只能用于矩形--&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/colorPrimaryDark"</span>/&gt;</span><span class="comment">&lt;!--填充的颜色--&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">padding</span> <span class="attr">android:bottom</span>=<span class="string">"10dp"</span> /&gt;</span><span class="comment">&lt;!--内容与形状边界的内间距--&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">size</span> <span class="attr">android:width</span>=<span class="string">"5dp"</span> <span class="attr">android:height</span>=<span class="string">"5dp"</span>/&gt;</span><span class="comment">&lt;!--形状的大小 作为view背景指定这个是没有用的--&gt;</span></div><div class="line"><span class="comment">&lt;!--——————————————————————————————————————————————————————————————————————————--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">stroke</span> <span class="attr">android:color</span>=<span class="string">"@color/colorPrimary"</span></span></div><div class="line">            <span class="attr">android:width</span>=<span class="string">"2dp"</span></div><div class="line">       /&gt;</div><div class="line">    <span class="comment">&lt;!--stroke 描边</span></div><div class="line">    android:color 描边颜色</div><div class="line">    android:width 描边宽度</div><div class="line">    android:dashWidth 虚线的每一节长度</div><div class="line">    android:dashGap 虚线的每一节的距离</div><div class="line">--&gt;</div><div class="line"><span class="comment">&lt;!--——————————————————————————————————————————————————————————————————————————--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">gradient</span></span></div><div class="line">        <span class="attr">android:angle</span>=<span class="string">"45"</span></div><div class="line">        <span class="attr">android:centerColor</span>=<span class="string">"@color/colorPrimaryDark"</span></div><div class="line">        <span class="attr">android:endColor</span>=<span class="string">"@color/colorAccent"</span></div><div class="line">        <span class="attr">android:startColor</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">        <span class="attr">android:type</span>=<span class="string">"sweep"</span></div><div class="line">        <span class="attr">android:useLevel</span>=<span class="string">"false"</span> /&gt;</div><div class="line">    <span class="comment">&lt;!--gradient 渐变</span></div><div class="line">     渐变开始 中间 结束的颜色</div><div class="line">     android:startColor</div><div class="line">     android:centerColor</div><div class="line">     android:endColor</div><div class="line">     ——————————————————————————————————————————————————————</div><div class="line">     android:useLevel 如果为true，则可在LevelListDrawable中使用</div><div class="line">     android:type 渐变类型</div><div class="line">     ——————————————————————————————————————————————————————</div><div class="line">     线性渐变 linear 默认渐变</div><div class="line">     android:angle 必须是45的倍数，0表示从左到右，90表示从下到上</div><div class="line">     ——————————————————————————————————————————————————————</div><div class="line">     放射渐变 radial</div><div class="line">     android:gradientRadius 渐变半径</div><div class="line">     android:centerX 渐变中心的相对X坐标，在0.0到1.0之间，默认为0.5，表示在正中间</div><div class="line">     android:centerY 渐变中心的相对Y坐标，在0.0到1.0之间，默认为0.5，表示在正中间</div><div class="line">     ———————————————————————————————————————————————————————</div><div class="line">     扫描渐变 sweep</div><div class="line"></div><div class="line">    --&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="layer-list"><a href="#layer-list" class="headerlink" title="layer-list"></a>layer-list</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/colorPrimary"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"oval"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/colorAccent"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/layout_list"</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/shape"</span> <span class="attr">android:state_pressed</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">    android:state_enabled: 设置触摸或点击事件是否可用状态，一般只在false时设置该属性，表示不可用状态</div><div class="line">    android:state_pressed: 设置是否按压状态，一般在true时设置该属性，表示已按压状态，默认为false</div><div class="line">    android:state_selected: 设置是否选中状态，true表示已选中，false表示未选中</div><div class="line">    android:state_checked: 设置是否勾选状态，主要用于CheckBox和RadioButton，true表示已被勾选，false表示未被勾选</div><div class="line">    android:state_checkable: 设置勾选是否可用状态，类似state_enabled，只是state_enabled会影响触摸或点击事件，而state_checkable影响勾选事件</div><div class="line">    android:state_focused: 设置是否获得焦点状态，true表示获得焦点，默认为false，表示未获得焦点</div><div class="line">    android:state_window_focused: 设置当前窗口是否获得焦点状态，true表示获得焦点，false表示未获得焦点，例如拉下通知栏或弹出对话框时，当前界面就会失去焦点；另外，ListView的ListItem获得焦点时也会触发true状态，可以理解为当前窗口就是ListItem本身</div><div class="line">    android:state_activated: 设置是否被激活状态，true表示被激活，false表示未激活，API Level 11及以上才支持，可通过代码调用控件的setActivated(boolean)方法设置是否激活该控件</div><div class="line">    android:state_hovered: 设置是否鼠标在上面滑动的状态，true表示鼠标在上面滑动，默认为false，API Level 14及以上才支持</div><div class="line">    --&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的悬浮窗]]></title>
      <url>https://bigbignews.club/2018/03/09/Android%E7%9A%84%E6%82%AC%E6%B5%AE%E7%AA%97/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="适配8-0"><a href="#适配8-0" class="headerlink" title="适配8.0"></a>适配8.0</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//LayoutParams.type设为  </span></div><div class="line">WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY</div><div class="line"><span class="comment">//非8.0</span></div><div class="line">LayoutParams.TYPE_SYSTEM_ERROR</div><div class="line"> <span class="comment">//增加运行时权限</span></div><div class="line">   <span class="keyword">if</span> (!Settings.canDrawOverlays(<span class="keyword">this</span>)) &#123;</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);</div><div class="line">                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">                startActivityForResult(intent, <span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//TODO do something you need</span></div><div class="line">            &#125;</div><div class="line"> ;</div></pre></td></tr></table></figure>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">private</span> Button mFloatingButton;</div><div class="line">   <span class="keyword">private</span> WindowManager.LayoutParams mLayoutParams;</div><div class="line">   <span class="keyword">private</span> WindowManager mWindowManager;</div><div class="line"> </div><div class="line"> ....</div><div class="line"> ....</div><div class="line"> </div><div class="line"> mCreateWindowButton = (Button) findViewById(R.id.button1);</div><div class="line"> </div><div class="line"> mWindowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);</div><div class="line">            mFloatingButton = <span class="keyword">new</span> Button(<span class="keyword">this</span>);</div><div class="line">            mLayoutParams = <span class="keyword">new</span> WindowManager.LayoutParams(</div><div class="line">                    LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">                    PixelFormat.TRANSPARENT);</div><div class="line">            mLayoutParams.flags = LayoutParams.FLAG_NOT_TOUCH_MODAL</div><div class="line">                    | LayoutParams.FLAG_NOT_FOCUSABLE</div><div class="line">                    | LayoutParams.FLAG_SHOW_WHEN_LOCKED;</div><div class="line">            mLayoutParams.type = LayoutParams.TYPE_SYSTEM_ERROR;</div><div class="line">            mLayoutParams.gravity = Gravity.LEFT | Gravity.TOP;</div><div class="line">            mLayoutParams.x = <span class="number">100</span>;</div><div class="line">            mLayoutParams.y = <span class="number">300</span>;</div><div class="line">            mFloatingButton.setOnTouchListener(<span class="keyword">this</span>);</div><div class="line">            mWindowManager.addView(mFloatingButton, mLayoutParams);</div><div class="line"> </div><div class="line"> ......</div><div class="line"> ......</div><div class="line">     mWindowManager..updateViewLayout(mlayout, wmParams);</div><div class="line">.......</div><div class="line">......</div><div class="line"> </div><div class="line"> <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mWindowManager.removeView(mFloatingButton);</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 自定义View的探索]]></title>
      <url>https://bigbignews.club/2018/03/04/Android-%E8%87%AA%E5%AE%9A%E4%B9%89View%E7%9A%84%E6%8E%A2%E7%B4%A2/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>参考内容<br><a href="http://www.gcssloop.com/" target="_blank" rel="external">http://www.gcssloop.com/</a><br><a href="http://hencoder.com/" target="_blank" rel="external">http://hencoder.com/</a><br>《Android开发艺术探索》  </p>
<pre><code>invalidate(); //重新绘制
</code></pre><h1 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h1><h2 id="Paint-画笔"><a href="#Paint-画笔" class="headerlink" title="Paint 画笔"></a>Paint 画笔</h2><p>paint.setAntiAlias(true);//抗锯齿<br>paint.setColor(Color.RED);//颜色<br>paint.setStyle(Paint.Style.STROKE); // Style 修改为画线模式  FILL 是填充模式，STROKE 是画线模式（即勾边模式），FILL_AND_STROKE 是两种模式一并使用：既画线又填充。它的默认值是 FILL，填充模式。<br>paint.setStrokeWidth(20); //STROKE 和 FILL_AND_STROKE 下，还可以使用 paint.setStrokeWidth(float width) 来设置线条的宽度：<br>paint.setTextSize(84);//设置字体大小<br>paint.setTypeface();//设置字体样式<br>paint.setStrokeCap(cap) //设置线冒样式 Cap.BUTT(无线帽)、Cap.SQUARE(方形线帽)、Cap.ROUND(圆形线冒)<br>setShader(Shader shader) </p>
<p>Shader 注意：在设置了 Shader 的情况下， Paint.setColor/ARGB() 所设置的颜色就不再起作用。<br>LinearGradient 线性渐变<br>Shader shader = new LinearGradient(float x0, float y0, float x1, float y1, int colors[], float positions[], TileMode tile)<br>第一个参数为线性起点的x坐标<br>第二个参数为线性起点的y坐标<br>第三个参数为线性终点的x坐标<br>第四个参数为线性终点的y坐标<br>第五个参数为实现渐变效果的颜色的组合<br>第六个参数为前面的颜色组合中的各颜色在渐变中占据的位置（比重），如果为空，则表示上述颜色的集合在渐变中均匀出现<br>第七个参数为渲染器平铺的模式，一共有三种<br>-CLAMP<br>边缘拉伸<br>-REPEAT<br>在水平和垂直两个方向上重复，相邻图像没有间隙<br>-MIRROR<br>以镜像的方式在水平和垂直两个方向上重复，相邻图像有间隙<br>LinearGradient(float x0, float y0, float x1, float y1, int color0, int color1, TileMode tile)<br>int color0表示渐变起始颜色<br>int color1表示渐变终止颜色</p>
<h2 id="Canvas-画布"><a href="#Canvas-画布" class="headerlink" title="Canvas 画布"></a>Canvas 画布</h2><p>改变坐标<br>//移动坐标原点<br>canvas.translate(x, y);//移动坐标原点，位移是基于当前位置移动<br>//缩放和翻转 可叠加<br>canvas.scale(float sx, float sy）<br>canvas.scale(float sx, float sy, float px, float py);//(缩放x轴比例,缩放y轴比例,缩放中心点x,缩放中心点y) 缩放x轴比例,缩放y轴比例为负数会图形根据中心点翻转， 缩放中心点x,y,缩放中心点代表图形向哪个点缩或者放。缩放是可以叠加的<br>//旋转 可叠加<br>rotate(float degrees);//旋转角度<br>rotate (float degrees, float px, float py)//旋转角度degrees 旋转中心点px,py  </p>
<p>保存快照和回退<br><a href="http://www.gcssloop.com/customview/Canvas_Convert" target="_blank" rel="external">http://www.gcssloop.com/customview/Canvas_Convert</a><br>save();<br>save (int saveFlags);<br>回退<br>restore();<br>restoreToCount();//如果调用restoreToCount（2) 则会弹出 2 3 4 5 的状态，并根据第2次保存的状态进行恢复。  </p>
<p>//错切 可叠加<br>skew (float sx, float sy）<br>float sx:将画布在x方向上倾斜相应的角度，sx倾斜角度的tan值，<br>float sy:将画布在y轴方向上倾斜相应的角度，sy为倾斜角度的tan值.  </p>
<p>//绘制画布颜色<br> canvas.drawColor(Color.parseColor(“#88880000”));（半透明颜色会加遮罩）另外有 drawRGB(int r, int g, int b) 和 drawARGB(int a, int r, int g, int b)<br> 这类颜色填充方法一般用于在绘制之前设置底色，或者在绘制之后为界面设置半透明蒙版。 </p>
<p>//画点<br>drawPoint(float x, float y, Paint paint)//(点x坐标,点y坐标, Paint paint) //点的大小可以通过 paint.setStrokeWidth(width) 来设置；点的形状可以通过  paint.setStrokeCap(cap) 来设置：ROUND 画出来是圆形的点，SQUARE 或 BUTT 画出来是方形的点。<br>// 和FILL 模式下的 drawCircle() 和 drawRect()一样</p>
<p>//批量画点  </p>
<p>float[] points = {0, 0, 50, 50, 50, 100, 100, 50, 100, 100, 150, 50, 150, 100};<br>drawPoints(float[] pts, int offset, int count, Paint paint) / drawPoints(float[] pts, Paint paint) //offset偏移量 点数量<br>//canvas.drawPoints(points, 2 /<em> 跳过两个数，即前两个 0 </em>/,  8 /<em> 一共绘制 8 个数（4 个点）</em>/, paint);  </p>
<p>//画线<br>drawLine(200, 200, 800, 500, paint);  //drawLine(左边x轴起点, 上边y轴起点 右边x轴终点, 下边y轴终点, Paint paint)</p>
<p>//批量划线<br>float[] points = {20, 20, 120, 20, 70, 20, 70, 120, 20, 120, 120, 120, 150, 20, 250, 20, 150, 20, 150, 120, 250, 20, 250, 120, 150, 120, 250, 120};<br>drawLines(points, paint);  </p>
<p>//画矩形 支持RectF<br>drawRect(float left, float top, float right, float bottom, Paint paint) ; ( 左边x轴起点, 上边y轴起点 右边x轴终点, 下边y轴终点, Paint paint) </p>
<p>//圆角矩形 支持RectF<br>drawRoundRect(左边x轴起点, 上边y轴起点 右边x轴终点, 下边y轴终点， float rx, float ry, Paint paint) //rx 和 ry 是圆角的横向半径和纵向半径。</p>
<p>//画圆<br>drawCircle(float centerX, float centerY, float radius, Paint paint) 画圆 （圆心x坐标,圆心y坐标,半径,画笔）</p>
<p>//画椭圆<br>drawOval(float left, float top, float right, float bottom, Paint paint) //( 左边x轴起点, 上边y轴起点 右边x轴终点, 下边y轴终点, Paint paint)<br>//绘制弧形或扇形<br>drawArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean useCenter, Paint paint)<br>//drawArc() 是使用一个椭圆来描述弧形的  startAngle 是弧形的起始角度（x 轴的正向，即正右的方向，是 0 度的位置；顺时针为正角度，逆时针为负角度），sweepAngle 是弧形划过的角度；<br>//useCenter 表示是否连接到圆心，如果不连接到圆心，就是弧形，如果连接到圆心，就是扇形。</p>
<p>画 Bitmap<br>drawBitmap(Bitmap bitmap, float left, float top, Paint paint) 画 Bitmap<br>drawBitmap(Bitmap bitmap, Rect src, RectF dst, Paint paint) /<br> drawBitmap(Bitmap bitmap, Rect src, Rect dst, Paint paint) /   //Rect src 指定绘制图片的区域, Rect dst 指定图片在屏幕上显示的区域<br> drawBitmap(Bitmap bitmap, Matrix matrix, Paint paint)<br>绘制文字<br>drawText(String text, float x, float y, Paint paint) 绘制文字<br>drawText(str,1,3,200,500,textPaint);// (字符串 开始截取位置 结束截取位置 基线x 基线y 画笔)<br>指定字符位置<br>drawPosText(str,new float[]{<br>      100,100,    // 第一个字符位置<br>      200,200,    // 第二个字符位置<br>      300,300,    // …<br>      400,400,<br>      500,500<br>},textPaint);<br>drawPosText (char[] text, int index, int count, float[] pos, Paint paint)</p>
<p>//画自定义图形 通过描述路径的方式来绘制图形<br>canvas.drawPath(path, paint); </p>
<h3 id="描述路径Path"><a href="#描述路径Path" class="headerlink" title="描述路径Path"></a>描述路径Path</h3><p>  Path path = new Path();</p>
<h4 id="图形交叉的填充方式"><a href="#图形交叉的填充方式" class="headerlink" title="图形交叉的填充方式"></a>图形交叉的填充方式</h4><p>//setFillType(Path.FillType ft) 设置填充方式<br>//Path.FillType.WINDING 默认值(全填充)<br>//Path.FillType.EVEN_ODD 交叉填充<br>//带有 INVERSE 前缀是反色  </p>
<p><img src="http://ww2.sinaimg.cn/large/87c01ec7gy1foxd4rsjr6j20ji0cxjv7.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/87c01ec7gy1foxd5kezsrj20jl0qh7ak.jpg" alt=""></p>
<h4 id="路径方向-Direction-dir"><a href="#路径方向-Direction-dir" class="headerlink" title="路径方向(Direction dir)"></a>路径方向(Direction dir)</h4><p> Path.Direction.CW //顺时针<br> Path.Direction.CCW //逆时针  </p>
<h4 id="添加图形"><a href="#添加图形" class="headerlink" title="添加图形"></a>添加图形</h4><p>addCircle(float centerX, float centerY, float radius,  Direction dir) 添加圆形<br>addOval(float left, float top, float right, float bottom, Direction dir) / addOval(RectF oval, Direction dir) 添加椭圆<br>addRect(float left, float top, float right, float bottom, Direction dir) / addRect(RectF rect, Direction dir) 添加矩形<br>addRoundRect(RectF rect, float rx, float ry, Direction dir) / addRoundRect(float left, float top, float right, float bottom, float rx, float ry, Direction dir)<br>/ addRoundRect(RectF rect, float[] radii, Direction dir) / addRoundRect(float left, float top, float right, float bottom, float[] radii, Direction dir) 添加圆角矩形  </p>
<h4 id="添加线条"><a href="#添加线条" class="headerlink" title="添加线条"></a>添加线条</h4><p>lineTo(float x, float y) （绝对坐标 开始坐标为 0，0） / rLineTo(float x, float y) （相对坐标，指最后 调用画 Path 的方法的终点位置）</p>
<p>quadTo(float x1, float y1, float x2, float y2)<br>/ rQuadTo(float dx1, float dy1, float dx2, float dy2) 画二次贝塞尔曲线<br>这条二次贝塞尔曲线的起点就是当前位置，而参数中的 x1, y1 和 x2, y2 则分别是控制点和终点的坐标。和 rLineTo(x, y) 同理，rQuadTo(dx1, dy1, dx2, dy2) 的参数也是相对坐标</p>
<p>cubicTo(float x1, float y1, float x2, float y2, float x3, float y3)<br>/ rCubicTo(float x1, float y1, float x2, float y2, float x3, float y3) 画三次贝塞尔曲线</p>
<h4 id="移动坐标"><a href="#移动坐标" class="headerlink" title="移动坐标"></a>移动坐标</h4><p>moveTo(float x, float y) / rMoveTo(float x, float y) 移动到目标位置</p>
<p>setLastPoint(x,y); //重置上一次操作的最后一个点</p>
<h4 id="画弧形"><a href="#画弧形" class="headerlink" title="画弧形"></a>画弧形</h4><p>arcTo(RectF oval, float startAngle, float sweepAngle, boolean forceMoveTo) /<br>arcTo(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo) /<br>arcTo(RectF oval, float startAngle, float sweepAngle) 画弧形 forceMoveTo为true表示不拖笔 false为拖笔</p>
<p>//默认不拖笔<br>addArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle) /<br> addArc(RectF oval, float startAngle, float sweepAngle)</p>
<h4 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h4><p> offset (float dx, float dy)<br> offset (float dx, float dy, Path dst) Path dst 把平移的Path保存给dst 会覆盖dst原有的 同时最开始调用 path.offset 不会修改path<br> //重置<br> path.reset();</p>
<h4 id="添加另一个path"><a href="#添加另一个path" class="headerlink" title="添加另一个path"></a>添加另一个path</h4><p>addPath(Path path)<br>封闭图形 （将起始点和结束点连接）<br>path.close();<br>不是所有的子图形都需要使用 close() 来封闭。当需要填充图形时（即 Paint.Style 为  FILL 或 FILL_AND_STROKE），Path 会自动封闭子图形。</p>
<h4 id="PathMeasure-测量path"><a href="#PathMeasure-测量path" class="headerlink" title="PathMeasure 测量path"></a>PathMeasure 测量path</h4><p>关联path<br>  PathMeasure ()<br>  用这个构造函数可创建一个空的 PathMeasure，但是使用之前需要先调用 setPath 方法来与 Path 进行关联。被关联的 Path 必须是已经创建好的，如果关联之后 Path 内容进行了更改，则需要使用 setPath 方法重新关联。  </p>
<p>  PathMeasure (Path path, boolean forceClosed)<br>  用这个构造函数是创建一个 PathMeasure 并关联一个 Path， 其实和创建一个空的 PathMeasure 后调用 setPath 进行关联效果是一样的，同样，被关联的 Path 也必须是已经创建好的，如果关联之后 Path 内容进行了更改，则需要使用 setPath 方法重新关联。不论 forceClosed 设置为何种状态(true 或者 false)， 都不会影响原有Path显示的状态，设置闭合后如果是非闭合path则测量的长度为会加上闭合的长度。</p>
<p>该方法有两个参数，第一个参数自然就是被关联的 Path 了，第二个参数是用来确保 Path 闭合，如果设置为 true， 则不论之前Path是否闭合，都会自动闭合该 Path(如果Path可以闭合的话)。<br>setPath 是 PathMeasure 与 Path 关联的重要方法，效果和 构造函数 中两个参数的作用是一样的。<br>isClosed 用于判断 Path 是否闭合，但是如果你在关联 Path 的时候设置 forceClosed 为 true 的话，这个方法的返回值则一定为true。<br>测量<br>测量 默认是选取path最外层的曲线<br>float getLength(); 用于获取 Path 的总长度。<br>boolean getSegment (float startD, float stopD, Path dst, boolean startWithMoveTo) 截取Path的一个片段 返回true为截取成功  startD为开始长度 stopD为结束长度 要注意path的方向 startWithMoveTo 是否保留截取的起点的位置，false就会把截取的path的起点放到dst的终点 有可能导致截取的path形变。<br>boolean nextContour();  跳转到path的下一条曲线 成功返回true</p>
<p>boolean getPosTan (float distance, float[] pos, float[] tan)得到路径上某一长度的位置以及该位置的正切值 成功返回true   distance距离 Path 起点的长度  pos[0]为x坐标 pos[1]为y坐标 tan[0]是邻边边长，tan[1]是对边边长   邻边对边是由pos的坐标与坐标轴原点连接构成一个直角三角形得到的<br>Math.atan2(tan[1], tan[0]) 获取到正切角的弧度值<br>(float) (Math.atan2(tan[1], tan[0]) * 180.0 / Math.PI) 弧度转角度</p>
<p>录制Canvas<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.创建Picture</span></div><div class="line"><span class="keyword">private</span> Picture mPicture = <span class="keyword">new</span> Picture();</div><div class="line"></div><div class="line">---------------------------------------------------------------</div><div class="line"></div><div class="line"><span class="comment">// 2.录制内容方法</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recording</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 开始录制 (接收返回值Canvas)</span></div><div class="line">    Canvas canvas = mPicture.beginRecording(<span class="number">500</span>, <span class="number">500</span>);</div><div class="line">    <span class="comment">// 创建一个画笔</span></div><div class="line">    Paint paint = <span class="keyword">new</span> Paint();</div><div class="line">    paint.setColor(Color.BLUE);</div><div class="line">    paint.setStyle(Paint.Style.FILL);</div><div class="line"></div><div class="line">    <span class="comment">// 在Canvas中具体操作</span></div><div class="line">    <span class="comment">// 位移</span></div><div class="line">    canvas.translate(<span class="number">250</span>,<span class="number">250</span>);</div><div class="line">    <span class="comment">// 绘制一个圆</span></div><div class="line">    canvas.drawCircle(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,paint);</div><div class="line"></div><div class="line">    mPicture.endRecording();</div><div class="line">&#125;</div><div class="line"></div><div class="line">---------------------------------------------------------------</div><div class="line"></div><div class="line"><span class="comment">// 3.在使用前调用(我在构造函数中调用了)</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Canvas3</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs);</div><div class="line">    </div><div class="line">    recording();    <span class="comment">// 调用录制</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">回放</div><div class="line">canvas.drawPicture(mPicture,<span class="keyword">new</span> RectF(<span class="number">0</span>,<span class="number">0</span>,mPicture.getWidth(),<span class="number">200</span>));<span class="comment">//RectF Rect 小于录制大小会缩放</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 包装成为Drawable</span></div><div class="line">PictureDrawable drawable = <span class="keyword">new</span> PictureDrawable(mPicture);</div><div class="line"><span class="comment">// 设置绘制区域 -- 注意此处所绘制的实际内容不会缩放</span></div><div class="line">drawable.setBounds(<span class="number">0</span>,<span class="number">0</span>,<span class="number">250</span>,mPicture.getHeight());</div><div class="line"><span class="comment">// 绘制</span></div><div class="line">drawable.draw(canvas);</div><div class="line">setBounds是设置在画布上的绘制区域，并非根据该区域进行缩放，也不是剪裁Picture，每次都从Picture的左上角开始绘制。</div></pre></td></tr></table></figure></p>
<h2 id="绘制顺序"><a href="#绘制顺序" class="headerlink" title="绘制顺序"></a>绘制顺序</h2><p>第 1 步——背景，它的绘制发生在一个叫 drawBackground() 的方法里，但这个方法是 private 的，不能重写，你如果要设置背景，只能用自带的 API 去设置（xml 布局文件的 android:background 属性以及 Java 代码的 View.setBackgroundXxx() 方法，第2步主体onDraw() 第3步子view dispatchDraw()第4步onDrawForeground() 滑动边缘渐变和滑动条<br>onDraw()<br>不是继承view的情况下 view的onDraw()原本就是空实现<br>把绘制代码写在 super.onDraw() 的下面，由于绘制代码会在原有内容绘制结束之后才执行，所以绘制内容就会盖住控件原来的内容。如果把绘制代码写在 super.onDraw() 的上面，由于绘制代码会执行在原有内容的绘制之前，所以绘制的内容会被控件的原内容盖住。</p>
<p>有子view<br><a href="http://hencoder.com/ui-1-5/" target="_blank" rel="external">http://hencoder.com/ui-1-5/</a><br>dispatchDraw()<br>ViewGroup 会先调用自己的  onDraw() 来绘制完自己的主体之后再去调用dispatchDraw()绘制它的子 View 写在 super.dispatchDraw() 后能让绘制内容盖住子 View ， 写在super.dispatchDraw()前，也就是绘制内容会出现在主体内容和子 View 之间  </p>
<p>onDrawForeground()(API 23安卓6.0才能用)<br> 写在 super.onDrawForeground() 的下面绘制代码会在滑动边缘渐变、滑动条和前景之后被执行，那么绘制内容将会盖住滑动边缘渐变、滑动条和前景。<br> 如果你把绘制代码写在了 super.onDrawForeground() 的上面，绘制内容就会在 dispatchDraw() 和  super.onDrawForeground() 之间执行，那么绘制内容会盖住子 View，但被滑动边缘渐变、滑动条以及前景盖住：</p>
<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><h2 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h2><p> <img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fj7x3rm1xxj30u50laq6y.jpg" alt=""><br>  translationX() 和 translationXBy() 这两个方法的区别是：前者表示移动到某个坐标值，后者表示移动了多少距离。</p>
<h3 id="ViewPropertyAnimator"><a href="#ViewPropertyAnimator" class="headerlink" title="ViewPropertyAnimator"></a>ViewPropertyAnimator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">view.animate().translationX(<span class="number">500</span>);</div></pre></td></tr></table></figure>
<p><a href="http://hencoder.com/ui-1-6/" target="_blank" rel="external">http://hencoder.com/ui-1-6/</a></p>
<h3 id="ObjectAnimator"><a href="#ObjectAnimator" class="headerlink" title="ObjectAnimator"></a>ObjectAnimator</h3><pre><code>如果是自定义控件，需要添加 setter / getter 方法；
</code></pre><p>例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SportsView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;  </div><div class="line">  <span class="keyword">float</span> progress = <span class="number">0</span>;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="comment">// 创建 getter 方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getProgress</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> progress;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 创建 setter 方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProgress</span><span class="params">(<span class="keyword">float</span> progress)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.progress = progress;</div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">        ......</div><div class="line"></div><div class="line">        canvas.drawArc(arcRectF, <span class="number">135</span>, progress * <span class="number">2.7f</span>, <span class="keyword">false</span>, paint);</div><div class="line"></div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">......</div><div class="line"></div><div class="line"><span class="comment">// 创建 ObjectAnimator 对象</span></div><div class="line">ObjectAnimator animator = ObjectAnimator.ofFloat(view, <span class="string">"progress"</span>, <span class="number">0</span>, <span class="number">65</span>);  </div><div class="line"><span class="comment">// 执行动画</span></div><div class="line">animator.start();</div></pre></td></tr></table></figure></p>
<p>属性使用例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// tvT为控件名称 若为自定义view内部则用this</span></div><div class="line"><span class="comment">//颜色渐变</span></div><div class="line">        ObjectAnimator animator = ObjectAnimator.ofInt(tvT, <span class="string">"BackgroundColor"</span>, <span class="number">0xffff0000</span>, <span class="number">0xff00ff00</span>);</div><div class="line">        animator.setEvaluator(<span class="keyword">new</span> ArgbEvaluator());</div><div class="line">        animator.setDuration(<span class="number">3000</span>); <span class="comment">// 设置动画持续时间</span></div><div class="line"></div><div class="line">        <span class="comment">//平移</span></div><div class="line">        ObjectAnimator animator1 = ObjectAnimator.ofFloat(tvT, <span class="string">"translationX"</span>, <span class="number">0</span>,<span class="number">500</span>,<span class="number">0</span>,<span class="number">200</span>);</div><div class="line">        animator1.setInterpolator(<span class="keyword">new</span> OvershootInterpolator());<span class="comment">//时间插值器 回弹</span></div><div class="line">        animator1.setDuration(<span class="number">1000</span>);</div><div class="line"></div><div class="line">        <span class="comment">//同时改变多个属性</span></div><div class="line">        PropertyValuesHolder holder1 = PropertyValuesHolder.ofFloat(<span class="string">"scaleX"</span>, <span class="number">2</span>);<span class="comment">//改变尺寸</span></div><div class="line">        PropertyValuesHolder holder2 = PropertyValuesHolder.ofFloat(<span class="string">"scaleY"</span>, <span class="number">5</span>);</div><div class="line">        PropertyValuesHolder holder3 = PropertyValuesHolder.ofFloat(<span class="string">"alpha"</span>, <span class="number">0.5f</span>);<span class="comment">//改变透明度</span></div><div class="line">        PropertyValuesHolder holder4 = PropertyValuesHolder.ofFloat(<span class="string">"rotation"</span>, <span class="number">0</span>,<span class="number">90</span>,<span class="number">180</span>);<span class="comment">//z轴旋转</span></div><div class="line">        PropertyValuesHolder holder5 = PropertyValuesHolder.ofFloat(<span class="string">"rotationX"</span>, <span class="number">0</span>,<span class="number">90</span>,<span class="number">180</span>);<span class="comment">//x轴旋转</span></div><div class="line">        PropertyValuesHolder holder6 = PropertyValuesHolder.ofFloat(<span class="string">"rotationY"</span>, <span class="number">0</span>,<span class="number">90</span>,<span class="number">180</span>);<span class="comment">//y轴旋转</span></div><div class="line">        ObjectAnimator animator2 = ObjectAnimator.ofPropertyValuesHolder(tvT, holder1, holder2, holder3,holder4,holder5,holder6);</div><div class="line">        animator2.setDuration(<span class="number">1000</span>);</div><div class="line"></div><div class="line">        <span class="comment">//平移</span></div><div class="line">        ObjectAnimator animator3 = ObjectAnimator.ofFloat(tvT, <span class="string">"translationY"</span>, <span class="number">500</span>);</div><div class="line">        animator3.setDuration(<span class="number">2000</span>);</div><div class="line">        <span class="comment">//animator.pause();//暂停</span></div><div class="line"></div><div class="line">  </div><div class="line">		</div><div class="line">		 <span class="comment">//多个动画依次执行</span></div><div class="line">     <span class="comment">/*   animatorSet.playSequentially(animator, animator1,animator2);</span></div><div class="line">        animatorSet.start();*/</div><div class="line">		</div><div class="line">		<span class="comment">//多个动画一起执行</span></div><div class="line">		<span class="comment">/*animatorSet.playTogether(animator, animator1,animator2);</span></div><div class="line">		 animatorSet.start()*/</div><div class="line"></div><div class="line">       <span class="comment">// 属性动画合集</span></div><div class="line">        AnimatorSet animatorSet = <span class="keyword">new</span> AnimatorSet();</div><div class="line">		</div><div class="line">         <span class="comment">/*顺序为animator&gt;&gt;animator1&amp;&amp;animator2&gt;&gt;animator3*/</span></div><div class="line">        animatorSet.play(animator1).with(animator2);<span class="comment">//同时进行</span></div><div class="line">        animatorSet.play(animator1).before(animator3);<span class="comment">//animator1在animator3之前</span></div><div class="line">        animatorSet.play(animator1).after(animator);<span class="comment">//animator1在animator之后</span></div><div class="line">        animatorSet.start();</div></pre></td></tr></table></figure></p>
<p>插值器类型<br>AccelerateInterpolator()加速动画<br>DecelerateInterpolator()减速动画<br>AccelerateDecelerateInterpolator()先加速在减速<br>AnticipateInterpolator()先反向压缩一小段，然后在加速弹出<br>AnticipateOvershootInterpolator()先反向一段，然后加速反向回来，执行完毕自带回弹效果<br>BounceInterpolator()执行完毕之后会回弹跳跃几段<br>CycleInterpolator(2)循环，动画循环一定次数<br>LinearInterpolator()线性均匀改变<br>OvershootInterpolator加速执行，结束之后回弹  </p>
<h1 id="事件分发机制"><a href="#事件分发机制" class="headerlink" title="事件分发机制"></a>事件分发机制</h1><h2 id="view的事件分发机制"><a href="#view的事件分发机制" class="headerlink" title="view的事件分发机制"></a>view的事件分发机制</h2><p> <a href="https://www.jianshu.com/p/0b821660b195" target="_blank" rel="external">https://www.jianshu.com/p/0b821660b195</a><br> <a href="http://www.gcssloop.com/customview/dispatch-touchevent-theory" target="_blank" rel="external">http://www.gcssloop.com/customview/dispatch-touchevent-theory</a><br> 图<br> Activity －&gt; PhoneWindow －&gt; DecorView －&gt; ViewGroup －&gt; … －&gt; View<br> Activity &lt;－ PhoneWindow &lt;－ DecorView &lt;－ ViewGroup &lt;－ … &lt;－ View<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原理伪代码</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;             <span class="comment">// 默认状态为没有消费过</span></div><div class="line"></div><div class="line"><span class="comment">//ViewGroup才有这个步骤</span></div><div class="line">    <span class="keyword">if</span> (!onInterceptTouchEvent(ev)) &#123;   <span class="comment">// 如果没有拦截交给子View</span></div><div class="line">        result = child.dispatchTouchEvent(ev);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!result) &#123;                      <span class="comment">// 如果事件没有被消费,询问自身onTouchEvent</span></div><div class="line">        result = onTouchEvent(ev);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="dispatchTouchEvent-事件分发-Activity-ViewGroup-View"><a href="#dispatchTouchEvent-事件分发-Activity-ViewGroup-View" class="headerlink" title="dispatchTouchEvent 事件分发(Activity ViewGroup View)"></a>dispatchTouchEvent 事件分发(Activity ViewGroup View)</h3><p>只要事件能传到当前view一定调用 主要控制最终控制是否回传父view  不特指的话只要onTouchEvent()方法或者OnTouchListener()返回了true它就返回true<br>为false时回传子view dispatchTouchEvent</p>
<h3 id="onInterceptTouchEvent-事件拦截-ViewGroup-ViewGroup默认不拦截"><a href="#onInterceptTouchEvent-事件拦截-ViewGroup-ViewGroup默认不拦截" class="headerlink" title="onInterceptTouchEvent 事件拦截(ViewGroup)  ViewGroup默认不拦截"></a>onInterceptTouchEvent 事件拦截(ViewGroup)  ViewGroup默认不拦截</h3><p>表示是否拦截此事件 true为拦截 拦截后执行 onTouchEvent false则传给他的子view dispatchTouchEvent  </p>
<h3 id="onTouchEvent-事件消费-Activity-ViewGroup-View-主要处理点击事件"><a href="#onTouchEvent-事件消费-Activity-ViewGroup-View-主要处理点击事件" class="headerlink" title="onTouchEvent 事件消费(Activity ViewGroup View)  主要处理点击事件"></a>onTouchEvent 事件消费(Activity ViewGroup View)  主要处理点击事件</h3><p>如果返回false dispatchTouchEvent也返回false<br>在同一个View或者ViewGroup的事件处理中，OnTouchListener优先级最高，OnTouchEvent其次，OnClickListener最低。OnTouchListener返回true则OnTouchEvent以下皆不执行<br>OnTouchEvent 返回true 且 super.onTouchEvent(event)才执行OnClickListener方法.</p>
<h3 id="view的分发"><a href="#view的分发" class="headerlink" title="view的分发"></a>view的分发</h3><ol>
<li>不论 View 自身是否注册点击事件，只要 View 是可点击的就会消费事件。</li>
<li>事件是否被消费由返回值决定，true 表示消费，false 表示不消费，与是否使用了事件无关。<br>事件的调度顺序应该是 onTouchListener &gt; onTouchEvent &gt; onLongClickListener &gt; onClickListener。</li>
</ol>
<h3 id="VIewGroup的分发"><a href="#VIewGroup的分发" class="headerlink" title="VIewGroup的分发"></a>VIewGroup的分发</h3><p>1.判断自身是否需要(询问 onInterceptTouchEvent 是否拦截)，如果需要，调用自己的 onTouchEvent。<br>2.自身不需要或者不确定，则询问 ChildView ，一般来说是调用手指触摸位置的 ChildView。<br>3.如果子 ChildView 不需要则调用自身的 onTouchEvent。<br>4.ViewGroup 中可能有多个 ChildView，会把所有的 ChildView 遍历一遍，如果手指触摸的点在 ChildView 区域内就分发给这个View。<br>5.当 ChildView 重叠时，一般会分配给显示在最上面的 ChildView。<br>6.只有 View1 可点击时，事件将会分配给 View1，即使被 View2 遮挡，这一部分仍是 View1 的可点击区域。只有 View2 可点击时，事件将会分配给 View2。<br>View1 和 View2 均可点击时，事件会分配给后加载的 View2，View2 将事件消费掉，View1接收不到事件。<br>7.ViewGroup 和 ChildView 同时注册了事件监听器(onClick等)，事件优先给 ChildView，会被 ChildView消费掉，ViewGroup 不会响应。</p>
<h2 id="MotionEvent"><a href="#MotionEvent" class="headerlink" title="MotionEvent"></a>MotionEvent</h2><p>详细内容左转<br><a href="http://www.gcssloop.com/customview/motionevent" target="_blank" rel="external">http://www.gcssloop.com/customview/motionevent</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">TextView tvT = (TextView) findViewById(R.id.tv_t);</div><div class="line">tvT.setClickable(<span class="keyword">true</span>);</div><div class="line">       tvT.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View view, MotionEvent motionEvent)</span> </span>&#123;</div><div class="line">              <span class="comment">// motionEvent.getAction() 单点触控</span></div><div class="line"></div><div class="line">               <span class="keyword">switch</span> (motionEvent.getActionMasked())&#123;<span class="comment">//多点触控</span></div><div class="line">                   <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                       Log.e(<span class="string">"MotionEvent"</span>, <span class="string">"ACTION_DOWN "</span>);</div><div class="line">                       <span class="comment">// 手指按下</span></div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">                   <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                       Log.e(<span class="string">"MotionEvent"</span>, <span class="string">"ACTION_MOVE"</span>);</div><div class="line">                       <span class="comment">// 手指移动</span></div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">                   <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                       Log.e(<span class="string">"MotionEvent"</span>, <span class="string">"ACTION_UP"</span>);</div><div class="line">                       <span class="comment">// 手指抬起</span></div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">                   <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</div><div class="line">                       Log.e(<span class="string">"MotionEvent"</span>, <span class="string">"ACTION_CANCEL"</span>);</div><div class="line">                       <span class="comment">// 事件被拦截</span></div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">                   <span class="keyword">case</span> MotionEvent.ACTION_OUTSIDE:</div><div class="line">                       Log.e(<span class="string">"MotionEvent"</span>, <span class="string">"ACTION_OUTSIDE"</span>);</div><div class="line">                       <span class="comment">// 超出区域</span></div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">                   <span class="keyword">case</span> MotionEvent.ACTION_POINTER_DOWN:<span class="comment">//getActionMasked()才有</span></div><div class="line">                       Log.e(<span class="string">"MotionEvent"</span>, <span class="string">"ACTION_POINTER_DOWN"</span>);</div><div class="line">                       <span class="comment">// 有非主要的手指按下(即按下之前已经有手指在屏幕上)。</span></div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">                   <span class="keyword">case</span> MotionEvent.ACTION_POINTER_UP:<span class="comment">//getActionMasked()才有</span></div><div class="line">                       Log.e(<span class="string">"MotionEvent"</span>, <span class="string">"ACTION_POINTER_UP"</span>);</div><div class="line">                       <span class="comment">// 有非主要的手指按下(即按下之前已经有手指在屏幕上)。</span></div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure></p>
<h2 id="TouchSlop"><a href="#TouchSlop" class="headerlink" title="TouchSlop"></a>TouchSlop</h2><p>通过：ViewConfiguration.get(getContext()).getScaledTouchSlop() 获取系统的滑动常量来，判断此时是否属于滑动事件，TouchSlop在各家手机系统默认值是不同的。</p>
<h2 id="VelocityTracker"><a href="#VelocityTracker" class="headerlink" title="VelocityTracker"></a>VelocityTracker</h2><p>用于跟踪手指滑动的速度，包括x轴方向和y轴方向的速度。如快速滑动或者其他手势操作。<br>一般在MotionEvent.ACTION_DOWN初始化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VelocityTracker  velocityTracker = VelocityTracker.obtain();<span class="comment">//获取实例</span></div></pre></td></tr></table></figure></p>
<p>在 MotionEvent.ACTION_MOVE 追踪速度<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">velocityTracker.addMovement(event);<span class="comment">//当前的 移动事件传递给VelocityTracker对象</span></div><div class="line">velocityTracker.computeCurrentVelocity(<span class="number">1000</span>);<span class="comment">//多少毫秒滑动的像素数</span></div><div class="line">xVelocity = (<span class="keyword">int</span>) velocityTracker.getXVelocity();<span class="comment">//x像素</span></div><div class="line">yVelocity = (<span class="keyword">int</span>) velocityTracker.getYVelocity();<span class="comment">//y像素</span></div></pre></td></tr></table></figure></p>
<p>在 MotionEvent.ACTION_CANCEL 回收<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">velocityTracker.clear();</div><div class="line">velocityTracker.recycle();</div></pre></td></tr></table></figure></p>
<h2 id="GestureDetector"><a href="#GestureDetector" class="headerlink" title="GestureDetector"></a>GestureDetector</h2><p>用来处理双击、长按、快速滑动等手势<br>GestureDetector 使用时控件要setClickable(true)不然会不准确，具体原因不知道<br><img src="http://ww3.sinaimg.cn/large/87c01ec7gy1fox62kfvf0j20hr0i0dk3.jpg" alt=""></p>
<h3 id="OnGestureListener"><a href="#OnGestureListener" class="headerlink" title="OnGestureListener"></a>OnGestureListener</h3><p>比较快的点击松开会触发<br>onDown&gt;&gt;onSingleTapUp</p>
<p>普通速度稍微停留一点的点击松开会触发onDown&gt;&gt;onShowPress&gt;&gt;onSingleTapUp</p>
<p>长按会触发<br>onDown&gt;&gt;onShowPress&gt;&gt;onLongPress</p>
<p>普通滚动<br>onDown&gt;&gt;onShowPress&gt;&gt;onScroll(多个)</p>
<p>快速滚动<br>onDown&gt;&gt;onShowPress&gt;&gt;onScroll(多个)&gt;&gt;onFling</p>
<h3 id="OnDoubleTapListener"><a href="#OnDoubleTapListener" class="headerlink" title="OnDoubleTapListener"></a>OnDoubleTapListener</h3><p>点击<br>onSingleTapConfirmed</p>
<p>双击<br>发生一次双击<br>onDoubleTap&gt;&gt;onDoubleTapEvent(两个 这里代表点击次数)</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">TextView tvT = (TextView) findViewById(R.id.tv_t);</div><div class="line">tvT.setClickable(<span class="keyword">true</span>);</div><div class="line"><span class="keyword">final</span> GestureDetector gestureDetector =<span class="keyword">new</span> GestureDetector(<span class="keyword">this</span>, <span class="keyword">new</span> GestureDetector.OnGestureListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDown</span><span class="params">(MotionEvent motionEvent)</span> </span>&#123;</div><div class="line">       <span class="comment">// Log.e("手势检测", "轻触屏幕");</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onShowPress</span><span class="params">(MotionEvent motionEvent)</span> </span>&#123;</div><div class="line">       <span class="comment">// Log.e("手势检测", "轻触屏幕未松开");</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onSingleTapUp</span><span class="params">(MotionEvent motionEvent)</span> </span>&#123;</div><div class="line">      <span class="comment">//  Log.e("手势检测", "普通单击");</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScroll</span><span class="params">(MotionEvent motionEvent, MotionEvent motionEvent1, <span class="keyword">float</span> v, <span class="keyword">float</span> v1)</span> </span>&#123;</div><div class="line">        <span class="comment">//Log.e("手势检测", "普通滑动");</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLongPress</span><span class="params">(MotionEvent motionEvent)</span> </span>&#123;</div><div class="line">        <span class="comment">//Log.e("手势检测", "长按");</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onFling</span><span class="params">(MotionEvent motionEvent, MotionEvent motionEvent1, <span class="keyword">float</span> v, <span class="keyword">float</span> v1)</span> </span>&#123;</div><div class="line">        <span class="comment">//Log.e("手势检测", "快速滑动后松开");</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">gestureDetector.setOnDoubleTapListener(<span class="keyword">new</span> GestureDetector.OnDoubleTapListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onSingleTapConfirmed</span><span class="params">(MotionEvent motionEvent)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"手势检测"</span>, <span class="string">"严格的单击"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDoubleTap</span><span class="params">(MotionEvent motionEvent)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"手势检测"</span>, <span class="string">"双击"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDoubleTapEvent</span><span class="params">(MotionEvent motionEvent)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"手势检测"</span>, <span class="string">"发生双击行为"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">tvT.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View view, MotionEvent event)</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span>  gestureDetector.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Scroller"><a href="#Scroller" class="headerlink" title="Scroller"></a>Scroller</h2><pre><code>注意View中直接调用scrollBy滑动的是View的Content内容，对于Button，它的Content就是文本，ImageView就是drawable，也就是只能改变view内容的位置而不能改变view在布局的位置。
</code></pre><p>scrollTo(x,y)绝对滑动</p>
<p>scrollBy(x,y)根据当前位置叠加移动 可多次叠加</p>
<h2 id="postDelayed-view的定时器"><a href="#postDelayed-view的定时器" class="headerlink" title="postDelayed view的定时器"></a>postDelayed view的定时器</h2><p>例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">TextView tvT = (TextView) findViewById(R.id.tv_t);</div><div class="line"> tvT.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                tvT.setText(<span class="string">"变化前"</span>);</div><div class="line">                tvT.postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        tvT.setText(<span class="string">"变化后"</span>);<span class="comment">//三秒后执行</span></div><div class="line">                    &#125;</div><div class="line">                &#125;,<span class="number">3</span>*<span class="number">1000</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<h2 id="解决滑动冲突的思路"><a href="#解决滑动冲突的思路" class="headerlink" title="解决滑动冲突的思路"></a>解决滑动冲突的思路</h2><p>一般来说就是父容器和子容器or子view的冲突</p>
<h3 id="外部拦截（父容器负责拦截）"><a href="#外部拦截（父容器负责拦截）" class="headerlink" title="外部拦截（父容器负责拦截）"></a>外部拦截（父容器负责拦截）</h3><p>自定义控件继承父容器重写onInterceptTouchEvent()<br>根据需求决定是否拦截<br>假如子容器or子view 和父容器都需要响应事件的情况下（例如一个要响应向左右一个要响应上下）<br>那么父容器的 MotionEvent.ACTION_DOWN必须返回false 不然事件无法再传给子容器or子view</p>
<h3 id="内部拦截（子容器-子view负责拦截）"><a href="#内部拦截（子容器-子view负责拦截）" class="headerlink" title="内部拦截（子容器 子view负责拦截）"></a>内部拦截（子容器 子view负责拦截）</h3><p>阻止父层的View截获点击事件<br>自定义控件继承 子容器 子view重写dispatchTouchEvent()<br>根据需求决定是否拦截<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">		</div><div class="line">		....</div><div class="line">		getParent().requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);<span class="comment">//表示拦截</span></div><div class="line">		.....</div><div class="line">		</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>假如子容器or子view 和父容器都需要响应事件的情况下（例如一个要响应向左右一个要响应上下）<br>那么父容器的onInterceptTouchEvent()的 MotionEvent.ACTION_DOWN也必须返回false 不然事件无法再传给子容器or子view</p>
<h1 id="view的工作原理"><a href="#view的工作原理" class="headerlink" title="view的工作原理"></a>view的工作原理</h1><h1 id="自定义view流程"><a href="#自定义view流程" class="headerlink" title="自定义view流程"></a>自定义view流程</h1><p>getMeasuredWidth()获取的是view原始的大小，也就是这个view在XML文件中配置或者是代码中设置的大小。getWidth（）获取的是这个view最终显示的大小，这个大小有可能等于原始的大小也有可能不等于原始大小。</p>
<p>自定义view分为两种其中每一种有两个类型。<br>1.完全自定义的<br>继承 View<br>继承 ViewGroup<br>2.继承于特定的控件或者布局的<br>继承某个控件<br>继承某个布局</p>
<h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>在res 的values 新建attrs 或者attrs_xxxxxx 都可以<br>例子<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"CircleView"</span>&gt;</span><span class="comment">&lt;!--自定义属性集合CircleView--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"circle_color"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></div><div class="line">         <span class="comment">&lt;!--</span></div><div class="line">          属性定义时可以指定多种类型值</div><div class="line">          format= 类型有</div><div class="line">          reference：参考某一资源ID</div><div class="line">          color：颜色值</div><div class="line">          boolean：布尔值</div><div class="line">          dimension：尺寸值</div><div class="line">          float：浮点值</div><div class="line">          integer：整型值</div><div class="line">          string：字符串</div><div class="line">          fraction：百分数</div><div class="line">         --&gt;</div><div class="line">         <span class="comment">&lt;!--</span></div><div class="line">          enum：枚举值</div><div class="line">           &lt;attr name="orientation"&gt;</div><div class="line">                &lt;enum name="horizontal" value="0" /&gt;</div><div class="line">                &lt;enum name="vertical" value="1" /&gt;</div><div class="line">          &lt;/attr&gt;--&gt;</div><div class="line">         <span class="comment">&lt;!--</span></div><div class="line">         flag：位或运算</div><div class="line">        &lt;attr name="windowSoftInputMode"&gt;</div><div class="line">        &lt;flag name="stateUnspecified" value="0" /&gt;</div><div class="line">        &lt;flag name="stateUnchanged" value="1" /&gt;</div><div class="line">        &lt;flag name="stateHidden" value="2" /&gt;</div><div class="line">        &lt;flag name="stateAlwaysHidden" value="3" /&gt;</div><div class="line">        &lt;flag name="stateVisible" value="4" /&gt;</div><div class="line">        &lt;flag name="stateAlwaysVisible" value="5" /&gt;</div><div class="line">        &lt;flag name="adjustUnspecified" value="0x00" /&gt;</div><div class="line">        &lt;flag name="adjustResize" value="0x10" /&gt;</div><div class="line">        &lt;flag name="adjustPan" value="0x20" /&gt;</div><div class="line">        &lt;flag name="adjustNothing" value="0x30" /&gt;</div><div class="line">        &lt;/attr&gt;</div><div class="line">        使用 android:windowSoftInputMode="stateUnspecified | stateUnchanged　"</div><div class="line">         --&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>使用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">work.model.com.cczhrdraw.CircleView</span></span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"40dp"</span></div><div class="line">    <span class="attr">app:circle_color</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@color/colorAccent"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>拿数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);</div><div class="line">   mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);</div></pre></td></tr></table></figure></p>
<h3 id="自定义view"><a href="#自定义view" class="headerlink" title="自定义view"></a>自定义view</h3><p>例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mColor = Color.RED;</div><div class="line">    <span class="keyword">private</span> Paint mPaint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);</div><div class="line">        mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);</div><div class="line">        a.recycle();<span class="comment">//回收TypedArray</span></div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        mPaint.setColor(mColor);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        <span class="keyword">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);<span class="comment">//得到宽度的测量模式</span></div><div class="line">        <span class="keyword">int</span> widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);<span class="comment">//得到宽度的数值</span></div><div class="line">        <span class="keyword">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);<span class="comment">//得到长度的测量模式</span></div><div class="line">        <span class="keyword">int</span> heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);<span class="comment">//得到长度的数值</span></div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line">        测量模式：</div><div class="line">        UNSPECIFIED：不限制 match_parent</div><div class="line">        AT_MOST：限制上限 wrap_content</div><div class="line">        EXACTLY：限制固定值 手动自定义</div><div class="line">*/</div><div class="line">        <span class="keyword">if</span> (widthSpecMode == MeasureSpec.AT_MOST</div><div class="line">                &amp;&amp; heightSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class="line">            setMeasuredDimension(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (widthSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class="line">            setMeasuredDimension(<span class="number">200</span>, heightSpecSize);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (heightSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class="line">            setMeasuredDimension(widthSpecSize, <span class="number">200</span>);<span class="comment">//这里设的大小相当于Canvas大小</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> paddingLeft = getPaddingLeft();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> paddingRight = getPaddingRight();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> paddingTop = getPaddingTop();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> paddingBottom = getPaddingBottom();</div><div class="line">        <span class="keyword">int</span> width = getWidth() - paddingLeft - paddingRight;</div><div class="line">        <span class="keyword">int</span> height = getHeight() - paddingTop - paddingBottom;</div><div class="line">        <span class="keyword">int</span> radius = Math.min(width, height) / <span class="number">2</span>;</div><div class="line"></div><div class="line">        canvas.drawCircle(paddingLeft+ width / <span class="number">2</span>, paddingTop+ height / <span class="number">2</span>,radius, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java细节笔记]]></title>
      <url>https://bigbignews.club/2018/02/15/java%E7%BB%86%E8%8A%82%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p><img src="/2018/02/15/java细节笔记/java1.jpg" alt=""></p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p> 多态：所谓多态，就是父类型的引用可以指向子类型的对象，或者接口类型的引用可以指向实现该接口的类的实例。关于接口与实现接口的类之间的强制类型转换方式与父类和子类之间的强制类型转换方式完全一样。 </p>
<h2 id="一些关键字"><a href="#一些关键字" class="headerlink" title="一些关键字"></a>一些关键字</h2><h3 id="abstract-（抽象）"><a href="#abstract-（抽象）" class="headerlink" title="abstract （抽象）"></a>abstract （抽象）</h3><pre><code>abstract  可以修饰方法、类
</code></pre><p>1.抽象类不能实例化。<br>2.包含抽象方法的一定是抽象类，抽象类可以没有抽象方法。<br>3.父类是抽象类的抽象方法不能实现。<br>4.在子类继承父类（父类是个抽象类）的情况下，那么该子类必须要实现父类中所定义的所有抽象方法。否则，该子类需要声明为抽象类。</p>
<h3 id="static（静态）"><a href="#static（静态）" class="headerlink" title="static（静态）"></a>static（静态）</h3><pre><code>static  可以修饰属性、方法、内部类

无论一个类生成了多少个对象，所有这些对象共同使用唯 一一份静态的成员变量；
一个对象对该静态成员变量进行了修改，其他对象的该静态成员变量的值也会随之
发生变化。如果一个成员变量是 static 的，那么我们可以通过类名.成员变量名的方
式来使用它（推荐使用这种方式）。 
</code></pre><p>1.顶级类不能为静态类。<br>2.非静态内部类不能有静态方法，静态变量（顶级类可以）。<br>3.静态方法只能访问静态的变量和方法，非静态方法可以静态和非静态的变量和方法。<br>4.静态方法可以被继承，但是是不能重写的，只能“隐藏”，也就是静态方法是没有多态性的。<br><img src="/2018/02/15/java细节笔记/java2.png" alt=""></p>
<ol>
<li>静态代码块只会执行一次，是在类被加载的时候执行的，因为每个类只 会被加载一次，所以静态代码块也只会被执行一次；而构造方法则不然，每次生成一个对象的时候都会调用类的构造方法，所以 new 一次就会调用构造方法一次。<br><img src="/2018/02/15/java细节笔记/java3.jpg" alt=""><h3 id="final-（终态）"><a href="#final-（终态）" class="headerlink" title="final （终态）"></a>final （终态）</h3>final 可以修饰属性、方法、类。<br>1.final 类不能被继承。<br>2.final方法不能被重写。<br>3.final属性不能被改写，可以在声明的时候赋值，或者在构造方法里面赋值；</li>
</ol>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="访问方式"><a href="#访问方式" class="headerlink" title="访问方式"></a>访问方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</div><div class="line">     <span class="keyword">public</span> <span class="keyword">int</span> a;</div><div class="line">	 <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span>  <span class="title">MInner</span></span>&#123;</div><div class="line">	 	<span class="keyword">public</span> <span class="keyword">int</span> a;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">()</span></span>&#123;</div><div class="line">			Inner.<span class="keyword">this</span>.a=<span class="number">8</span>;</div><div class="line">			<span class="keyword">this</span>.a=<span class="number">8</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="静态内部类-（static-inner-class）"><a href="#静态内部类-（static-inner-class）" class="headerlink" title="静态内部类 （static inner class）"></a>静态内部类 （static inner class）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span>  <span class="title">MInner</span></span>&#123;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.只能访问外部类的静态成员变量与静态方法。<br>2.生成内部类方式为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Inner.MInner inner=<span class="keyword">new</span>  Inner.MInner();</div></pre></td></tr></table></figure></p>
<h3 id="成员内部类（member-inner-class）"><a href="#成员内部类（member-inner-class）" class="headerlink" title="成员内部类（member inner class）"></a>成员内部类（member inner class）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">MInner</span></span>&#123;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.可以访问外部类的静态和非静态的方法与成员变量。<br>2.生成内部类方式为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Inner.MInner inner=<span class="keyword">new</span>  Inner().new MInner();</div></pre></td></tr></table></figure></p>
<h3 id="局部内部类（Local-Inner-Class）"><a href="#局部内部类（Local-Inner-Class）" class="headerlink" title="局部内部类（Local Inner Class）"></a>局部内部类（Local Inner Class）</h3><p>1.定义在方法里面的类。<br>2.只能访问方法中声明的 final 类型的变量。<br>3.想要执行内部类的方法可以在顶级类的方法里面实例化并执行内部类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> getMyMInner&#123;</div><div class="line">		<span class="class"><span class="keyword">class</span>  <span class="title">MInner</span></span>&#123;</div><div class="line">		</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="匿名内部类-（Anonymous-Inner-Class）"><a href="#匿名内部类-（Anonymous-Inner-Class）" class="headerlink" title="匿名内部类 （Anonymous Inner Class）"></a>匿名内部类 （Anonymous Inner Class）</h3><p>1.匿名内部类会隐式地继承一个父类或实现一个接口。<br><img src="/2018/02/15/java细节笔记/java4.jpg" alt=""></p>
<p>或许会继续更新<br><img src="/2018/02/15/java细节笔记/face.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[电锯惊魂8]]></title>
      <url>https://bigbignews.club/2018/01/14/%E7%94%B5%E9%94%AF%E6%83%8A%E9%AD%828/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"http://cczhross.oss-cn-hangzhou.aliyuncs.com/1.mp4","pic":"http://cczhross.oss-cn-hangzhou.aliyuncs.com/1.jpg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[RecyclerView动态切换不同布局的方法]]></title>
      <url>https://bigbignews.club/2017/09/23/RecyclerView%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2%E4%B8%8D%E5%90%8C%E5%B8%83%E5%B1%80%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><div id="aplayer0" class="aplayer" style="margin-bottom: 20px;"></div>
		<script>
			new APlayer({
				element: document.getElementById("aplayer0"),
				narrow: false,
				autoplay: false,
				showlrc: 0,
				music: {
					title: "Plastic Love",
					author: "TARA",
					url: "https://cczhr.github.io/2017/09/23/RecyclerView动态切换不同布局的方法/cd.mp3",
					pic: "https://cczhr.github.io/2017/09/23/RecyclerView动态切换不同布局的方法/cd.jpg",
				}
			});
		</script>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>看懂这个教程首先要对RecyclerView有所认识，可以查看之前写的笔记。<br><a href="http://bignews.me/2017/07/31/%E4%B8%80%E4%BA%9Bandroid%E7%AC%94%E8%AE%B0/#RecyclerView" target="_blank" rel="external">RecyclerView笔记</a></p>
<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="/2017/09/23/RecyclerView动态切换不同布局的方法/r3.gif" alt=""></p>
<p>静态图<br><img src="/2017/09/23/RecyclerView动态切换不同布局的方法/r1.jpg" alt=""></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>要实现这种效果，我们可以仔细分析一下界面，从颜色分类可以发现总共可以分成两类，蓝色和粉色的，而粉色的又可以分成两类，一种是一行有四个，而一种是一行占两个，而这种很明显需要网格布局来实现。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>画布局<br>布局一 item1.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_item1"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/09/23/RecyclerView动态切换不同布局的方法/b1.jpg" alt=""><br>布局二 item2.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_item2"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@color/colorAccent"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/09/23/RecyclerView动态切换不同布局的方法/b2.jpg" alt=""></p>
<p>java文件<br>适配器<br>MainAdapter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">//类型标记</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_1 = <span class="number">0xff01</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_2 = <span class="number">0xff02</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;<span class="comment">//切换布局</span></div><div class="line">        <span class="keyword">switch</span> (viewType)&#123;</div><div class="line">            <span class="keyword">case</span> TYPE_1:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Item1Holder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item1,parent,<span class="keyword">false</span>));</div><div class="line">            <span class="keyword">case</span> TYPE_2:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Item2Holder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item2,parent,<span class="keyword">false</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;<span class="comment">//绑定控件</span></div><div class="line">        <span class="keyword">if</span> (holder <span class="keyword">instanceof</span> Item1Holder) &#123;</div><div class="line">            bindItem1Holder((Item1Holder)holder,position);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(holder <span class="keyword">instanceof</span>  Item2Holder)&#123;</div><div class="line">            bindItem2Holder((Item2Holder)holder,position);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttachedToRecyclerView</span><span class="params">(RecyclerView recyclerView)</span> </span>&#123;<span class="comment">//获取当前的RecyclerView</span></div><div class="line">        <span class="keyword">super</span>.onAttachedToRecyclerView(recyclerView);</div><div class="line">        RecyclerView.LayoutManager manager = recyclerView.getLayoutManager();<span class="comment">//获取所布置的布局管理器</span></div><div class="line">        <span class="keyword">if</span> (manager <span class="keyword">instanceof</span> GridLayoutManager) &#123;</div><div class="line">            <span class="keyword">final</span> GridLayoutManager gridManager = ((GridLayoutManager) manager);</div><div class="line">            gridManager.setSpanSizeLookup(<span class="keyword">new</span> GridLayoutManager.SpanSizeLookup() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSpanSize</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;<span class="comment">//切换占的格数</span></div><div class="line">                    <span class="keyword">if</span> (position == <span class="number">0</span>||position%<span class="number">7</span>==<span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">return</span> <span class="number">4</span>;</div><div class="line">                    &#125;  <span class="keyword">else</span> <span class="keyword">if</span>(position==<span class="number">1</span>||position==<span class="number">2</span>||position==<span class="number">3</span>||position==<span class="number">4</span></div><div class="line">                            ||position%<span class="number">7</span>==<span class="number">1</span>||position%<span class="number">7</span>==<span class="number">2</span>||position%<span class="number">7</span>==<span class="number">3</span>||position%<span class="number">7</span>==<span class="number">4</span>)&#123;</div><div class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;<span class="comment">//控件总数量</span></div><div class="line">        <span class="keyword">return</span> <span class="number">60</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (position == <span class="number">0</span>||position%<span class="number">7</span>==<span class="number">0</span>) &#123;<span class="comment">//返回类型</span></div><div class="line">            <span class="keyword">return</span> TYPE_1;</div><div class="line">        &#125;  <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> TYPE_2;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bindItem2Holder</span><span class="params">(Item2Holder holder,<span class="keyword">int</span> position)</span></span>&#123;<span class="comment">//控件处理的地方</span></div><div class="line">        <span class="keyword">if</span>(position==<span class="number">1</span>||position==<span class="number">2</span>||position==<span class="number">3</span>||position==<span class="number">4</span></div><div class="line">                ||position%<span class="number">7</span>==<span class="number">1</span>||position%<span class="number">7</span>==<span class="number">2</span>||position%<span class="number">7</span>==<span class="number">3</span>||position%<span class="number">7</span>==<span class="number">4</span>)&#123;</div><div class="line">           holder.tvItem2.setText(<span class="string">"界面2"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            holder.tvItem2.setText(<span class="string">"界面3"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bindItem1Holder</span><span class="params">(Item1Holder holder,<span class="keyword">int</span> position)</span></span>&#123;</div><div class="line">        holder.tvItem1.setText(<span class="string">"界面1"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item1Holder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;<span class="comment">//设置控件</span></div><div class="line">        <span class="keyword">private</span> TextView tvItem1;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Item1Holder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            tvItem1 = (TextView) itemView.findViewById(R.id.tv_item1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item2Holder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> TextView tvItem2;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Item2Holder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            tvItem2 = (TextView) itemView.findViewById(R.id.tv_item2);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (position == <span class="number">0</span>||position%<span class="number">7</span>==<span class="number">0</span>) &#123;<span class="comment">//返回类型</span></div><div class="line">           <span class="keyword">return</span> TYPE_1;</div><div class="line">       &#125;  <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">return</span> TYPE_2;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">.......</div><div class="line">.......</div><div class="line"> <span class="keyword">if</span> (position == <span class="number">0</span>||position%<span class="number">7</span>==<span class="number">0</span>) &#123;</div><div class="line">                       <span class="keyword">return</span> <span class="number">4</span>;</div><div class="line">                   &#125;  <span class="keyword">else</span> <span class="keyword">if</span>(position==<span class="number">1</span>||position==<span class="number">2</span>||position==<span class="number">3</span>||position==<span class="number">4</span></div><div class="line">                           ||position%<span class="number">7</span>==<span class="number">1</span>||position%<span class="number">7</span>==<span class="number">2</span>||position%<span class="number">7</span>==<span class="number">3</span>||position%<span class="number">7</span>==<span class="number">4</span>)&#123;</div><div class="line">                       <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">                   &#125;</div></pre></td></tr></table></figure></p>
<p><img src="/2017/09/23/RecyclerView动态切换不同布局的方法/r2.jpg" alt=""><br>是利用不同的个数设定返回的布局类型以及根据不同的个数设定的占的格数，根据规律利用一点数学知识实现，实际开发应该设定标记位</p>
<p>MainActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</div><div class="line">    <span class="keyword">private</span> MainAdapter mMainAdapter;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mMainAdapter=<span class="keyword">new</span> MainAdapter();</div><div class="line">        mRecyclerView = (RecyclerView) findViewById(R.id.recycler_view);</div><div class="line">        mRecyclerView.setLayoutManager(<span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>,<span class="number">4</span>));<span class="comment">//设置一行有四格的网格布局</span></div><div class="line">        mRecyclerView.setAdapter(mMainAdapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Done！</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Toolbar的玩法(伪)]]></title>
      <url>https://bigbignews.club/2017/08/12/Toolbar%E7%9A%84%E7%8E%A9%E6%B3%95-%E4%BC%AA/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h2><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><pre><code>android.support.v4.widget.NestedScrollView
android.support.v7.widget.RecyclerView
在MD中，RecyclerView代替了ListView，而NestedScrollView代替了ScrollView
</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>首先把默认带的ActionBar取消<br>其中 Theme.AppCompat.NoActionBar表示深色主题，它会将界面的主体颜色设成深色，陪衬颜色设成淡色。而 Theme.AppCompat.Light.NoActionBar 表示淡色主题，它会将界面的主体颜色设成淡色，陪衬颜色设成深色。<br>styles.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"> </span></div><div class="line">	<span class="comment">&lt;!--Theme.AppCompat.Light.DarkActionBar--&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>styles.xml的更多参数参考此图<br><img src="/2017/08/12/Toolbar的玩法-伪/t1.jpg" alt=""></p>
<h4 id="放进布局文件"><a href="#放进布局文件" class="headerlink" title="放进布局文件"></a>放进布局文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line"><span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line"><span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line"><span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line"><span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></div><div class="line"><span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里使用 xmlns:app 指定了一个新的命名空间。思考一下，正是由于每个布局文件都<br>会使用 xmlns:android 来指定一个命名空间，因此我们才能一直使用 android:id  android:<br>layout_width 等写法，那么这里指定了 xmlns:app ，也就是说现在可以使用 app:attribute<br>这样的写法了。但是为什么这里要指定一个 xmlns:app 的命名空间呢？这是由于 Material Design是在 Android 5.0系统中才出现的，而很多的 Material属性在 5.0之前的系统中并不存在，那么为了能够兼容之前的老系统，我们就不能使用 android:attribute 这样的写法了，而是应该使用app:attribute 。<br>android:theme 是 toolbar标题的主题，默认和styles.xml指定的相同(深色主题字体为白，浅色为黑)<br>app:popupTheme 属性单独将弹出的菜单项指定成了淡色主题，默认和android:theme的相反。(深色主题黑底白字，浅色白底黑字)</p>
<h4 id="添加按钮和菜单"><a href="#添加按钮和菜单" class="headerlink" title="添加按钮和菜单"></a>添加按钮和菜单</h4><p>右击 res目录→New→Directory，创建一个 menu文件夹。然后右击<br>menu文件夹→New→Menu resource file，创建一个 toolbar.xml文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">      <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/backup"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_backup"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"Backup"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"always"</span> /&gt;</div><div class="line">		<span class="comment">&lt;!--always表示永远显</span></div><div class="line">示在 Toolbar中，如果屏幕空间不够则不显示；ifRoom表示屏幕空间足够的情况下显示在 Toolbar</div><div class="line">中，不够的话就显示在菜单当中；never 则表示永远显示在菜单当中。注意，Toolbar 中的 action</div><div class="line">按钮只会显示图标，菜单中的 action按钮只会显示文字。--&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/settings"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"Settings1"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/settings2"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"Settings2"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="在java文件使用"><a href="#在java文件使用" class="headerlink" title="在java文件使用"></a>在java文件使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        getMenuInflater().inflate(R.menu.toolbar, menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;<span class="comment">//加载菜单文件</span></div><div class="line"><span class="comment">//设置按钮监听</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">	<span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">		<span class="keyword">case</span> R.id.xxx:</div><div class="line">		<span class="comment">//dosomething</span></div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	   <span class="keyword">default</span>:</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">setContentView(R.layout.activity_main);</div><div class="line">Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">setSupportActionBar(toolbar);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="带伸缩的toolbar"><a href="#带伸缩的toolbar" class="headerlink" title="带伸缩的toolbar"></a>带伸缩的toolbar</h3><p>效果<br><img src="/2017/08/12/Toolbar的玩法-伪/tt1.gif" alt=""><br>需要AppBarLayout套着Toolbar，然后CoordinatorLayout套着AppBarLayout以及要滑动的布局，在被滑动的布局写上 。</p>
<pre><code>app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;
</code></pre><p>这里的app:layout_scrollFlags值指定成了scroll|enterAlways|snap 。其中， scroll 表示当 RecyclerView 向上滚动的时候，Toolbar 会跟着一起向上滚动并实现隐藏； enterAlways 表示当 RecyclerView向下滚动的时候，Toolbar会跟着一起向下滚动并重新显示。 snap 表示当 Toolbar还没有完全隐藏或显示的时候，会根据当前滚动的距离，自动选择是隐藏还是显示。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/main"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.app.cczhr.recyclerviewdemo.MainActivity"</span>&gt;</div><div class="line">    <span class="comment">&lt;!--&lt;include layout="@layout/activity_toolbar" /&gt;--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></div><div class="line">        <span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span></div><div class="line">        <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways|snap"</span> /&gt;</div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span>--&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.widget.SwipeRefreshLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/swipe_refresh"</span></div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        &gt;</div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/recycler_view"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.widget.SwipeRefreshLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="可折叠式toolbar"><a href="#可折叠式toolbar" class="headerlink" title="可折叠式toolbar"></a>可折叠式toolbar</h3><pre><code>注意：都没在android4.4做过测试...
</code></pre><h4 id="知识背景"><a href="#知识背景" class="headerlink" title="知识背景"></a>知识背景</h4><p>需要三层嵌套..</p>
<h5 id="CoordinatorLayout"><a href="#CoordinatorLayout" class="headerlink" title="CoordinatorLayout"></a>CoordinatorLayout</h5><p>我们通常把CoordinatorLayout作为顶层布局来协调其子布局之间的动画效果。</p>
<h5 id="AppBarLayout"><a href="#AppBarLayout" class="headerlink" title="AppBarLayout"></a>AppBarLayout</h5><p>AppBarLayout继承自LinearLayout，布局方向为垂直方向。所以可以把它当成垂直布局的LinearLayout来使用。当CoordinatorLayout发生滚动手势的时候，AppBarLayout的子View通过在布局中设置app:layout_scrollFlags属性，来发生相应的滚动。<br>app:layout_scrollFlags属性的具体参数<br><img src="/2017/08/12/Toolbar的玩法-伪/coo1.jpg" alt=""></p>
<h5 id="CollapsingToolbarLayout"><a href="#CollapsingToolbarLayout" class="headerlink" title="CollapsingToolbarLayout"></a>CollapsingToolbarLayout</h5><p>app:collapsedTitleTextAppearance  展开时Title文字外形设置 如:”app:expandedTitleTextAppearance=”@style/expandedTitle””<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"expandedTitle"</span>&gt;</span><span class="xml"></span></div><div class="line">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/black<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>15sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>app:collapsedTitleGravity  展开时的标题如何放置<br>app:contentScrim 标题文字停留在顶部时候背景的设置 如:”app:contentScrim=”?attr/colorPrimary””</p>
<p>app:expandedTitleMarginStart 展开时title向左填充的距离<br>app:expandedTitleMarginEnd 展开时title向右填充的距离<br>app:expandedTitleMarginTop展开时title向上填充的距离<br>app:expandedTitleMarginBottom展开时title向下填充的距离</p>
<p>CollapsingToolbarLayout的子布局有3种折叠模式<br>（Toolbar以及展开的界面中设置的app:layout_collapseMode）<br>off：这个是默认属性，布局将正常显示，没有折叠的行为。<br>pin：CollapsingToolbarLayout折叠后，此布局将固定在顶部。<br>parallax：CollapsingToolbarLayout折叠时，此布局也会有视差折叠效果。<br>当设置了parallax模式时，我们还可以通过app:layout_collapseParallaxMultiplier设置视差滚动因子，值为：0~1。</p>
<p>效果<br><img src="/2017/08/12/Toolbar的玩法-伪/co1.gif" alt=""></p>
<h4 id="设置状态栏透明"><a href="#设置状态栏透明" class="headerlink" title="设置状态栏透明"></a>设置状态栏透明</h4><p>在相对应的styles.xml 加上一句</p>
<pre><code>&lt;item name=&quot;android:windowTranslucentStatus&quot;&gt; true &lt;/item&gt;
</code></pre><h4 id="设置折叠toolbar"><a href="#设置折叠toolbar" class="headerlink" title="设置折叠toolbar"></a>设置折叠toolbar</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/main"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.app.cczhr.recyclerviewdemo.MainActivity"</span>&gt;</div><div class="line">    <span class="comment">&lt;!--&lt;include layout="@layout/activity_toolbar" /&gt;--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/appbar"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"250dp"</span>&gt;</div><div class="line">            <span class="comment">&lt;!-- android:fitsSystemWindows="true"--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/collapsing_toolbar"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></div><div class="line">                <span class="attr">app:contentScrim</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">                <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span>&gt;</div><div class="line">                <span class="comment">&lt;!-- app:expandedTitleMarginBottom="100dp"--&gt;</span></div><div class="line">                <span class="comment">&lt;!--android:layout_height="?attr/actionBarSize"--&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">                    <span class="attr">android:background</span>=<span class="string">"@drawable/bg"</span></div><div class="line">                    <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">                    <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span></div><div class="line">                    <span class="attr">app:layout_collapseParallaxMultiplier</span>=<span class="string">"0.7"</span>&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line"></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                    <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span> /&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span>--&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v4.widget.SwipeRefreshLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/swipe_refresh"</span></div><div class="line">            <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            &gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/recycler_view"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.v4.widget.SwipeRefreshLayout</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="加多个-FloatingActionButton"><a href="#加多个-FloatingActionButton" class="headerlink" title="加多个 FloatingActionButton"></a>加多个 FloatingActionButton</h4><p>FloatingActionButton的app:layout_anchor要设为AppBarLayout的id<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">		  <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/appbar"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"250dp"</span>&gt;</div><div class="line">		......</div><div class="line">		.....</div><div class="line">		......</div><div class="line">		<span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@android:drawable/ic_dialog_email"</span></div><div class="line">            <span class="attr">app:layout_anchor</span>=<span class="string">"@id/appbar"</span></div><div class="line">            <span class="attr">app:layout_anchorGravity</span>=<span class="string">"bottom|end"</span></div><div class="line">            /&gt;</div><div class="line">		</div><div class="line">   <span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 布局复习]]></title>
      <url>https://bigbignews.club/2017/08/09/Android-%E5%B8%83%E5%B1%80%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="一些知识"><a href="#一些知识" class="headerlink" title="一些知识"></a>一些知识</h2><p>android:gravity是对元素本身，本身的文本显示在什么地方靠着换个属性设置。<br>android:layout_gravity是相对与它的父元素说的，说明元素显示在父元素的什么位置。<br><img src="/2017/08/09/Android-布局复习/g1.jpg" alt=""><br>android:padding是布局部件的内间距。<br>Android:layout_margin是布局部件的外间距。<br><img src="/2017/08/09/Android-布局复习/g2.jpg" alt=""></p>
<h2 id="LinearLayout-线性布局"><a href="#LinearLayout-线性布局" class="headerlink" title="LinearLayout(线性布局)"></a>LinearLayout(线性布局)</h2><p>排列方式</p>
<pre><code>android:orientation=&quot;horizontal&quot;    android:orientation=&quot;vertical&quot;
</code></pre><h3 id="android-layout-gravity"><a href="#android-layout-gravity" class="headerlink" title="android:layout_gravity"></a>android:layout_gravity</h3><p>注意<br>排列方向为水平(horizontal)的时候只能调节垂直方向的排列方向<br><img src="/2017/08/09/Android-布局复习/l2.jpg" alt=""><br>排列方向为垂直(vertical)的时候只能调节水平方向的排列方向<br><img src="/2017/08/09/Android-布局复习/l1.jpg" alt=""><br>一些参数<br><img src="/2017/08/09/Android-布局复习/l3.jpg" alt=""></p>
<h3 id="android-layout-weight"><a href="#android-layout-weight" class="headerlink" title="android:layout_weight"></a>android:layout_weight</h3><p> 这个属性是用比例的方式来指定控件的大小<br> 原理<br> 系统会先把 LinearLayout下所有控件指定的 layout_weight 值相加，得到一个总值，然后每个控件所占大小的比例就是用该控件的 layout_weight 值除以刚才算出的总值。</p>
<p> 原则上使用它就要把相对应的 layout_height 或者layout_width调为0dp</p>
<h2 id="RelativeLayout-相对布局"><a href="#RelativeLayout-相对布局" class="headerlink" title="RelativeLayout(相对布局)"></a>RelativeLayout(相对布局)</h2><h3 id="相对于父布局的对齐方式"><a href="#相对于父布局的对齐方式" class="headerlink" title="相对于父布局的对齐方式"></a>相对于父布局的对齐方式</h3><p> android:layout_alignParentLeft=”true” (对齐父布局的左边)<br>android:layout_alignParentTop (对齐父布局的顶部)<br>android:layout_alignParentRight (对齐父布局的右边)<br>android:layout_alignParentBottom (对齐父布局的底部)<br>android:layout_centerInParent(对齐父布局的中间)<br><img src="/2017/08/09/Android-布局复习/r1.jpg" alt=""></p>
<h3 id="相对于控件的对齐方式"><a href="#相对于控件的对齐方式" class="headerlink" title="相对于控件的对齐方式"></a>相对于控件的对齐方式</h3><p>  android:layout_above=”@id/button3”(在指定的控件的上方)<br>  android:layout_below(在指定的控件的下方)<br>  android:layout_toRightOf(在指定的控件的右边)<br>  android:layout_toLeftOf(在指定的控件的左边)<br>  android:layout_alignLeft(表示让一个控件的左边缘和另一个控件的左边缘对齐)<br>  android:layout_alignRight (表示让一个控件的右边缘和另一个控件的右边缘对齐)<br>  android:layout_alignTop (表示让一个控件的上边缘和另一个控件的上边缘对齐)<br>  android:layout_alignBottom (表示让一个控件的下边缘和另一个控件的下边缘对齐)<br>  <img src="/2017/08/09/Android-布局复习/r2.jpg" alt=""></p>
<h2 id="FrameLayout-帧布局"><a href="#FrameLayout-帧布局" class="headerlink" title="FrameLayout(帧布局)"></a>FrameLayout(帧布局)</h2><p> 主要是所有的控件都会默认摆放在布局的左上角<br> 前景图像:永远处于帧布局最上面,直接面对用户的图像,就是不会被覆盖的图片<br>android:foreground=”@drawable/logo”设置前景图像的图片android:foregroundGravity=”right|bottom”设置前景图像的位置</p>
<h2 id="GridLayout-网格布局"><a href="#GridLayout-网格布局" class="headerlink" title="GridLayout(网格布局)"></a>GridLayout(网格布局)</h2><p> android:rowCount=”5” 总行数<br> android:columnCount=”4” 总列数<br> android:layout_columnSpan=”2” 扩展两列<br> android:layout_rowSpan=”2” 扩展两行<br> android:layout_gravity=”fill”填充满<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">GridLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"horizonal"</span></div><div class="line">            <span class="attr">android:rowCount</span>=<span class="string">"5"</span></div><div class="line">            <span class="attr">android:columnCount</span>=<span class="string">"4"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button11"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_columnSpan</span>=<span class="string">"2"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"fill"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button10"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button9"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button8"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button7"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button6"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_rowSpan</span>=<span class="string">"2"</span> </div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"fill"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button5"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">GridLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/08/09/Android-布局复习/gr1.jpg" alt=""></p>
<h2 id="PercentFrameLayout-百分比布局"><a href="#PercentFrameLayout-百分比布局" class="headerlink" title="PercentFrameLayout (百分比布局)"></a>PercentFrameLayout (百分比布局)</h2><p>需要配置</p>
<pre><code>compile &apos;com.android.support:percent:25.3.1&apos;
</code></pre><p>所有的控件和帧布局一样默认都是摆放在布局的左上角<br>宽高的指定<br>app:layout_widthPercent=”50%”<br>app:layout_heightPercent=”50%”</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.percent.PercentFrameLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button1"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button 1"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"left|top"</span></div><div class="line">        <span class="attr">app:layout_widthPercent</span>=<span class="string">"50%"</span></div><div class="line">        <span class="attr">app:layout_heightPercent</span>=<span class="string">"50%"</span></div><div class="line">    /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button2"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button 2"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"right|top"</span></div><div class="line">        <span class="attr">app:layout_widthPercent</span>=<span class="string">"50%"</span></div><div class="line">        <span class="attr">app:layout_heightPercent</span>=<span class="string">"50%"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button3"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button 3"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"left|bottom"</span></div><div class="line">        <span class="attr">app:layout_widthPercent</span>=<span class="string">"50%"</span></div><div class="line">        <span class="attr">app:layout_heightPercent</span>=<span class="string">"50%"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button4"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button 4"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"right|bottom"</span></div><div class="line">        <span class="attr">app:layout_widthPercent</span>=<span class="string">"50%"</span></div><div class="line">        <span class="attr">app:layout_heightPercent</span>=<span class="string">"50%"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.percent.PercentFrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="ConstraintLayout-约束布局"><a href="#ConstraintLayout-约束布局" class="headerlink" title="ConstraintLayout(约束布局)"></a>ConstraintLayout(约束布局)</h2><p>配置</p>
<pre><code>compile &apos;com.android.support.constraint:constraint-layout:1.0.0-beta4&apos;
</code></pre><p>主要用鼠标拖动的布局<br><a href="http://www.jianshu.com/p/a8b49ff64cd3" target="_blank" rel="external">http://www.jianshu.com/p/a8b49ff64cd3</a><br>简单演示下<br><img src="/2017/08/09/Android-布局复习/c.gif" alt=""></p>
<h2 id="FlexboxLayout"><a href="#FlexboxLayout" class="headerlink" title="FlexboxLayout"></a>FlexboxLayout</h2><p><a href="https://github.com/google/flexbox-layout" target="_blank" rel="external">https://github.com/google/flexbox-layout</a><br>配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    implementation <span class="string">'com.google.android:flexbox:1.0.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="自定义布局"><a href="#自定义布局" class="headerlink" title="自定义布局"></a>自定义布局</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</div><div class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/title"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Android布局 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android动画笔记]]></title>
      <url>https://bigbignews.club/2017/08/04/Android%E5%8A%A8%E7%94%BB%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="视图动画"><a href="#视图动画" class="headerlink" title="视图动画"></a>视图动画</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">/透明度动画</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">btnAlpha</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        AlphaAnimation aa = <span class="keyword">new</span> AlphaAnimation(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line">        aa.setDuration(<span class="number">1000</span>);<span class="comment">//播放时长</span></div><div class="line">        view.startAnimation(aa);</div><div class="line">    &#125;</div><div class="line">  <span class="comment">//旋转动画</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">btnRotate</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        RotateAnimation ra = <span class="keyword">new</span> RotateAnimation(<span class="number">0</span>, <span class="number">360</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">		<span class="comment">//旋转的开始角度，旋转的结束角度，x坐标，y坐标，(0,0)在左上角</span></div><div class="line">        ra.setDuration(<span class="number">1000</span>);</div><div class="line">        view.startAnimation(ra);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">btnRotateSelf</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        RotateAnimation ra = <span class="keyword">new</span> RotateAnimation(<span class="number">0</span>, <span class="number">360</span>,</div><div class="line">                RotateAnimation.RELATIVE_TO_SELF, <span class="number">0.5F</span>,</div><div class="line">                RotateAnimation.RELATIVE_TO_SELF, <span class="number">0.5F</span>);<span class="comment">//0.5F代表偏移值</span></div><div class="line">        ra.setDuration(<span class="number">1000</span>);</div><div class="line">        view.startAnimation(ra);</div><div class="line">    &#125;</div><div class="line"><span class="comment">//位移动画</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">btnTranslate</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        TranslateAnimation ta = <span class="keyword">new</span> TranslateAnimation(<span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span>, <span class="number">300</span>);<span class="comment">//这里意思是从(0,0)位移到(200,300)</span></div><div class="line">        ta.setDuration(<span class="number">1000</span>);</div><div class="line">        view.startAnimation(ta);</div><div class="line">    &#125;</div><div class="line"><span class="comment">//缩放动画</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">btnScale</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        ScaleAnimation sa = <span class="keyword">new</span> ScaleAnimation(<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>);<span class="comment">//这里意思是从(0,0)拉伸到(2，2)</span></div><div class="line">        sa.setDuration(<span class="number">1000</span>);</div><div class="line">        view.startAnimation(sa);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">btnScaleSelf</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        ScaleAnimation sa = <span class="keyword">new</span> ScaleAnimation(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>,</div><div class="line">                Animation.RELATIVE_TO_SELF, <span class="number">0.5F</span>,</div><div class="line">                Animation.RELATIVE_TO_SELF, <span class="number">0.5F</span>);</div><div class="line">        sa.setDuration(<span class="number">1000</span>);</div><div class="line">        view.startAnimation(sa);</div><div class="line">    &#125;</div><div class="line"><span class="comment">//多个动画合并</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">btnSet</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        AnimationSet as = <span class="keyword">new</span> AnimationSet(<span class="keyword">true</span>);</div><div class="line">        as.setDuration(<span class="number">1000</span>);</div><div class="line"></div><div class="line">        AlphaAnimation aa = <span class="keyword">new</span> AlphaAnimation(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line">        aa.setDuration(<span class="number">1000</span>);</div><div class="line">        as.addAnimation(aa);</div><div class="line"></div><div class="line">        TranslateAnimation ta = <span class="keyword">new</span> TranslateAnimation(<span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">200</span>);</div><div class="line">        ta.setDuration(<span class="number">1000</span>);</div><div class="line">        as.addAnimation(ta);</div><div class="line"></div><div class="line">        view.startAnimation(as);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>相对于的监听<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">btnAlpha</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">      AlphaAnimation aa = <span class="keyword">new</span> AlphaAnimation(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line">      aa.setDuration(<span class="number">1000</span>);<span class="comment">//播放时长</span></div><div class="line">      aa.setAnimationListener(<span class="keyword">new</span> Animation.AnimationListener() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animation animation)</span> </span>&#123;</div><div class="line">              Log.e(<span class="string">"动画"</span>, <span class="string">"开始"</span> );</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animation animation)</span> </span>&#123;</div><div class="line">              Log.e(<span class="string">"动画"</span>, <span class="string">"结束"</span> );</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animation animation)</span> </span>&#123;</div><div class="line">              Log.e(<span class="string">"动画"</span>, <span class="string">"重复"</span> );</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line">      view.startAnimation(aa);</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h2 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h2>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一些android笔记]]></title>
      <url>https://bigbignews.club/2017/07/31/%E4%B8%80%E4%BA%9Bandroid%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="CardView"><a href="#CardView" class="headerlink" title="CardView"></a>CardView</h2><p>需要的依赖，不过貌似可以alt+enter自动导入。</p>
<pre><code>compile &apos;com.android.support:cardview-v7:25.3.1&apos;

记得是 xmlns:card_view=&quot;http://schemas.android.com/apk/res-auto&quot;，
而不是  xmlns:card_view=&quot;http://schemas.android.com/tools&quot;，不然没效果。
</code></pre><p>android:focusable=”true”代表可以获取焦点，<br>android:clickable=”true”代表可以被点击，<br>android:foreground=”?android:attr/selectableItemBackground”代表前景色，这里是添加点击水波纹效果，<br>card_view:cardPreventCornerOverlap=”true”代表将CardView里边的元素单独做圆角处理，<br>card_view:cardUseCompatPadding=”true”设置内边距，<br>card_view:contentPadding=”8dp”边界距离内部的距离，<br> card_view:cardElevation=”8dp”添加卡片阴影</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">xmlns:card_view</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.CardView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/card_stories"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></div><div class="line">    <span class="attr">android:clickable</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:focusable</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:foreground</span>=<span class="string">"?android:attr/selectableItemBackground"</span></div><div class="line">    <span class="attr">card_view:cardElevation</span>=<span class="string">"3dp"</span></div><div class="line">    <span class="attr">card_view:cardPreventCornerOverlap</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">card_view:cardUseCompatPadding</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">card_view:contentPadding</span>=<span class="string">"8dp"</span>&gt;</div><div class="line">       <span class="comment">&lt;!--里面可以放各种东西</span></div><div class="line">	   .......</div><div class="line">	   .......</div><div class="line">	   ......</div><div class="line">	   --&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v7.widget.CardView</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果<br><img src="/2017/07/31/一些android笔记/c1.jpg" alt=""></p>
<h2 id="Snackbar"><a href="#Snackbar" class="headerlink" title="Snackbar"></a>Snackbar</h2><p>需要的依赖</p>
<pre><code>compile &apos;com.android.support:design:25.3.1&apos;
</code></pre><p>简单使用，和Toast不一样Snackbar传的是view<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Snackbar snackbar = Snackbar.make(view,<span class="string">"消息已发出"</span>,Snackbar.LENGTH_SHORT);</div><div class="line">            <span class="comment">//添加点击事件</span></div><div class="line">             <span class="comment">/* snackbar .setAction("添加了点击我", new View.OnClickListener() &#123;</span></div><div class="line">                  @Override</div><div class="line">                  public void onClick(View view) &#123;</div><div class="line">                  &#125;</div><div class="line">              &#125;);*/</div><div class="line">             <span class="comment">//  View mView = snackbar.getView();</span></div><div class="line">             <span class="comment">// snackbar.setActionTextColor(Color.BLUE); 点击字体颜色</span></div><div class="line">             <span class="comment">// mView.setBackgroundColor(Color.GRAY);设置背景颜色</span></div><div class="line">              snackbar.show();</div></pre></td></tr></table></figure></p>
<p>效果<br><img src="/2017/07/31/一些android笔记/s1.jpg" alt=""><br><img src="/2017/07/31/一些android笔记/s2.jpg" alt=""></p>
<h2 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h2><p>配置</p>
<pre><code>注意：如果使用瀑布流布局，那么宽度应该是根据布局的列数来自动适配的，
而不是一个固定值。另外可以使用了layout_margin 属性来让子项之间互留一点间距，
这样就不至于所有子项都紧贴在一些。android:padding和android:margin的区别
一个是容器内间距，一个是容器外间距。
</code></pre><p>在需要的布局xml加上即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">          <span class="attr">android:id</span>=<span class="string">"@+id/recycler_view"</span></div><div class="line">          <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">          <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>里面加上自定义view 可以新建一个text.xml,这里用CardView套TextView<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">xmlns:card_view</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.CardView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/card_stories"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></div><div class="line">    <span class="attr">android:clickable</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:focusable</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:foreground</span>=<span class="string">"?android:attr/selectableItemBackground"</span></div><div class="line">    <span class="attr">card_view:cardElevation</span>=<span class="string">"3dp"</span></div><div class="line">    <span class="attr">card_view:cardPreventCornerOverlap</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">card_view:cardUseCompatPadding</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">card_view:contentPadding</span>=<span class="string">"8dp"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/myText"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"TextView"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v7.widget.CardView</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>使用时需要自定义一个Adapter和ViewHolder这里新建一个MyAdapter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.app.cczhr.recyclerviewdemo;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.Snackbar;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.CardView;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> android.view.LayoutInflater;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="comment">//第二步主类继承RecyclerView.Adapter 泛型填自定义的MyViewHolder，</span></div><div class="line"><span class="comment">//添加构造方法用来传输要显示的数据，这里传输一个 List&lt;String&gt;</span></div><div class="line"><span class="comment">//重写onCreateViewHolder 和onBindViewHolder 以及getItemCount</span></div><div class="line"><span class="comment">//onCreateViewHolder负责把自定义view传给MyViewHolder</span></div><div class="line"><span class="comment">//onBindViewHolder则是负责从拿出控件填入数据以及设置监听器 int position从getItemCount来决定</span></div><div class="line"><span class="comment">//getItemCount负责显示多少条</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MyAdapter</span>.<span class="title">MyViewHolder</span>&gt;</span>&#123;</div><div class="line">    List&lt;String&gt; mStringList;</div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">MyAdapter</span><span class="params">( List&lt;String&gt; mStringList)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.mStringList=mStringList;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view= LayoutInflater.from(parent.getContext()).inflate(R.layout.text,parent,<span class="keyword">false</span>);<span class="comment">//把xml布局文件转为View对象</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyViewHolder(view);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(MyViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> k=position;</div><div class="line">        holder.mTextView.setText(mStringList.get(position));</div><div class="line">        holder.mCardView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">                Snackbar snackbar = Snackbar.make(view,<span class="string">"消息已发出"</span>,Snackbar.LENGTH_SHORT);</div><div class="line">                snackbar.show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mStringList.size();</div><div class="line">    &#125;</div><div class="line">	<span class="comment">//第一步是新建一个MyViewHolde内部类继承 RecyclerView.ViewHolder 重写父类构造方法</span></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        TextView mTextView;</div><div class="line">        CardView mCardView;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            mTextView=(TextView)itemView.findViewById(R.id.myText);</div><div class="line">            mCardView=(CardView)itemView.findViewById(R.id.card_stories);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在需要显示的地方设置好</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    List&lt;String&gt; mStringList;</div><div class="line">	MyAdapter myAdapter;</div><div class="line">    <span class="meta">@BindView</span>(R.id.recycler_view)</div><div class="line">    RecyclerView mRecyclerView;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">        initDate();</div><div class="line">		<span class="comment">//数字代表行/列的个数</span></div><div class="line">        StaggeredGridLayoutManager layoutManager = <span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">1</span>, StaggeredGridLayoutManager.VERTICAL);<span class="comment">//瀑布流布局</span></div><div class="line">		<span class="comment">/*LinearLayoutManager layoutManager = new LinearLayoutManager(this);</span></div><div class="line">		layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);</div><div class="line">       GridLayoutManager layoutManager = new  GridLayoutManager(this,6);//网格布局</div><div class="line">	   layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);</div><div class="line">	   */</div><div class="line">        mRecyclerView.setLayoutManager(layoutManager);<span class="comment">//设置布局</span></div><div class="line">        myAdapter = <span class="keyword">new</span> MyAdapter(mStringList);<span class="comment">//新建适配器填充数据</span></div><div class="line">        mRecyclerView.setAdapter(myAdapter);<span class="comment">//设置适配器</span></div><div class="line">     </div><div class="line">    &#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initDate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">40</span>; i++) &#123;</div><div class="line">            mStringList.add(<span class="string">"第"</span> + <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="SwipeRefreshLayout"><a href="#SwipeRefreshLayout" class="headerlink" title="SwipeRefreshLayout"></a>SwipeRefreshLayout</h2><p>详细教程 <a href="http://www.jianshu.com/p/d23b42b6360b" target="_blank" rel="external">http://www.jianshu.com/p/d23b42b6360b</a><br>配置 通常和列表配合使用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.SwipeRefreshLayout</span></span></div><div class="line">       <span class="attr">android:id</span>=<span class="string">"@+id/swipe_refresh"</span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">       &gt;</div><div class="line">       <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">           <span class="attr">android:id</span>=<span class="string">"@+id/recycler_view"</span></div><div class="line">           <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">           <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</div><div class="line">   <span class="tag">&lt;/<span class="name">android.support.v4.widget.SwipeRefreshLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在需要使用的地方(实际使用并非如此)<br>setColorSchemeResources(int… colorResIds) 可以设置圈圈颜色<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="meta">@BindView</span>(R.id.swipe_refresh)</div><div class="line">    SwipeRefreshLayout mSwipeRefresh;</div><div class="line">	</div><div class="line">	    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSwipeRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        mSwipeRefresh.setRefreshing(<span class="keyword">false</span>);<span class="comment">//关闭圈圈</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	</div><div class="line">	</div><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">		<span class="comment">//设置下滑监听</span></div><div class="line">		mSwipeRefresh.setOnRefreshListener(<span class="keyword">new</span> SwipeRefreshLayout.OnRefreshListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">                setSwipeRefresh();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>效果<br><img src="/2017/07/31/一些android笔记/sw1.jpg" alt=""></p>
<h2 id="Butter-Knife"><a href="#Butter-Knife" class="headerlink" title="Butter Knife"></a>Butter Knife</h2><p>配置</p>
<pre><code>compile &apos;com.jakewharton:butterknife-compiler:8.7.0&apos;
compile &apos;com.jakewharton:butterknife:8.7.0&apos;
</code></pre><p>安装插件(非必须)<br><img src="/2017/07/31/一些android笔记/b1.jpg" alt=""><br>使用<br><img src="/2017/07/31/一些android笔记/b3.jpg" alt=""></p>
<p>效果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BindView</span>(R.id.toolbar)</div><div class="line">    Toolbar mToolbar;</div><div class="line">    <span class="meta">@BindView</span>(R.id.banner)</div><div class="line">    Banner mBanner;</div><div class="line">    <span class="meta">@BindView</span>(R.id.recycler_view)</div><div class="line">    RecyclerView mRecyclerView;</div><div class="line">    <span class="meta">@BindView</span>(R.id.swipe_refresh)</div><div class="line">    SwipeRefreshLayout mSwipeRefresh;</div></pre></td></tr></table></figure></p>
<h2 id="Glide"><a href="#Glide" class="headerlink" title="Glide"></a>Glide</h2><p>配置</p>
<pre><code>compile &apos;com.github.bumptech.glide:glide:3.7.0&apos;
</code></pre><p>权限(非必须)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">&lt;!-- if you want to load images from a file OR from the internet --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>简单使用</p>
<pre><code>with(Context context). 使用Application上下文，Glide请求将不受Activity/Fragment生命周期控制。
with(Activity activity).使用Activity作为上下文，Glide的请求会受到Activity生命周期控制。
with(FragmentActivity activity).Glide的请求会受到FragmentActivity生命周期控制。
with(android.app.Fragment fragment).Glide的请求会受到Fragment 生命周期控制。
with(android.support.v4.app.Fragment fragment).Glide的请求会受到Fragment生命周期控制。

load SD卡资源:load(&quot;file://&quot;+Environment.getExternalStorageDirectory().getPath()+&quot;/test.jpg&quot;) 
load assets资源：load(&quot;file:///android_asset/f003.gif&quot;) 
load raw资源：load(&quot;Android.resource://com.frank.glide/raw/raw_1&quot;)或        load(&quot;android.resource://com.frank.glide/raw/&quot;+R.raw.raw_1) 
load drawable资源：load(&quot;android.resource://com.frank.glide/drawable/news&quot;)或load(&quot;android.resource://com.frank.glide/drawable/&quot;+R.drawable.news) 
load ContentProvider资源：load(&quot;content://media/external/images/media/139469&quot;) 
load http资源：load(&quot;http://img.my.csdn.net/uploads/201508/05/1438760757_3588.jpg&quot;) 
load https资源：load(&quot;https://img.alicdn.com/tps/TB1uyhoMpXXXXcLXVXXXXXXXXXX-476-538.jpg_240x5000q50.jpg_.webp&quot;) 
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Glide.with(<span class="keyword">this</span>)</div><div class="line">              .load(<span class="string">"http:/xxx.xxx"</span>)</div><div class="line">              .asBitmap() <span class="comment">//强制静态或者动态图</span></div><div class="line">              .placeholder(R.drawable.gray_radius) <span class="comment">//设定等待图</span></div><div class="line">              .override(<span class="number">100</span>,<span class="number">100</span>)<span class="comment">//强制指定图片大小</span></div><div class="line">              .error(R.drawable.ic_backup)<span class="comment">//请求失败图</span></div><div class="line">              .into(mImage);<span class="comment">//指定显示的ImageView</span></div></pre></td></tr></table></figure>
<p>更多详细使用 参考以下网站<br><a href="http://blog.csdn.net/shangmingchao/article/details/51125554/" target="_blank" rel="external">http://blog.csdn.net/shangmingchao/article/details/51125554/</a></p>
<h2 id="轮播图控件Banner"><a href="#轮播图控件Banner" class="headerlink" title="轮播图控件Banner"></a>轮播图控件Banner</h2><p>配置</p>
<pre><code>compile &apos;com.youth.banner:banner:1.4.9&apos;
</code></pre><p>github <a href="https://github.com/youth5201314/banner" target="_blank" rel="external">https://github.com/youth5201314/banner</a><br>权限(非必须)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">&lt;!-- if you want to load images from a file OR from the internet --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>简单使用<br>在需要的布局文件加上,属性自己定义<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.youth.banner.Banner</span></span></div><div class="line">        <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/banner"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>首先新建一个适配器继承ImageLoader类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlideImageLoader</span> <span class="keyword">extends</span> <span class="title">ImageLoader</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(Context context, Object path, ImageView imageView)</span> </span>&#123;</div><div class="line">		<span class="comment">//使用Glide显示图片</span></div><div class="line">        Glide.with(context).load((String) path).into(imageView);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>然后在需要显示的地方显示<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="meta">@BindView</span>(R.id.banner)</div><div class="line">    Banner mBanner;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> List&lt;String &gt;mImageId = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    <span class="keyword">private</span> List&lt;String &gt;mTitle = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addImage</span><span class="params">()</span></span>&#123;</div><div class="line">        mImageId.add(<span class="string">"http://wx4.sinaimg.cn/wap720/90eb2137ly1fi1px332omj21f80y5qkb.jpg"</span>);</div><div class="line">        mImageId.add(<span class="string">"http://wx3.sinaimg.cn/wap720/90eb2137ly1fhzffgnaimj20go09e75p.jpg"</span>);</div><div class="line">        mImageId.add(<span class="string">"http://wx4.sinaimg.cn/wap720/90eb2137ly1fi0ltqso3yj20hq0c4mxw.jpg"</span>);</div><div class="line">        mTitle.add(<span class="string">"czh标题1"</span>);</div><div class="line">        mTitle.add(<span class="string">"czh标题2"</span>);</div><div class="line">        mTitle.add(<span class="string">"czh标题3"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">        addImage();</div><div class="line">        mBanner.setImageLoader(<span class="keyword">new</span> MyGlideImageLoader());<span class="comment">//设置适配器</span></div><div class="line">        mBanner.setBannerStyle(BannerConfig.NUM_INDICATOR_TITLE);<span class="comment">//样式</span></div><div class="line">        mBanner.setBannerTitles( mTitle);<span class="comment">//标题list</span></div><div class="line">        mBanner.setImages( mImageId );<span class="comment">//图片list</span></div><div class="line">        mBanner.start();<span class="comment">//执行</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>效果<br><img src="/2017/07/31/一些android笔记/ba1.jpg" alt=""></p>
<h2 id="RxJava2和Retrofit2"><a href="#RxJava2和Retrofit2" class="headerlink" title="RxJava2和Retrofit2"></a>RxJava2和Retrofit2</h2><p>配置</p>
<pre><code>compile &apos;io.reactivex.rxjava2:rxjava:2.1.2&apos;
compile &apos;io.reactivex.rxjava2:rxandroid:2.0.1&apos;  //主要用来切换ui线程
compile &apos;com.squareup.retrofit2:retrofit:2.3.0&apos;
compile &apos;com.squareup.retrofit2:converter-gson:2.3.0&apos; //解析json
compile &apos;com.squareup.retrofit2:adapter-rxjava2:2.3.0&apos; //与rxjava2配合
</code></pre><h3 id="RxJava2单独使用"><a href="#RxJava2单独使用" class="headerlink" title="RxJava2单独使用"></a>RxJava2单独使用</h3><p>详细教程 <a href="http://www.jianshu.com/p/0cd258eecf60" target="_blank" rel="external">http://www.jianshu.com/p/0cd258eecf60</a></p>
<pre><code>io.reactivex.Observable.create//创建被观察者
new ObservableOnSubscribe&lt;T&gt;()//T指定被观察者发送的数据类型
subscribe();//绑定观察者
new Observer&lt;T&gt;()//创建观察者
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">io.reactivex.Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;()&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">       <span class="comment">//subscribeOn的线程</span></div><div class="line">        e.onNext(<span class="string">"1"</span>);</div><div class="line">        e.onNext(<span class="string">"2"</span>);</div><div class="line">        e.onComplete();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;).observeOn(AndroidSchedulers.mainThread())   <span class="comment">//observerOn 指定的就是订阅者接收事件的线程(观察者)，可以多次指定</span></div><div class="line">        .subscribeOn(Schedulers.io())        <span class="comment">//subscribeOn() 指定的就是发射事件的线程(被观察者)，不能多次指定。</span></div><div class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Disposable d;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.d=d;</div><div class="line">        Log.e(<span class="string">"rxjava_onSubscribe:"</span>,<span class="string">"onSubscribe"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (s.equals(<span class="string">"3"</span>))&#123;</div><div class="line">            d.dispose();<span class="comment">//切断事件</span></div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            Log.e(<span class="string">"rxjava_onNext:"</span>,s);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull Throwable e)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rxjava_onSubscribe:"</span>,<span class="string">"onSubscribe"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rxjava_onComplete:"</span>,<span class="string">"onComplete"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Retrofit2单独使用"><a href="#Retrofit2单独使用" class="headerlink" title="Retrofit2单独使用"></a>Retrofit2单独使用</h3><h3 id="RxJava2配合Retrofit2加上gson简单使用"><a href="#RxJava2配合Retrofit2加上gson简单使用" class="headerlink" title="RxJava2配合Retrofit2加上gson简单使用"></a>RxJava2配合Retrofit2加上gson简单使用</h3><h2 id="倒计时按钮"><a href="#倒计时按钮" class="headerlink" title="倒计时按钮"></a>倒计时按钮</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTest</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    Button send;</div><div class="line">    <span class="keyword">private</span> TimeCount time;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.timer);</div><div class="line">        time = <span class="keyword">new</span> TimeCount(<span class="number">30000</span>, <span class="number">1000</span>);</div><div class="line">        send= ( Button)findViewById(R.id.send);</div><div class="line">        send.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                time.start();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TimeCount</span> <span class="keyword">extends</span> <span class="title">CountDownTimer</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TimeCount</span><span class="params">(<span class="keyword">long</span> millisInFuture, <span class="keyword">long</span> countDownInterval)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(millisInFuture, countDownInterval);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTick</span><span class="params">(<span class="keyword">long</span> millisUntilFinished)</span> </span>&#123;</div><div class="line"></div><div class="line">            send.setEnabled(<span class="keyword">false</span>);</div><div class="line">            send.setText(millisUntilFinished / <span class="number">1000</span> +<span class="string">"秒"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinish</span><span class="params">()</span> </span>&#123;</div><div class="line">            send.setText(<span class="string">"发送验证码"</span>);</div><div class="line">            send.setEnabled(<span class="keyword">true</span>);</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="滑动返回"><a href="#滑动返回" class="headerlink" title="滑动返回"></a>滑动返回</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>下载 SwipeBackLayout-V1.1.0.aar 包<br><a href="https://pan.baidu.com/s/1gfH0Sjp" target="_blank" rel="external">https://pan.baidu.com/s/1gfH0Sjp</a><br>导入<br><img src="/2017/07/31/一些android笔记/sb1.jpg" alt=""><br>gradle添加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">.......</div><div class="line">.....</div><div class="line">repositories &#123;</div><div class="line">        flatDir &#123;</div><div class="line">            dirs 'libs'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">.......</div><div class="line">.....</div><div class="line">compile(name: 'SwipeBackLayout-V1.1.0', ext: 'aar')</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在需要的界面直接继承 SwipeBackActivity 即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">SwipeBackActivity</span></span></div></pre></td></tr></table></figure></p>
<p>注意要把Activity背景弄成透明即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MyActivity"</span></span></div><div class="line">                  <span class="attr">android:theme</span>=<span class="string">"@style/otherPageStyle"</span>&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"otherPageStyle"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:statusBarColor"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Butter Knife 框架]]></title>
      <url>https://bigbignews.club/2017/07/24/Android-Butter-Knife-%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><pre><code>just take a few notes
</code></pre><h2 id="配置与使用"><a href="#配置与使用" class="headerlink" title="配置与使用"></a>配置与使用</h2><p><img src="/2017/07/24/Android-Butter-Knife-框架/b1.jpg" alt=""><br><img src="/2017/07/24/Android-Butter-Knife-框架/b2.jpg" alt=""><br><img src="/2017/07/24/Android-Butter-Knife-框架/b3.jpg" alt=""></p>
<h2 id="加多个Glide使用"><a href="#加多个Glide使用" class="headerlink" title="加多个Glide使用"></a>加多个Glide使用</h2><pre><code>compile &apos;com.github.bumptech.glide:glide:3.7.0&apos;
</code></pre><p><img src="/2017/07/24/Android-Butter-Knife-框架/b4.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git与github快速入门]]></title>
      <url>https://bigbignews.club/2017/07/21/git%E4%B8%8Egithub%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="第一步-github-和一部分git介绍"><a href="#第一步-github-和一部分git介绍" class="headerlink" title="第一步 github 和一部分git介绍"></a>第一步 github 和一部分git介绍</h2><p>官网 <a href="http://yun.itheima.com/course/209.html" target="_blank" rel="external">http://yun.itheima.com/course/209.html</a><br> b站 <a href="http://www.bilibili.com/video/av10475153" target="_blank" rel="external">http://www.bilibili.com/video/av10475153</a><br> 内容相同，github讲的很清楚，git也讲一些内容。<br><img src="/2017/07/21/git与github快速入门/face.jpg" alt=""><br>这里就简单贴几张github的图<br><img src="/2017/07/21/git与github快速入门/g1.jpg" alt=""><br><img src="/2017/07/21/git与github快速入门/g2.jpg" alt=""><br><img src="/2017/07/21/git与github快速入门/g3.jpg" alt=""><br><img src="/2017/07/21/git与github快速入门/g4.jpg" alt=""><br>git的概念<br><img src="/2017/07/21/git与github快速入门/git.jpg" alt=""></p>
<h2 id="第二步-git-实操"><a href="#第二步-git-实操" class="headerlink" title="第二步 git 实操"></a>第二步 git 实操</h2><h3 id="新建本地仓库"><a href="#新建本地仓库" class="headerlink" title="新建本地仓库"></a>新建本地仓库</h3><p>新建一个文件夹(准备放代码)<br>然后按鼠标右键<br><img src="/2017/07/21/git与github快速入门/git1.jpg" alt=""><br>输入 git init 即可创建仓库成功<br><img src="/2017/07/21/git与github快速入门/git2.jpg" alt=""><br>然后就可以在这个文件夹工作啦~<br>具体操作可以看我分享的流程图~<br>看不清的可以打开 <a href="http://naotu.baidu.com/file/dbbefe2c0abcc3d270b557731d461c45?token=c69294587385204b" target="_blank" rel="external">http://naotu.baidu.com/file/dbbefe2c0abcc3d270b557731d461c45?token=c69294587385204b</a><br><img src="/2017/07/21/git与github快速入门/study.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BroadcastReceiver广播]]></title>
      <url>https://bigbignews.club/2017/07/19/BroadcastReceiver%E5%B9%BF%E6%92%AD/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="知识背景"><a href="#知识背景" class="headerlink" title="知识背景"></a>知识背景</h1><p>广播是一种可以跨进程的通信方式</p>
<h1 id="全局广播"><a href="#全局广播" class="headerlink" title="全局广播"></a>全局广播</h1><h2 id="定义广播接收者"><a href="#定义广播接收者" class="headerlink" title="定义广播接收者"></a>定义广播接收者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span> This method is called when the BroadcastReceiver is receiving</span></div><div class="line">     	<span class="comment">//onReceive函数不能做耗时的事情 参考值10s内</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>在AndroidManifest.xml注册<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".MyReceiver"</span></div><div class="line">            <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</div><div class="line">			<span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.cczhr.broadcasttest.MY_BROADCAST"</span>/&gt;</span></div><div class="line">		<span class="comment">&lt;!--这里指定MyReceiver所要接收的广播名字--&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="动态注册注销"><a href="#动态注册注销" class="headerlink" title="动态注册注销"></a>动态注册注销</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注册模块</span></div><div class="line"><span class="keyword">if</span>(receiver==<span class="keyword">null</span>)&#123;</div><div class="line">	receiver=<span class="keyword">new</span> MyReceiver();</div><div class="line">	intentFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">	intentFilter.addAction(<span class="string">"com.cczhr.broadcasttest.MY_BROADCAST"</span>);</div><div class="line">	<span class="comment">//这里指定MyReceiver所要接收的广播名字</span></div><div class="line">	registerReceiver(receiver,intentFilter)</div><div class="line">&#125;</div><div class="line"><span class="comment">//注销模块</span></div><div class="line"><span class="keyword">if</span>(receiver!=<span class="keyword">null</span>)&#123;</div><div class="line">unregisterReceiver(networkChangeReceiver);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> IntentFilter intentFilter;</div><div class="line"><span class="keyword">private</span> MyReceiver receiver =<span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<h2 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.cczhr.broadcasttest.MY_BROADCAST"</span>);</div><div class="line">sendBroadcast(intent);</div></pre></td></tr></table></figure>
<h1 id="有序广播"><a href="#有序广播" class="headerlink" title="有序广播"></a>有序广播</h1><p> 优先级别越高越先收到广播而且能阻断下一个接收者接收。<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".MyReceiver"</span></div><div class="line">            <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</div><div class="line">			<span class="comment">&lt;!--这里指定优先级--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"100"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.cczhr.broadcasttest.MY_BROADCAST"</span>/&gt;</span></div><div class="line">		<span class="comment">&lt;!--这里指定MyReceiver所要接收的广播名字--&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">receiver</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".MyReceiver2"</span></div><div class="line">            <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</div><div class="line">			<span class="comment">&lt;!--这里指定优先级--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"90"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.cczhr.broadcasttest.MY_BROADCAST"</span>/&gt;</span></div><div class="line">		<span class="comment">&lt;!--这里指定MyReceiver所要接收的广播名字--&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>MyReceiver<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span> This method is called when the BroadcastReceiver is receiving</span></div><div class="line">     	<span class="comment">//onReceive函数不能做耗时的事情 参考值10s内</span></div><div class="line">		abortBroadcast();</div><div class="line">		<span class="comment">//截断广播，这时MyReceiver2接收不了广播</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="本地广播"><a href="#本地广播" class="headerlink" title="本地广播"></a>本地广播</h1><p>使用这个机制发出的广播只能够在应用程序的内部进行传递，并且广播接收器也只能接收来自本应用程序发出的广播<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> LocalReceiver localReceiver;</div><div class="line"><span class="comment">//注册本地广播</span></div><div class="line">IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">intentFilter.addAction(<span class="string">"com.cczhr.broadcasttest.MY_BROADCAST"</span>);<span class="comment">//可以设置多个</span></div><div class="line">localReceiver = <span class="keyword">new</span> LocalReceiver();</div><div class="line">localBroadcastManager.registerReceiver(localReceiver, intentFilter); </div><div class="line">....</div><div class="line"><span class="comment">//处理收到的信息</span></div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">LocalReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span>(intent.getAction().equals(com.cczhr.broadcasttest.MY_BROADCAST)&#123;</div><div class="line">			<span class="comment">//dosomething</span></div><div class="line">			&#125;</div><div class="line">        &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="comment">//最后在注册的onDestroy取消注册</span></div><div class="line"> ...</div><div class="line">  LocalBroadcastManager.getInstance(<span class="keyword">this</span>).unregisterReceiver( localReceiver);</div><div class="line"> ....</div><div class="line">	</div><div class="line">	</div><div class="line"><span class="comment">//发送本地广播</span></div><div class="line">localBroadcastManager = LocalBroadcastManager.getInstance(<span class="keyword">this</span>); <span class="comment">// 获取实例</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.cczhr.broadcasttest.MY_BROADCAST"</span>);</div><div class="line">localBroadcastManager.sendBroadcast(intent); <span class="comment">//传Intent</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[代理模式]]></title>
      <url>https://bigbignews.club/2017/07/16/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>1.Subject(抽象主题类):<br>抽象类或者接口，主要负责<font color="#FF0000">声明真实主题和代理的共同接口方法</font>。<br>2.RealSubject(真实主题类):<br>也叫被委托类或被代理类，继承抽象主题类或是实现抽象主题类接口，负责<font color="#FF0000">定义抽象主题类声明的方法的具体内容</font>。<br>3.ProxySubject(代理类):<br>也叫委托类或代理类，继承抽象主题类或是实现抽象主题类接口，该类有一个对真实主题的引用，负责<font color="#FF0000">在实现的方法中直接调用真实主题类的方法</font>。<br>4.Client:客户类:<br>即<font color="#FF0000">使用代理的类</font>。</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>Subject(抽象主题类):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">outPut</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>RealSubject(真实主题类):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outPut</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"这就是静态代理"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ProxySubject(代理类):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxySubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Subject mSubject;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ProxySubject</span><span class="params">(Subject subject)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.mSubject=subject;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outPut</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		mSubject.outPut();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Client:客户类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Subject realSubject=<span class="keyword">new</span> RealSubject();</div><div class="line">		Subject proxySubject=<span class="keyword">new</span> ProxySubject(realSubject);</div><div class="line">		proxySubject.outPut();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果<br><img src="/2017/07/16/代理模式/d1.jpg" alt=""></p>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="理论-1"><a href="#理论-1" class="headerlink" title="理论"></a>理论</h3><p>动态代理通过java的反射机制来动态生成代理者的对象。<br>1.Subject(抽象主题类):<br>接口，主要负责<font color="#FF0000">声明真实主题和代理的共同接口方法</font>。<br>2.RealSubject(真实主题类):<br>也叫被委托类或被代理类，实现抽象主题类接口，负责<font color="#FF0000">定义抽象主题类声明的方法的具体内容</font>。<br>3.ProxySubject(代理类):<br>也叫委托类或代理类，负责<font color="#FF0000">实现jdk的InvocationHandler接口invoke方法现动态代理</font>。<br>4.Client:客户类:<br>即<font color="#FF0000">使用代理的类</font>。</p>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>Subject(抽象主题类):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">outPut</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>RealSubject(真实主题类):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outPut</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"这就是动态代理"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><font color="#FF0000">ProxySubject(代理类):</font><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxySubject</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Object obj;<span class="comment">//真实对象的引用</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ProxySubject</span><span class="params">(Object obj)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.obj=obj;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></div><div class="line">			<span class="keyword">throws</span> Throwable &#123;</div><div class="line">		System.out.println(<span class="string">"开始调用真实主题类方法"</span>);</div><div class="line">		Object result=method.invoke(obj, args);<span class="comment">//调用真实主题类方法</span></div><div class="line">		System.out.println(<span class="string">"调用真实主题类方法结束"</span>);</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><font color="#FF0000">Client:客户类:</font><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Subject realSubject=<span class="keyword">new</span> RealSubject();</div><div class="line">		<span class="comment">//构造一个动态代理</span></div><div class="line">		ProxySubject proxySubject= <span class="keyword">new</span> ProxySubject(realSubject);</div><div class="line">		<span class="comment">//获取真实主题的ClassLoader</span></div><div class="line">		ClassLoader loader=realSubject.getClass().getClassLoader();</div><div class="line">		<span class="comment">//动态构造一个代理对象</span></div><div class="line">		Subject realSubjectProxy=(Subject)Proxy.newProxyInstance(loader, <span class="keyword">new</span> Class[]&#123;Subject.class&#125;, proxySubject);</div><div class="line">		</div><div class="line">		realSubjectProxy.outPut();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果<br><img src="/2017/07/16/代理模式/d2.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android开发艺术探索笔记]]></title>
      <url>https://bigbignews.club/2017/07/01/android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="第一章Activity的生命周期和启动模式"><a href="#第一章Activity的生命周期和启动模式" class="headerlink" title="第一章Activity的生命周期和启动模式"></a>第一章Activity的生命周期和启动模式</h2><h3 id="Activity生命周期"><a href="#Activity生命周期" class="headerlink" title="Activity生命周期"></a>Activity生命周期</h3><h4 id="单个Activity"><a href="#单个Activity" class="headerlink" title="单个Activity"></a>单个Activity</h4><p>启动Activity<br>onCreat-&gt;onStart-&gt;onResume<br>Activity切换到桌面(Activity用了透明主题不会回调onStop)<br>onPause-&gt;onStop<br>返回Activity<br>onRestart-&gt;onStart-&gt;onResume<br>按Back键回退<br>onPause-&gt;onStop-&gt;onDestroy<br>直接强制停止应用<br>没有回调</p>
<h4 id="两个Activity"><a href="#两个Activity" class="headerlink" title="两个Activity"></a>两个Activity</h4><p>Activity之间的切换<br>（A1切换A2）<br>A1 onPause<br>A2 onCreat-&gt;onStart-&gt;onResume<br>A1 onStop<br>（A2按Back键回退A1）<br>A2 onPause<br>A1 onRestart-&gt;onStart-&gt;onResume<br>A2 onStop-&gt;onDestroy</p>
<h3 id="Activity启动模式"><a href="#Activity启动模式" class="headerlink" title="Activity启动模式"></a>Activity启动模式</h3><h4 id="standard-标准模式"><a href="#standard-标准模式" class="headerlink" title="standard(标准模式)"></a>standard(标准模式)</h4><p>每个Activity都在同一个栈<br>每次启动一个Activity都新建实例</p>
<h4 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h4><p>每个Activity都在同一个栈<br>除了启动本来就在栈顶的Activity不会新建实例<br>启动不在栈顶的Activity都新建实例</p>
<h4 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h4><p>每个Activity都在同一个栈<br>要启动的Activity在栈内的不会重复新建实例<br>每次切换非栈顶的Activity会把在它后入栈Activity清除</p>
<h4 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h4><p>每个Activity独立一个栈<br>要启动的Activity在栈内的不会重复新建实例<br>每次切换Activity切换栈</p>
<h3 id="Activity启动方式"><a href="#Activity启动方式" class="headerlink" title="Activity启动方式"></a>Activity启动方式</h3><h4 id="显式-Intent"><a href="#显式-Intent" class="headerlink" title="显式 Intent"></a>显式 Intent</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent i=<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,Main2.class);</div><div class="line">startActivity(i);</div></pre></td></tr></table></figure>
<h4 id="隐式-Intent"><a href="#隐式-Intent" class="headerlink" title="隐式 Intent"></a>隐式 Intent</h4><p>隐式 Intent不明确指定启动哪个Activity，而是设置Action、Data、Category，让系统来筛选出合适的Activity。筛选是根据所有的&lt; intent-filter &gt;来筛选，可以使用隐式 Intent从A应用启动B应用。</p>
<h5 id="设置Action"><a href="#设置Action" class="headerlink" title="设置Action"></a>设置Action</h5><p>android:label是设置标签用来区分同一个应用不同activity用同一个action的情况。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".Main2"</span> <span class="attr">android:label</span>=<span class="string">"hhh"</span>&gt;</span> </div><div class="line"><span class="comment">&lt;!--&lt;activity android:name=".Main2" android:exported="false"&gt;改为这样其它应用无法访问 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span><span class="comment">&lt;!--此句一般都要加 --&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.app.cczhr.democ.my2"</span>/&gt;</span><span class="comment">&lt;!--一般命名方式是包名+Action名 --&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Intent i=<span class="keyword">new</span> Intent(<span class="string">"com.app.cczhr.democ.my2"</span>);</div><div class="line"><span class="comment">/*也可以这样写</span></div><div class="line">Intent i=new Intent();</div><div class="line">i.setAction("com.app.cczhr.democ.my2");*/</div><div class="line">startActivity(i);</div></pre></td></tr></table></figure></p>
<h5 id="设置Data"><a href="#设置Data" class="headerlink" title="设置Data"></a>设置Data</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".Main2"</span> <span class="attr">android:label</span>=<span class="string">"main2"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></div><div class="line">		 </div><div class="line">         <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"app"</span> /&gt;</span></div><div class="line">		 <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</span><span class="comment">&lt;!--设置可以浏览器启动 --&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>/&gt;</span></div><div class="line"></div><div class="line">     <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<p>启动<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> Intent i=<span class="keyword">new</span> Intent();</div><div class="line"> i.setData(Uri.parse(<span class="string">"app://"</span>));</div><div class="line">startActivity(i);</div></pre></td></tr></table></figure></p>
<p>也可以浏览器直接访问”app://“启动<br>其它语法（懒得打）<br><img src="/2017/07/01/android开发艺术探索笔记/face.jpg" alt=""><br><img src="/2017/07/01/android开发艺术探索笔记/b1.jpg" alt=""><br><img src="/2017/07/01/android开发艺术探索笔记/b2.jpg" alt=""></p>
<h5 id="设置Category"><a href="#设置Category" class="headerlink" title="设置Category"></a>设置Category</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".Main2"</span> <span class="attr">android:label</span>=<span class="string">"main2"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></div><div class="line">		 <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"jjj"</span> /&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<p>启动<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent i=<span class="keyword">new</span> Intent();</div><div class="line">i.addCategory(<span class="string">"jjj"</span>);</div><div class="line">startActivity(i);</div></pre></td></tr></table></figure></p>
<h2 id="第二章IPC机制-进程间通信机制"><a href="#第二章IPC机制-进程间通信机制" class="headerlink" title="第二章IPC机制(进程间通信机制)"></a>第二章IPC机制(进程间通信机制)</h2><h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><p>详细内容<a href="https://www.cnblogs.com/mythou/p/3258715.html" target="_blank" rel="external">https://www.cnblogs.com/mythou/p/3258715.html</a><br>在Android使用多进程只有一种方法，就是给四大组件的AndroidManifest指定android:process<br>android:process有两种，一种是类似”:remote”，另外一种是类似”xxx.xxx.remote”的，前者是属于当前应用的私有进程，其它应用组件不可以和它跑在同一个进程中，后者则是全局进程，可以通过ShareUID跑在同一个进程中。<br>多进程带来的问题就是共享数据的问题，因为每个进程都分配不同的虚拟机加载，相当于启动新的应用。</p>
<h3 id="启动服务和绑定服务"><a href="#启动服务和绑定服务" class="headerlink" title="启动服务和绑定服务"></a>启动服务和绑定服务</h3><p>此部分出处为：<a href="http://www.jianshu.com/p/2fb6eb14fdec" target="_blank" rel="external">http://www.jianshu.com/p/2fb6eb14fdec</a><br>作者：食梦兽<br>个人略微修改</p>
<h4 id="启动服务-startService"><a href="#启动服务-startService" class="headerlink" title="启动服务(startService)"></a>启动服务(startService)</h4><p>使用Service的步骤：<br>1.定义一个类继承Service<br>2.在Manifest.xml文件中配置该Service<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line">           <span class="attr">android:name</span>=<span class="string">".AppService"</span></div><div class="line">           <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">           <span class="attr">android:exported</span>=<span class="string">"true"</span></div><div class="line">           &gt;</div><div class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3.使用Context的startService(Intent)方法启动该Service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//跨进程启动方法</span></div><div class="line">   Intent i=<span class="keyword">new</span> Intent();</div><div class="line">   i.setComponent(<span class="keyword">new</span>  ComponentName(<span class="string">"com.app.cczhr.myaidl"</span>,<span class="string">"com.app.cczhr.myaidl.AppService"</span>));</div></pre></td></tr></table></figure></p>
<p>4.不再使用时，调用stopService(Intent)方法停止该服务</p>
<p>使用这种start方式启动的Service的生命周期如下：<br>onCreate()—&gt;onStartCommand()（onStart()方法已过时） —&gt; onDestory()</p>
<p>说明：如果服务已经开启，不会重复的执行onCreate()， 而是会调用onStart()和onStartCommand()。<br>服务停止的时候调用 onDestory()。服务只会被停止一次。</p>
<p>特点：一旦服务开启跟调用者(开启者)就没有任何关系了。<br>开启者退出了，开启者挂了，服务还在后台长期的运行。<br>开启者不能调用服务里面的方法。</p>
<h4 id="绑定服务-bindService"><a href="#绑定服务-bindService" class="headerlink" title="绑定服务(bindService)"></a>绑定服务(bindService)</h4><p>使用Service的步骤：<br>1.定义一个类继承Service<br>2.在Manifest.xml文件中配置该Service<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line">           <span class="attr">android:name</span>=<span class="string">".AppService"</span></div><div class="line">           <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">           <span class="attr">android:exported</span>=<span class="string">"true"</span></div><div class="line">           &gt;</div><div class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3.使用Context的bindService(Intent, ServiceConnection, int)方法启动该Service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//跨进程启动方法</span></div><div class="line">   Intent i=<span class="keyword">new</span> Intent();</div><div class="line">   i.setComponent(<span class="keyword">new</span>  ComponentName(<span class="string">"com.app.cczhr.myaidl"</span>,<span class="string">"com.app.cczhr.myaidl.AppService"</span>));</div><div class="line">     bindService(i, <span class="keyword">this</span>, Context.BIND_AUTO_CREATE);</div></pre></td></tr></table></figure></p>
<p>4.不再使用时，调用unbindService(ServiceConnection)方法停止该服务<br>使用这种bind方式启动的Service的生命周期如下：<br>onCreate() —&gt;onBind()—&gt;onunbind()—&gt;onDestory()</p>
<p>注意：绑定服务不会调用onstart()或者onstartcommand()方法</p>
<p>特点：bind的方式开启服务，绑定服务，调用者挂了，服务也会跟着挂掉。<br>绑定者可以调用服务里面的方法。</p>
<h3 id="对象序列化和反序列化"><a href="#对象序列化和反序列化" class="headerlink" title="对象序列化和反序列化"></a>对象序列化和反序列化</h3><p>知识背景：<br>将对象转换为字节流保存起来，并在以后还原这个对象，这种机制叫做对象序列化。<br>• 当一个对象被序列化时，只保存对象的非静态成员变量，不能保存任何的成员方法和静态的成员 变量。<br>• 如果一个对象的成员变量是一个对象，那么这个 对象的数据成员也会被保存。<br>• 如果一个可序列化的对象包含对某个不可序列化 的对象的引用，那么整个序列化操作将会失败，并且会抛出一个NotSerializableException。我 们可以将这个引用标记为transient，那么对象仍然可以序列化。</p>
<p>选择序列化方法的原则:<br>•在使用内存的时候，Parcelable比Serializable性能高，所以推荐使用Parcelable。<br>•Serializable在序列化的时候会产生大量的临时变量，从而引起频繁的GC。<br>•Parcelable不能使用在要将数据存储在磁盘上的情况，因为Parcelable不能很好的保证数据的持续性在外界有变化的情况下。尽管Serializable效率低点，但此时还是建议使用Serializable 。</p>
<h4 id="使用Serializable"><a href="#使用Serializable" class="headerlink" title="使用Serializable"></a>使用Serializable</h4><p>例子，serialVersionUID是用来检验反序列化的类是否发生变化的。<br>Serializable是一个空接口主要用来标记。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</div><div class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializableTest1</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></div><div class="line">	&#123;</div><div class="line">		Person p1 = <span class="keyword">new</span> Person(<span class="number">20</span>, <span class="string">"zhangsan"</span>, <span class="number">4.55</span>);</div><div class="line">		Person p2 = <span class="keyword">new</span> Person(<span class="number">50</span>, <span class="string">"lisi"</span>, <span class="number">4.67</span>);</div><div class="line">		Person p3 = <span class="keyword">new</span> Person(<span class="number">10</span>, <span class="string">"wangwu"</span>, <span class="number">17.78</span>);</div><div class="line"></div><div class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"d://person.txt"</span>);</div><div class="line">		ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</div><div class="line">		oos.writeObject(p1);</div><div class="line">		oos.writeObject(p2);</div><div class="line">		oos.writeObject(p3);</div><div class="line">		oos.close();</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"--------------------"</span>);</div><div class="line">		FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"d://person.txt"</span>);</div><div class="line">		ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</div><div class="line">		Person p = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</div><div class="line">		&#123;</div><div class="line">			p = (Person) ois.readObject();</div><div class="line">			System.out.println(p.age + <span class="string">","</span> + p.name + <span class="string">","</span> + p.height);</div><div class="line">		&#125;</div><div class="line">		ois.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">657728328721741525L</span>;<span class="comment">//1L也一样</span></div><div class="line">	<span class="keyword">int</span> age;</div><div class="line">    String name;</div><div class="line">	<span class="keyword">double</span> height;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name, <span class="keyword">double</span> height)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.height = height;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	更细化的处理</div><div class="line">	private void writeObject(java.io.ObjectOutputStream out) throws IOException</div><div class="line">	&#123;</div><div class="line">		out.writeInt(age);</div><div class="line">		out.writeUTF(name);</div><div class="line">		System.out.println("write object");</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private void readObject(java.io.ObjectInputStream in) throws IOException,</div><div class="line">			ClassNotFoundException</div><div class="line">	&#123;</div><div class="line">		age = in.readInt();</div><div class="line">		name = in.readUTF();</div><div class="line">		System.out.println("read object");</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	*/</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果<br><img src="/2017/07/01/android开发艺术探索笔记/s11.jpg" alt=""></p>
<h4 id="使用Parcelable"><a href="#使用Parcelable" class="headerlink" title="使用Parcelable"></a>使用Parcelable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.os.Parcel;</div><div class="line"><span class="keyword">import</span> android.os.Parcelable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Parcelable</span>  </span>&#123;</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    String name;</div><div class="line">    <span class="keyword">double</span> height;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name, <span class="keyword">double</span> height)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.height = height;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Person</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">        age = in.readInt();</div><div class="line">        name = in.readString();</div><div class="line">        height = in.readDouble();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;Person&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Person&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Person(in);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> Person[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Person[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel parcel, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        parcel.writeInt(age);</div><div class="line">        parcel.writeString(name);</div><div class="line">        parcel.writeDouble(height);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发送<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Person p1 = <span class="keyword">new</span> Person(<span class="number">20</span>, <span class="string">"zhangsan"</span>, <span class="number">4.55</span>);</div><div class="line">Intent i=<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,Main2.class);</div><div class="line">i.putExtra(<span class="string">"person"</span>,p1);</div><div class="line">startActivity(i);</div></pre></td></tr></table></figure></p>
<p>接收<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent i = getIntent();</div><div class="line">Person p1 =(Person)i.getParcelableExtra(<span class="string">"person"</span>);</div><div class="line">Log.e(<span class="string">"message"</span>,p1.age+<span class="string">","</span>+p1.name+<span class="string">","</span>+p1.height);</div></pre></td></tr></table></figure></p>
<h3 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h3><p><img src="/2017/07/01/android开发艺术探索笔记/b4.jpg" alt=""></p>
<h4 id="使用Messenger"><a href="#使用Messenger" class="headerlink" title="使用Messenger"></a>使用Messenger</h4><p>总的来说Messenger负责发送信息，message负责装载信息，  Bundle负责保存信息。服务端发自己Messenger给客户端，客户端又发自己的Messenger给服务端，利用对方给的Messenger发信息给对方。<br><img src="/2017/07/01/android开发艺术探索笔记/b3.jpg" alt=""></p>
<h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><p><font color="#FF0000">新建一个服务</font>，然后参考以下代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerService</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MSG=<span class="number">233</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MessengerService"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;<span class="comment">//创建Handler用来接收</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what)&#123;</div><div class="line">                <span class="keyword">case</span> MSG:</div><div class="line">                    </div><div class="line">                    Log.i(TAG, <span class="string">"服务端收到的信息："</span>+msg.getData().getString(<span class="string">"data"</span>));</div><div class="line">                     <span class="comment">//服务端发信息给客户端</span></div><div class="line">					Messenger messenger=msg.replyTo;<span class="comment">//获得客户端的Messenger</span></div><div class="line">                    Message message=Message.obtain(<span class="keyword">null</span>,MSG);</div><div class="line">                    Bundle bundle=<span class="keyword">new</span> Bundle();</div><div class="line">                    bundle.putString(<span class="string">"reply"</span>,<span class="string">"服务端回复客户端"</span>);</div><div class="line">                    message.setData(bundle);</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        messenger.send(message);</div><div class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//常规代码</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Messenger mMessenger=<span class="keyword">new</span> Messenger(<span class="keyword">new</span> MessengerHandler());</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mMessenger.getBinder();<span class="comment">//返回Binder对象给客户端</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">Intent i=<span class="keyword">new</span> Intent();</div><div class="line">i.setComponent(<span class="keyword">new</span> ComponentName(<span class="string">"com.app.cczhr.myaidl"</span>,<span class="string">"com.app.cczhr.myaidl.MessengerService"</span>));<span class="comment">//第一个是要启动应用的包名，第二个是具体服务。</span></div><div class="line">bindService(i, mConnection, Context.BIND_AUTO_CREATE);<span class="comment">//绑定服务</span></div><div class="line">unbindService( mConnection);<span class="comment">//解除绑定一般写在onDestroy()</span></div><div class="line"></div><div class="line"><span class="keyword">private</span> Messenger mReplyMessenger =<span class="keyword">new</span> Messenger(<span class="keyword">new</span> Handler()&#123;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">	 <span class="comment">//客户端用来接收服务端的信息</span></div><div class="line">           <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">           <span class="keyword">switch</span> (msg.what)&#123;</div><div class="line">               <span class="keyword">case</span> MSG:</div><div class="line">                   Log.d(TAG, <span class="string">"客户端收到服务端回复的的信息 :"</span> + msg.getData().getString(<span class="string">"reply"</span>));</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125; );</div><div class="line">   <span class="keyword">private</span> ServiceConnection mConnection =<span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">           mMessenger=<span class="keyword">new</span> Messenger(service);</div><div class="line">           Message message=Message.obtain(<span class="keyword">null</span>,MSG);</div><div class="line">           Bundle bundle=<span class="keyword">new</span> Bundle();</div><div class="line">           bundle.putString(<span class="string">"data"</span>,<span class="string">"收到服务端返回的binder,尝试发送信息给服务端"</span>);</div><div class="line">           message.setData(bundle);</div><div class="line">           message.replyTo=mReplyMessenger;<span class="comment">//发送Messenger给服务端，没有这句服务端将无法传回信息给客户端</span></div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               mMessenger.send(message);<span class="comment">//客户端发送信息</span></div><div class="line">           &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">               e.printStackTrace();</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line"></div><div class="line">       &#125;</div><div class="line">   &#125;;</div></pre></td></tr></table></figure>
<h4 id="使用AIDL"><a href="#使用AIDL" class="headerlink" title="使用AIDL"></a>使用AIDL</h4><p>首先 <font color="#FF0000">在客户端服务端都新建一个aidl文件夹,两边放的有关aidl的文件都要同包名</font>，新建aidl文件当接口，自带可传以下类型数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat,</span></span></div><div class="line">            <span class="keyword">double</span> aDouble, String aString)</div></pre></td></tr></table></figure></p>
<p>如果要传输对象则需要实现Parcelable接口的同时，要定义一个同名的aidl引用它，如<br>Book.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> bookId;</div><div class="line">    <span class="keyword">public</span> String bookName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> bookId, String bookName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bookId = bookId;</div><div class="line">        <span class="keyword">this</span>.bookName = bookName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Book</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">        bookId = in.readInt();</div><div class="line">        bookName = in.readString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;Book&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Book&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Book <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Book(in);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> Book[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Book[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">        dest.writeInt(bookId);</div><div class="line">        dest.writeString(bookName);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Book.aidl<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.app.cczhr.myaidl;</div><div class="line">parcelable Book;</div></pre></td></tr></table></figure></p>
<p>定义接口<br><img src="/2017/07/01/android开发艺术探索笔记/b5.jpg" alt=""><br>IOnNewBookArrivedListener.aidl<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.app.cczhr.myaidl;</div><div class="line"><span class="keyword">import</span> com.app.cczhr.myaidl.Book;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IOnNewBookArrivedListener</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNewBookArrived</span><span class="params">(in Book book)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>IBookManager.aidl<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.app.cczhr.myaidl;</div><div class="line"><span class="keyword">import</span> com.app.cczhr.myaidl.Book;</div><div class="line"><span class="keyword">import</span> com.app.cczhr.myaidl.IOnNewBookArrivedListener;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> </span>&#123;</div><div class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(IOnNewBookArrivedListener listener)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unregisterListener</span><span class="params">(IOnNewBookArrivedListener listener)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h5><p><font color="#FF0000">也是首先新建一个服务</font><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> AtomicBoolean mIsServiceDestoryed = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);<span class="comment">//开多线程的时候检验服务是否停止</span></div><div class="line">    <span class="keyword">private</span> CopyOnWriteArrayList&lt;Book&gt; mBooksList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;Book&gt;();<span class="comment">//线程安全的ArrayList</span></div><div class="line">    <span class="keyword">private</span> RemoteCallbackList&lt;IOnNewBookArrivedListener&gt; mListenerList = <span class="keyword">new</span> RemoteCallbackList&lt;IOnNewBookArrivedListener&gt;();<span class="comment">//绑定客户端用</span></div><div class="line">    <span class="keyword">private</span> Binder mBinder = <span class="keyword">new</span> IBookManager.Stub() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            <span class="keyword">return</span> mBooksList;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(<span class="keyword">final</span> Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            mBooksList.add(book);</div><div class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        onNewBookArrived(book);<span class="comment">//调用客户端的onNewBookArrived(book)</span></div><div class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(IOnNewBookArrivedListener listener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            mListenerList.register(listener);<span class="comment">//注册</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterListener</span><span class="params">(IOnNewBookArrivedListener listener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            mListenerList.unregister(listener);<span class="comment">//解除注册</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onNewBookArrived</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!mIsServiceDestoryed.get()) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> N = mListenerList.beginBroadcast();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">                IOnNewBookArrivedListener listener = mListenerList.getBroadcastItem(i);</div><div class="line">                <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">                    listener.onNewBookArrived(book);</div><div class="line">                &#125;</div><div class="line">                mListenerList.finishBroadcast();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        mBooksList.add(<span class="keyword">new</span> Book(<span class="number">1</span>, <span class="string">"Android"</span>));</div><div class="line">        mBooksList.add(<span class="keyword">new</span> Book(<span class="number">2</span>, <span class="string">"ios"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mBinder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        mIsServiceDestoryed.set(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">Intent i=<span class="keyword">new</span> Intent();</div><div class="line"> i.setComponent(<span class="keyword">new</span> ComponentName(<span class="string">"com.app.cczhr.myaidl"</span>,<span class="string">"com.app.cczhr.myaidl.AppService"</span>));<span class="comment">//第一个是要启动应用的包名，第二个是具体服务。</span></div><div class="line"> bindService(i, mConnection, Context.BIND_AUTO_CREATE);<span class="comment">//绑定服务</span></div><div class="line"> <span class="comment">//解除服务</span></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unBind</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (  bookManager != <span class="keyword">null</span> &amp;&amp;   bookManager.asBinder().isBinderAlive()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                bookManager.unregisterListener( mIOnNewBookArrivedListener);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            unbindService( mConnection);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">	</div><div class="line">.....</div><div class="line">.....</div><div class="line"> <span class="keyword">private</span> IBookManager bookManager;</div><div class="line"> .....</div><div class="line">.....</div><div class="line">  <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">            bookManager = IBookManager.Stub.asInterface(service);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                List&lt;Book&gt; list = bookManager.getBookList();<span class="comment">//假如服务端取数据慢可以在客户端开线程取避免arn</span></div><div class="line">                Log.e(TAG, <span class="string">"onServiceConnected: "</span> + list.toString());</div><div class="line">                bookManager.registerListener(mIOnNewBookArrivedListener);</div><div class="line">                bookManager.addBook(<span class="keyword">new</span> Book(<span class="number">4</span>, <span class="string">"测试返回书本"</span>));</div><div class="line">                bookManager.addBook(<span class="keyword">new</span> Book(<span class="number">3</span>, <span class="string">"python"</span>));</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;<span class="comment">//服务端被停止后回调</span></div><div class="line">            bookManager = <span class="keyword">null</span>;</div><div class="line">            Log.e(TAG, <span class="string">"Disconnected"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">private</span> IOnNewBookArrivedListener mIOnNewBookArrivedListener = <span class="keyword">new</span> IOnNewBookArrivedListener.Stub() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNewBookArrived</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            mHandler.obtainMessage(MESSAGE_NEW_BOOK_ARRIVED, book).sendToTarget();<span class="comment">//message由handler创建，可直接向handler发送消息。msg.sendToTarget()</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> MESSAGE_NEW_BOOK_ARRIVED:</div><div class="line">                    Log.e(TAG, <span class="string">"receive new book :"</span> + msg.obj);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Retrofit2笔记]]></title>
      <url>https://bigbignews.club/2017/06/15/Retrofit2%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的fragment页面切换优化笔记]]></title>
      <url>https://bigbignews.club/2017/05/11/Android%E7%9A%84fragment%E9%A1%B5%E9%9D%A2%E5%88%87%E6%8D%A2%E4%BC%98%E5%8C%96%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="闲谈"><a href="#闲谈" class="headerlink" title="闲谈"></a>闲谈</h2><p>最近我在做一个小项目，在空余的时间想怎么样的学习效率是最快的，我在观察别人的同时也问了下自己，应该是和水平相似甚至比你高一点点的人学习效率是最快的，让那个人告诉我他的经验，自己就不用折腾了。<br>那假如每个人都这样想，感觉折腾那个人才是最蠢的。<br>是么。<br>折腾+互相分享才是最快的。</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>原来切换fragment的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceFragment</span><span class="params">(Fragment targetFragment)</span></span>&#123;</div><div class="line">     FragmentManager fragmentManager=getSupportFragmentManager();</div><div class="line">       FragmentTransaction transaction=fragmentManager.beginTransaction();</div><div class="line">       transaction.replace(R.id.first_main,targetFragment);</div><div class="line">       transaction.commit();</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这种方法会每次replace会把生命周期全部执行一遍，如果在这些生命周期函数 里拉取数据的话，就会不断重复的加载刷新数据，不停的切换就会卡顿。</p>
<p>正确方法是fragment页面切换用add(),hide()和show()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceFragment</span><span class="params">(Fragment targetFragment)</span></span>&#123;</div><div class="line">       FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();</div><div class="line">       <span class="keyword">if</span> (!targetFragment.isAdded()) &#123;</div><div class="line">           <span class="keyword">if</span>(currentFragment != <span class="keyword">null</span>) &#123;</div><div class="line">               transaction.hide(currentFragment).add(R.id.first_main, targetFragment).commit();</div><div class="line">           &#125;<span class="keyword">else</span> &#123;</div><div class="line">               transaction.add(R.id.first_main, targetFragment).commit();</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           transaction.hide(currentFragment).show(targetFragment).commit();</div><div class="line">       &#125;</div><div class="line">        currentFragment = targetFragment;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>看起来很完美，实际体验也好了很多，但是只要你把这个app放到后台一段时间再操作就会出现fragment重叠现象。</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>当系统内存不足，Fragment 的宿主 Activity 回收的时候，Fragment 的实例并没有随之被回收。Activity 被系统回收时，会主动调用 onSaveInstance() 方法来保存视图层（View Hierarchy），所以当 Activity 通过导航再次被重建时，之前被实例化过的 Fragment 依然会出现在 Activity 中，此时的 FragmentTransaction 中的相当于又再次 add 了 fragment 进去的，hide()和show()方法对之前保存的fragment已经失效了，所以就出现了重叠。</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>重新onSaveInstanceState()就不会保存之前的 fragment state了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line"><span class="comment">//super.onSaveInstanceState(outState);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="刷新数据的问题"><a href="#刷新数据的问题" class="headerlink" title="刷新数据的问题"></a>刷新数据的问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onHiddenChanged</span><span class="params">(<span class="keyword">boolean</span> hidden)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onHiddenChanged(hidden);</div><div class="line">    <span class="comment">//这里写返回刷新的语句</span></div><div class="line">        <span class="keyword">if</span> (!hidden) &#123;</div><div class="line">            firstRefresh();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mvp和mvvm框架笔记]]></title>
      <url>https://bigbignews.club/2017/04/30/mvp%E5%92%8Cmvvm%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>1.mvp<br><img src="/2017/04/30/mvp和mvvm框架笔记/mvp.jpg" alt=""><br>其中数据逻辑相当于M，Activity（负责View的绘制以及与用户交互）相当于V ，View于Model间的交互则为P，Model与View之间的交互由Presenter完成。还有一点就是Presenter与View之间的交互是通过接口的。<br>总结：</p>
<ol>
<li>各部分之间的通信，都是双向的。</li>
<li>View 与 Model 不发生联系，都通过 Presenter 传递。</li>
<li>View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。</li>
</ol>
<p>2.mvvm<br><img src="/2017/04/30/mvp和mvvm框架笔记/mvvm.jpg" alt=""><br>MVVM是Model-View-ViewModel的简写. 它是有三个部分组成：Model、View、ViewModel。Model：数据模型层。包含业务逻辑和校验逻辑,View：屏幕上显示的UI界面（layout、views）,ViewModel：View和Model之间的链接桥梁，处理视图逻辑。<br>当View有用户输入后，ViewModel通知Model更新数据，同理Model数据更新后，ViewModel通知View更新。<br>总结：<br>MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。</p>
<h2 id="mvp的使用"><a href="#mvp的使用" class="headerlink" title="mvp的使用"></a>mvp的使用</h2><h3 id="首先是M-数据逻辑"><a href="#首先是M-数据逻辑" class="headerlink" title="首先是M(数据逻辑)"></a>首先是M(数据逻辑)</h3><p>UserModel.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserModel</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">checkUserValidity</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span> || password == <span class="keyword">null</span> ||</div><div class="line">                username.isEmpty() ||</div><div class="line">                password.isEmpty()) &#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="然后是V-View的绘制以及与用户交互-——通过interface-接口-与View-Activity交互"><a href="#然后是V-View的绘制以及与用户交互-——通过interface-接口-与View-Activity交互" class="headerlink" title="然后是V(View的绘制以及与用户交互)——通过interface(接口)与View(Activity交互)"></a>然后是V(View的绘制以及与用户交互)——通过interface(接口)与View(Activity交互)</h3><p>接口<br>ILoginView.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ILoginView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showProgress</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hideProgress</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPasswordError</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getUsername</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getPassword</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loginSuccess</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Activity<br>实现接口<br>LoginActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">ILoginView</span>,<span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> EditText usernameEdit,passwrodEdit;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button loginButton;</div><div class="line"></div><div class="line">    ProgressDialog pd;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_mvplogin);</div><div class="line"></div><div class="line">        pd = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        usernameEdit = (EditText) findViewById(R.id.et_username);</div><div class="line">        passwrodEdit = (EditText) findViewById(R.id.et_username);</div><div class="line">        loginButton = (Button) findViewById(R.id.bt_login);</div><div class="line"></div><div class="line">        loginButton.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showProgress</span><span class="params">()</span> </span>&#123;</div><div class="line">        pd.show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hideProgress</span><span class="params">()</span> </span>&#123;</div><div class="line">        pd.cancel();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPasswordError</span><span class="params">()</span> </span>&#123;</div><div class="line">        passwrodEdit.setError(<span class="string">"passwrod error"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> usernameEdit.getText().toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> passwrodEdit.getText().toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginSuccess</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"login success"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId())&#123;</div><div class="line">            <span class="keyword">case</span> R.id.bt_login:</div><div class="line"></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="最后是P-View于Model间的交互"><a href="#最后是P-View于Model间的交互" class="headerlink" title="最后是P(View于Model间的交互)"></a>最后是P(View于Model间的交互)</h3><p>与Model间交互接口<br>ILoginPresenter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ILoginPresenter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Login</span><span class="params">(String username, String password)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现接口<br>LoginPresenter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginPersenter</span> <span class="keyword">implements</span> <span class="title">ILoginPresenter</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ILoginView loginView;</div><div class="line">    <span class="keyword">private</span> UserModel mUser;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginPersenter</span><span class="params">(ILoginView loginView)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.loginView = loginView;</div><div class="line">        initUser();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUser</span><span class="params">()</span></span>&#123;</div><div class="line">        mUser = <span class="keyword">new</span> UserModel(loginView.getUsername(),loginView.getPassword());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Login</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        loginView.showProgress();</div><div class="line">        <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                loginView.hideProgress();</div><div class="line">                <span class="keyword">int</span> code = mUser.checkUserValidity(loginView.getUsername(), loginView.getPassword());</div><div class="line">                <span class="keyword">if</span> (code == -<span class="number">1</span>) &#123;</div><div class="line">                    loginView.setPasswordError();</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">0</span>) &#123;</div><div class="line">                    loginView.loginSuccess();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,<span class="number">2000</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="最后在LoginActivity中补上P的调用"><a href="#最后在LoginActivity中补上P的调用" class="headerlink" title="最后在LoginActivity中补上P的调用"></a>最后在LoginActivity中补上P的调用</h3><p>LoginActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">....</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">	...</div><div class="line">    &#125;</div><div class="line">....</div><div class="line"><span class="comment">//初始化</span></div><div class="line">loginPresenter = <span class="keyword">new</span> LoginPersenter(<span class="keyword">this</span>);<span class="comment">//方便使用LoginActivity里的方法</span></div><div class="line">...</div><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId())&#123;</div><div class="line">            <span class="keyword">case</span> R.id.bt_login:</div><div class="line"><span class="comment">//Click方法中的调用</span></div><div class="line">loginPresenter.Login(usernameEdit.getText().toString(),passwrodEdit.getText().toString());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">		.....</div></pre></td></tr></table></figure></p>
<p>Done!</p>
<h2 id="mvvm的使用"><a href="#mvvm的使用" class="headerlink" title="mvvm的使用"></a>mvvm的使用</h2><h3 id="首先是M-数据逻辑-和mvp一样"><a href="#首先是M-数据逻辑-和mvp一样" class="headerlink" title="首先是M(数据逻辑)和mvp一样"></a>首先是M(数据逻辑)和mvp一样</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserModel</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bindable</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">        notifyPropertyChanged(BR.username);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bindable</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">        notifyPropertyChanged(BR.password);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">checkUserValidity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span> || password == <span class="keyword">null</span> ||</div><div class="line">                username.isEmpty() ||</div><div class="line">                password.isEmpty()) &#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="接下来是V-屏幕上显示的UI界面-layout、views"><a href="#接下来是V-屏幕上显示的UI界面-layout、views" class="headerlink" title="接下来是V(屏幕上显示的UI界面 layout、views)"></a>接下来是V(屏幕上显示的UI界面 layout、views)</h3><p>这里涉及到databinding，先解释下databinding用法。</p>
<h4 id="使用databinding"><a href="#使用databinding" class="headerlink" title="使用databinding"></a>使用databinding</h4><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>在app的build.gradle上加上以下代码，配置之后，就可以开始使用数据绑定了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">android &#123;  </div><div class="line">    ...  </div><div class="line">    ...  </div><div class="line">    ...  </div><div class="line">    dataBinding&#123;  </div><div class="line">        enabled <span class="keyword">true</span>  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>要使用数据绑定，我们得首先创建一个实体类，例如使用上面的M(UserModel.java)</p>
<p>然后我们来看看布局文件该怎么写，首先布局文件不再是以传统的某一个容器作为根节点，而是使用<layout></layout>作为根节点，在<layout>节点中我们可以通过<data>节点来引入我们要使用的数据源。</data></layout></p>
<p>在data中定义的variable节点，name属性表示变量的名称，type表示这个变量的类型，实例就是我们实体类的位置。<br>activity_mvvmlogin.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"user"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"com.netease.mvpormvvmdemo.mvvm.UserModel"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--</span></div><div class="line">	也可以用import写法</div><div class="line">	&lt;data&gt;  </div><div class="line">    	&lt;import type="com.netease.mvpormvvmdemo.mvvm.UserModel"/&gt;  </div><div class="line">   		 &lt;variable  </div><div class="line">        	name="user"  </div><div class="line">      	    type="UserModel"/&gt;  </div><div class="line">   	 &lt;/data&gt;</div><div class="line">   --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/et_username"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/et_password"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/bt_login"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Login"</span></div><div class="line">            /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="最后是VM-View和Model之间的链接桥梁，处理视图逻辑。"><a href="#最后是VM-View和Model之间的链接桥梁，处理视图逻辑。" class="headerlink" title="最后是VM(View和Model之间的链接桥梁，处理视图逻辑。)"></a>最后是VM(View和Model之间的链接桥梁，处理视图逻辑。)</h3><p>LoginActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</div><div class="line"></div><div class="line">    ActivityMvvmloginBinding binding;</div><div class="line">    ProgressDialog pd;</div><div class="line">    UserModel userModel;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="comment">//绑定</span></div><div class="line">        binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_mvvmlogin);</div><div class="line">        pd = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        binding.btLogin.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                userModel = <span class="keyword">new</span> UserModel(binding.etUsername.getText().toString(),binding.etPassword.getText().toString());             <span class="comment">//使用绑定类的方法</span></div><div class="line">                binding.setUser(userModel);</div><div class="line">                doLoign();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doLoign</span><span class="params">()</span></span>&#123;</div><div class="line">        pd.show();</div><div class="line">        <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                pd.cancel();</div><div class="line">                <span class="keyword">int</span> code = userModel.checkUserValidity();</div><div class="line">                <span class="keyword">if</span> (code == -<span class="number">1</span>) &#123;</div><div class="line">				<span class="comment">//使用绑定view</span></div><div class="line">                    binding.etPassword.setError(<span class="string">"passwrod error"</span>);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">0</span>) &#123;</div><div class="line">                    Toast.makeText(getBaseContext(), <span class="string">"login success"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,<span class="number">2000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Done!<br>更详细的mvvm可以转去 <a href="http://blog.csdn.net/u012702547/article/details/52077515" target="_blank" rel="external">http://blog.csdn.net/u012702547/article/details/52077515</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android使用okhttp3和handler实现简单联网交互]]></title>
      <url>https://bigbignews.club/2017/04/16/Android%E4%BD%BF%E7%94%A8okhttp3%E5%92%8Chandler%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E8%81%94%E7%BD%91%E4%BA%A4%E4%BA%92/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>需要引入okhttp3的包<br><img src="/2017/04/16/Android使用okhttp3和handler实现简单联网交互/o1.jpg" alt=""><br><img src="/2017/04/16/Android使用okhttp3和handler实现简单联网交互/o2.jpg" alt=""></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>不讲原理直接开干 这里介绍比较片面 有些方法并没有用到<br>想要了解更具体的原理和方法，自行查阅资料，这里只是使用工具的例子<br><img src="/2017/04/16/Android使用okhttp3和handler实现简单联网交互/face.png" alt=""><br>创建一个异步操作的联网的工具包<br>HttpUtil.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> okhttp3.FormBody;</div><div class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</div><div class="line"><span class="keyword">import</span> okhttp3.Request;</div><div class="line"><span class="keyword">import</span> okhttp3.RequestBody;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by cczhr on 2017/3/11.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtil</span> </span>&#123;</div><div class="line">   <span class="comment">//get请求例子</span></div><div class="line">   <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">getSample</span><span class="params">(String address,String user,String password,String id,okhttp3.Callback callback)</span></span>&#123;</div><div class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">        Request request=<span class="keyword">new</span> Request.Builder()</div><div class="line">                .url(address+<span class="string">"?id="</span>+id+<span class="string">"&amp;&amp;user="</span>+user+<span class="string">"&amp;&amp;password="</span>+password)</div><div class="line">                .build();</div><div class="line">        client. newCall(request).enqueue(callback);</div><div class="line">    &#125;</div><div class="line">  </div><div class="line"><span class="comment">//post 请求例子</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span>   <span class="title">postSample</span><span class="params">(String address,String user,String password,okhttp3.Callback callback)</span></span>&#123;</div><div class="line">     </div><div class="line">	 OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">        RequestBody requestBody=<span class="keyword">new</span> FormBody.Builder()</div><div class="line">                .add(<span class="string">"user"</span>,user)</div><div class="line">                .add(<span class="string">"password"</span>,password)</div><div class="line">                .build();</div><div class="line"></div><div class="line">        Request request=<span class="keyword">new</span> Request.Builder()</div><div class="line">                .url(url)</div><div class="line">                .post(requestBody)</div><div class="line">                .build();</div><div class="line">        client. newCall(request).enqueue(callback);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>MainActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//执行get请求 url,user,password,id在实际情况中要给值</span></div><div class="line">            HttpUtil.getSample(url,user,password,id, <span class="keyword">new</span> okhttp3.Callback() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">                  <span class="comment">//网络请求失败会执行的方法</span></div><div class="line">                &#125;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                   <span class="comment">//网络请求成功会执行的方法</span></div><div class="line">				  <span class="keyword">if</span> (response!=<span class="keyword">null</span>)&#123;</div><div class="line">				  <span class="comment">//下面是把请求网站后获取到的内容转换为字符串例子</span></div><div class="line">                        InputStream inputStream=response.body().byteStream();</div><div class="line">                        BufferedReader reader=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</div><div class="line">                        StringBuilder result=<span class="keyword">new</span> StringBuilder();</div><div class="line">                        String line;</div><div class="line">                        <span class="keyword">while</span> ((line=reader.readLine())!=<span class="keyword">null</span>)&#123;</div><div class="line">                            result.append(line);</div><div class="line">                        &#125;</div><div class="line">                        String date=(result.toString());</div><div class="line">                        System.out.println(date);</div><div class="line">						<span class="comment">//注意这里不能直接操作ui</span></div><div class="line">						<span class="comment">//请求完毕后使用handler回到ui线程</span></div><div class="line">						 Message message=<span class="keyword">new</span> Message();</div><div class="line">                         message.what=<span class="number">1</span>;<span class="comment">//后面的数字是随便定的 实际操作最好用一个常量</span></div><div class="line">                         handler.sendMessage(message);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">	<span class="comment">//post 请求也是一样的</span></div><div class="line">	   HttpUtil.postSample(url,user,password,id, <span class="keyword">new</span> okhttp3.Callback() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">                  <span class="comment">//网络请求失败会执行的方法</span></div><div class="line">                &#125;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                 .......</div><div class="line">				 .......</div><div class="line">				 .......</div><div class="line">				 </div><div class="line">            &#125;);</div></pre></td></tr></table></figure></p>
<p>MainActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Handler handler=<span class="keyword">new</span> Handler()&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what)&#123;</div><div class="line">                <span class="keyword">case</span>  <span class="number">1</span>:</div><div class="line">				<span class="comment">//执行ui线程的操作 这里是弹出一个消息框</span></div><div class="line">                  Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"操作成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<p>当然最后别忘了给App联网权限<br>AndroidManifest.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.app.cczhr.httpdemo"</span>&gt;</div><div class="line">		<span class="comment">&lt;!--  联网权限--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></div><div class="line">   </div><div class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></div><div class="line">    ......</div><div class="line">	......</div><div class="line">	......</div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Done!</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的NavigationView获取headerLayout组件的方法]]></title>
      <url>https://bigbignews.club/2017/03/30/Android%E7%9A%84NavigationView%E8%8E%B7%E5%8F%96headerLayout%E7%BB%84%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>1.获取NavigationView<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.......</div><div class="line">setContentView(R.layout.activity_main);</div><div class="line">...</div><div class="line">NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);</div></pre></td></tr></table></figure></p>
<p>2.获取headerLayout<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">View headerLayout = navigationView.inflateHeaderView(R.layout.nav_header_main);</div></pre></td></tr></table></figure></p>
<p>3.成功获取其中的组件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TextView  teacher = (TextView) headerLayout.findViewById(R.id.teacher);</div></pre></td></tr></table></figure></p>
<p>4.删除.activity_main.xml的app:headerLayout<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:headerLayout="@layout/nav_header_main"</div></pre></td></tr></table></figure></p>
<p>Done！<br>也可以这样(这种个人没有尝试)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">View headerView = navigationView.getHeaderView(<span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<p>详细可以转去<br><a href="https://segmentfault.com/a/1190000004151222" target="_blank" rel="external">https://segmentfault.com/a/1190000004151222</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java的线程笔记]]></title>
      <url>https://bigbignews.club/2017/02/26/Java%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h2><ol>
<li>继承Thread类并重写run方法。  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// 处理具体的逻辑</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>运行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MyThread myThread = <span class="keyword">new</span> MyThread();</div><div class="line">myThread.start();</div><div class="line">------------------------------------------------------</div><div class="line"><span class="keyword">new</span> MyThread().start();<span class="comment">//匿名写法</span></div></pre></td></tr></table></figure></p>
<ol>
<li>通过定义实现Runnable接口的类进而实现 run方法<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// 处理具体的逻辑</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>运行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">MyThread myThread = <span class="keyword">new</span> MyThread();</div><div class="line"><span class="keyword">new</span> Thread(myThread).start();</div><div class="line">------------------------------------------------------------</div><div class="line"><span class="comment">//匿名类写法</span></div><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// 处理具体的逻辑</span></div><div class="line">&#125;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure></p>
<h2 id="人为停止线程推荐的方法"><a href="#人为停止线程推荐的方法" class="headerlink" title="人为停止线程推荐的方法"></a>人为停止线程推荐的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag=<span class="keyword">true</span>；</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123; </div><div class="line">	<span class="keyword">while</span> (flag) &#123;</div><div class="line">	…&#125;     </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopRunning</span><span class="params">()</span> </span>&#123;</div><div class="line">		flag = <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControlThread</span> </span>&#123;  </div><div class="line">	<span class="keyword">private</span> Runnable  r=<span class="keyword">new</span> MyThread(); </div><div class="line">	<span class="keyword">private</span> Thread t=<span class="keyword">new</span> Thread(r);   </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">()</span> </span>&#123; </div><div class="line">		t.start(); </div><div class="line">	&#125;         </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopThread</span><span class="params">()</span></span>&#123;  </div><div class="line">		r.stopRunning();&#125; </div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="同步锁-synchronized"><a href="#同步锁-synchronized" class="headerlink" title="同步锁(synchronized)"></a>同步锁(synchronized)</h2><h3 id="成员变量与局部变量"><a href="#成员变量与局部变量" class="headerlink" title="成员变量与局部变量"></a>成员变量与局部变量</h3><p>1.如果一个变量是<font color="#FF0000">成员变量</font>，那么多个线程对<font color="#FF0000">同一个对象</font>是彼此影响的(一个线程对成员的改变会影响另一个线程)。<br>例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO 自动生成的方法存根</span></div><div class="line">		Runnable r=<span class="keyword">new</span> HelloThread();</div><div class="line">		Thread t1=<span class="keyword">new</span> Thread(r);</div><div class="line">		Thread t2=<span class="keyword">new</span> Thread(r);</div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">			System.out.println(<span class="string">"number:"</span>+i++);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep((<span class="keyword">long</span>) (Math.random()*<span class="number">1000</span>));</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(<span class="number">10</span>==i)&#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果<br><img src="/2017/02/26/Java的线程笔记/t1.jpg" alt=""><br>2.如果一个变量是<font color="#FF0000">局部变量</font>，那么每个线程都有一个该局部变量的拷贝，一个线程对该局部变量的改变不会影响到其它的线程。<br>例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO 自动生成的方法存根</span></div><div class="line">		Runnable r=<span class="keyword">new</span> HelloThread();</div><div class="line">		Thread t1=<span class="keyword">new</span> Thread(r);</div><div class="line">		Thread t2=<span class="keyword">new</span> Thread(r);</div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">			System.out.println(<span class="string">"number:"</span>+i++);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep((<span class="keyword">long</span>) (Math.random()*<span class="number">1000</span>));</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(<span class="number">10</span>==i)&#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果<br><img src="/2017/02/26/Java的线程笔记/t2.jpg" alt=""></p>
<h3 id="静态方法和非静态方法"><a href="#静态方法和非静态方法" class="headerlink" title="静态方法和非静态方法"></a>静态方法和非静态方法</h3><p>Java 中的<font color="#FF0000">每个对象都</font>有一个锁（lock）或者叫做监视器（monitor），当访问某个对象的 synchronized 方法时，表示将<font color="#FF0000">该对象</font>上锁，此时其他任何线程都无法再去访问 该 synchronized 方法了，直到之前的那个线程执行方法完毕后（或者是抛出了异常）<br>， 那么将该对象的锁释放掉，其他线程才有可能再去访问该 synchronized 方法。 </p>
<p>如果<font color="#FF0000">一个对象</font>有多个 <font color="#FF0000"> synchronized方法</font>，某一时刻某个线程已经进入到了某个<font color="#FF0000"> synchronized方法</font> ，那么在该方法没有执行完毕前，其他线程是无法访问该对象的任何 <font color="#FF0000"> synchronized方法</font> 方法的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheThread2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Example example=<span class="keyword">new</span> Example();</div><div class="line">		Thread t1=<span class="keyword">new</span> TheThread(example);</div><div class="line">		Thread t2=<span class="keyword">new</span> TheThread1(example);</div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">100</span>);</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			System.out.println(<span class="string">"hello"</span>+i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute2</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">100</span>);</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			System.out.println(<span class="string">"world"</span>+i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> Example example;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TheThread</span><span class="params">(Example example)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.example=example;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		example.execute();</div><div class="line">		<span class="keyword">super</span>.run();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> Example example;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TheThread1</span><span class="params">(Example example)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.example=example;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		example.execute2();</div><div class="line">		<span class="keyword">super</span>.run();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果<br><img src="/2017/02/26/Java的线程笔记/t3.jpg" alt=""><br>如果某个 synchronized 方法是 static 的，那么当线程访问该方法时，它锁的<font color="#FF0000">并不是 synchronized 方法所在的对象</font>，而是 <font color="#FF0000">synchronized 方法所在的对象所对应的 Class 对 象</font>，因为 Java 中无论一个类有多少个对象，这些对象会对应<font color="#FF0000">唯一一个 Class 对象</font>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheThread2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Example example=<span class="keyword">new</span> Example();</div><div class="line">		Thread t1=<span class="keyword">new</span> TheThread(example);</div><div class="line">		Thread t2=<span class="keyword">new</span> TheThread1(example);</div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</div><div class="line">		.....</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute2</span><span class="params">()</span></span>&#123;</div><div class="line">		...</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果<br><img src="/2017/02/26/Java的线程笔记/t4.jpg" alt=""><br>因此当线程分别访问同一个类的两个对象的两个 static，synchronized 方法时，他们 的执行顺序也是顺序的，也就是说一个线程先去执行方法，执行完毕后另一个线程 。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheThread2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Example example=<span class="keyword">new</span> Example();<span class="comment">//不管生成多少个新对象也可以成功加锁</span></div><div class="line">		Thread t1=<span class="keyword">new</span> TheThread(example);</div><div class="line">		Thread t2=<span class="keyword">new</span> TheThread1(example);</div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</div><div class="line">		.....</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute2</span><span class="params">()</span></span>&#123;</div><div class="line">		...</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果<br><img src="/2017/02/26/Java的线程笔记/t5.jpg" alt=""></p>
<h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><p>表示线程在执行的时候会对 object 对象上锁，锁的只是方法的某一个代码块。<br>同步代码块是一种细粒度的并发控制，只会将块中的代码同步，位于方法内、同步代码块块之外的代码是可以被多个线程同时访问到的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheThread2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Example example=<span class="keyword">new</span> Example();</div><div class="line">		Thread t1=<span class="keyword">new</span> TheThread(example);</div><div class="line">		Thread t2=<span class="keyword">new</span> TheThread1(example);</div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</div><div class="line">	<span class="keyword">private</span>  Object o1=<span class="keyword">new</span> Object();</div><div class="line">	<span class="keyword">private</span> String o2=<span class="string">"233"</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">synchronized</span> (o1) &#123;</div><div class="line">		.....</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">execute2</span><span class="params">()</span></span>&#123;</div><div class="line">	    <span class="keyword">synchronized</span> (o2) &#123;</div><div class="line">		...</div><div class="line">		&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果<br><img src="/2017/02/26/Java的线程笔记/t6.jpg" alt=""></p>
<h2 id="wait及notify"><a href="#wait及notify" class="headerlink" title="wait及notify"></a>wait及notify</h2><p><b>wait</b>的作用就是让使持有该对象的线程把该对象的<font color="#FF0000">控制权交出去</font>，然后处于<font color="#FF0000">等待状态</font>。这时<font color="#FF0000">其它线程可抢夺控制权</font>。</p>
<font color="#FF0000"><b>注意:一旦它重新获得对象的同步请求，所有之前的请求状态都    会恢复，也就是线程调用wait的地方的状态。线程将会在之前调用wait的地方继续运行下去。 </b></font>

<p><b>另一个会导致线程暂停的方法还有 Thread 类的 sleep 方法，它会导致线程睡眠指定 的毫秒数，但线程在睡眠的过程中是<font color="#FF0000">不会释放掉对象的锁的</font>。</b></p>
<p><b>notify</b>的作用就是<font color="#FF0000">唤醒请求队列中的一个线程</font>，而notifyAll<font color="#FF0000">唤醒的是请求队列中的所有线程</font>。</p>
<font color="#FF0000"><b>注意:被唤醒的线程不会马上运行，除非获取了该Object的锁。也就是说，调用notify的线程，在调用notify后，不会像wait一样，马上阻塞线程的运行。而是继续运行，直到相应的线程调度完成或者让出Object的锁。而被唤醒的线程会在当前线程让出Object锁后，与其他线程以常规的方式竞争对象锁。</b></font>



<p>例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO 自动生成的方法存根</span></div><div class="line">		Sample sample = <span class="keyword">new</span> Sample();</div><div class="line">		Thread t1 = <span class="keyword">new</span> IncreaseThread(sample);</div><div class="line">		Thread t2 = <span class="keyword">new</span> DecreaseThread(sample);</div><div class="line">		Thread t3 = <span class="keyword">new</span> IncreaseThread(sample);</div><div class="line">		Thread t4 = <span class="keyword">new</span> DecreaseThread(sample);</div><div class="line"></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">		t3.start();</div><div class="line">		t4.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> number;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">while</span> (<span class="number">0</span> != number) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				wait();</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		number++;</div><div class="line">		System.out.println(number);</div><div class="line">		notify();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">decrease</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">while</span> (<span class="number">0</span> == number) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				wait();</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		number--;</div><div class="line">		System.out.println(number);</div><div class="line">		notify();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IncreaseThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Sample sample;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">IncreaseThread</span><span class="params">(Sample sample)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.sample = sample;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep((<span class="keyword">long</span>) (Math.random() * <span class="number">1000</span>));</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			sample.increase();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecreaseThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Sample sample;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DecreaseThread</span><span class="params">(Sample sample)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.sample = sample;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep((<span class="keyword">long</span>) (Math.random() * <span class="number">1000</span>));</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			sample.decrease();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果<br><img src="/2017/02/26/Java的线程笔记/t7.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[装饰模式]]></title>
      <url>https://bigbignews.club/2017/02/24/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h2><pre><code>装饰模式 ：动态地将责任附加到对象上.若要扩展功能,装饰者提供了比继承更有弹性的替代方案。
</code></pre><p>装饰模式使用被装饰类的一个子类的实例，把客户端的调用委派到被装饰类，装饰模式的关键在于这种扩展是完全透明的。<br>装饰模式在Java种使用也很广泛，比如我们在重新定义按钮、对话框等时候，实际上已经在使用装饰模式了。装饰模式最浅显的例子是相片-相框的例子。<br><img src="/2017/02/24/装饰模式/z3.jpg" alt="" title="原理图"><br>其中类的职责如下：<br>抽象构件角色（Project）：给出一个接口，以规范准备接收附加责任的对象<br>具体构件角色（Employe）：定义一个将要接收附加责任的类<br>装饰角色（Manager）：持有一个构件对象的实例，并定义一个与抽象构件接口一致的接口<br>具体装饰角色（ManagerA、ManagerB）：负责给构件对象“贴上”附加的责任</p>
<h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><p>装饰模式直接看代码挺难理解的，我通过一个例子来说明。<br>有一家公司是出口眼镜和汽车的，过完年，要开始给海外客户供货了，其中有三位需要汽车大客户分别需要三批不同的车：上了漆的车，上了漆和加尾翼的车，还有加了尾翼的车。还有一位需要眼镜的客户。造车和造眼镜本公司就可以直接制造。而汽车上漆和加尾翼需要委托代工工厂。</p>
<p>新建一个公司老板(Boss.java)——抽象构件角色<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Boss</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeProject</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着造车部门(MakeCar.java)——具体构件角色<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MakeCar</span> <span class="keyword">implements</span> <span class="title">Boss</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeProject</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"造完车"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>造眼镜部门(MakeEyeglass.java)——具体构件角色<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MakeEyeglass</span> <span class="keyword">implements</span> <span class="title">Boss</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeProject</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"造完眼镜"</span>);		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代工工厂(Factory.java)——装饰角色<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">Boss</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> Boss boss;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Factory</span><span class="params">(Boss boss)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.boss=boss;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeProject</span><span class="params">()</span> </span>&#123;</div><div class="line">		boss.makeProject();	</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上漆(MakeCarPush1.java)——具体装饰角色<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MakeCarPush1</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MakeCarPush1</span><span class="params">(Boss boss)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(boss);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeProject</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.makeProject();</div><div class="line">		addColors();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addColors</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"上漆"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>加尾翼(MakeCarPush2)——具体装饰角色<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MakeCarPush2</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MakeCarPush2</span><span class="params">(Boss boss)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(boss);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeProject</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.makeProject();</div><div class="line">		addWing();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWing</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"加尾翼"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现类(Start.java)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Start</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		MakeCarPush1 mc1=<span class="keyword">new</span> MakeCarPush1(<span class="keyword">new</span> Factory(<span class="keyword">new</span> MakeCar()));</div><div class="line">		mc1.makeProject();</div><div class="line">		</div><div class="line">		MakeCarPush2 mc2=<span class="keyword">new</span> MakeCarPush2(<span class="keyword">new</span> MakeCarPush1(<span class="keyword">new</span> Factory(<span class="keyword">new</span> MakeCar())));</div><div class="line">		mc2.makeProject();</div><div class="line">		</div><div class="line">		MakeCarPush2 mc3=<span class="keyword">new</span> MakeCarPush2(<span class="keyword">new</span> Factory(<span class="keyword">new</span> MakeCar()));</div><div class="line">		mc3.makeProject();</div><div class="line">		</div><div class="line">		MakeEyeglass me=<span class="keyword">new</span> MakeEyeglass();</div><div class="line">		me.makeProject();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最终效果<br><img src="/2017/02/24/装饰模式/z1.jpg" alt="" title="最终效果"></p>
]]></content>
      
        
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java的io流笔记]]></title>
      <url>https://bigbignews.club/2017/02/21/Java%E7%9A%84io%E6%B5%81%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>代码只显示关键部分。FileInputStream读取文件(需要事前有文件可读取)，FileOutputStream输出文件(无文件会自动新建)。<br>最外层嵌套DataOutputStream，DataInputStream可支持输入输出java的基本数据类型，详情自己看文档~，最外层的流的关了不再需要关里面。</p>
<h3 id="输入流（InputStream）"><a href="#输入流（InputStream）" class="headerlink" title="输入流（InputStream）"></a>输入流（InputStream）</h3><h4 id="无缓冲"><a href="#无缓冲" class="headerlink" title="无缓冲"></a>无缓冲</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"d:/a.txt"</span>);<span class="comment">//读取文件</span></div><div class="line"><span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">200</span>];<span class="comment">//自定义一个字节数组</span></div><div class="line"><span class="keyword">int</span> length;<span class="comment">//定义一个长度变量。</span></div><div class="line"><span class="keyword">while</span>(-<span class="number">1</span>!=(length=is.read(buffer,<span class="number">0</span>,<span class="number">200</span>)))&#123;</div><div class="line"><span class="comment">//is.read代表每次读的字节长度，当读完后会返回-1，</span></div><div class="line"><span class="comment">//这里的is.read里面三个参数分别为存放的字节数组，读取偏移量，读取长度。</span></div><div class="line"><span class="comment">//注意：读取偏移量+读取长度&lt;=存放的字节数组长度</span></div><div class="line">	</div><div class="line">	String str=<span class="keyword">new</span> String(buffer,<span class="number">0</span>,length);</div><div class="line"><span class="comment">//把字节数组转为字符串</span></div><div class="line"><span class="comment">//三个参数分别为要转的字节数组，读取偏移量，读取长度。</span></div><div class="line">	System.out.println(str);</div><div class="line">&#125;</div><div class="line">is.close();<span class="comment">//关闭输入流</span></div></pre></td></tr></table></figure>
<p>也可以这样<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"d:/a.txt"</span>);<span class="comment">//读取文件</span></div><div class="line"><span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">200</span>];<span class="comment">//自定义一个字节数组</span></div><div class="line"><span class="keyword">int</span> length;<span class="comment">//定义一个长度变量。</span></div><div class="line"></div><div class="line"><span class="comment">//这里是每次读取buffer定义的200字节</span></div><div class="line"><span class="keyword">while</span>(-<span class="number">1</span>!=(length=is.read(buffer)))&#123;</div><div class="line"></div><div class="line">	String str=<span class="keyword">new</span> String(buffer).trim();<span class="comment">//把字节数组转为字符串，同时去掉前后的空格和空字符。</span></div><div class="line">	<span class="comment">//String str=new String(buffer,0,length);使用这个不会出现空字符的现象</span></div><div class="line">	System.out.println(str);</div><div class="line">&#125;</div><div class="line">is.close();<span class="comment">//关闭输入流</span></div></pre></td></tr></table></figure></p>
<h4 id="带缓冲"><a href="#带缓冲" class="headerlink" title="带缓冲"></a>带缓冲</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"d:/a.txt"</span>);</div><div class="line">BufferedInputStream in =<span class="keyword">new</span> BufferedInputStream(is);</div><div class="line"><span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">200</span>];</div><div class="line"><span class="keyword">int</span> length;</div><div class="line">	<span class="keyword">while</span>(-<span class="number">1</span>!=(length=in.read(buffer)))&#123;</div><div class="line">		String str=<span class="keyword">new</span> String(buffer,<span class="number">0</span>,length);</div><div class="line">		System.out.println(str);</div><div class="line">&#125;</div><div class="line">in.close();</div></pre></td></tr></table></figure>
<h3 id="输出流（OutputStream）"><a href="#输出流（OutputStream）" class="headerlink" title="输出流（OutputStream）"></a>输出流（OutputStream）</h3><h4 id="无缓冲-1"><a href="#无缓冲-1" class="headerlink" title="无缓冲"></a>无缓冲</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">OutputStream os=<span class="keyword">new</span> FileOutputStream(<span class="string">"d:/b.txt"</span>,<span class="keyword">true</span>);<span class="comment">//后面加true表示把内容追加到最后，不加就覆盖原来内容。</span></div><div class="line">String str=<span class="string">"hello"</span>;</div><div class="line"><span class="keyword">byte</span>[] buffer=str.getBytes();<span class="comment">//转换为字节数组</span></div><div class="line">os.write(buffer);</div><div class="line">os.close();</div></pre></td></tr></table></figure>
<h4 id="带缓冲-1"><a href="#带缓冲-1" class="headerlink" title="带缓冲"></a>带缓冲</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">OutputStream os=<span class="keyword">new</span> FileOutputStream(<span class="string">"d:/b.txt"</span>);</div><div class="line">BufferedOutputStream bos=<span class="keyword">new</span> BufferedOutputStream(os);</div><div class="line">bos.write(<span class="string">"hello"</span>.getBytes());</div><div class="line"><span class="comment">//bos.flush();强制清空缓冲</span></div><div class="line">bos.close();</div></pre></td></tr></table></figure>
<h3 id="综合使用"><a href="#综合使用" class="headerlink" title="综合使用"></a>综合使用</h3><h4 id="无缓冲-2"><a href="#无缓冲-2" class="headerlink" title="无缓冲"></a>无缓冲</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"d:/a.txt"</span>);</div><div class="line">OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:/b.txt"</span>);</div><div class="line"><span class="keyword">int</span> length;</div><div class="line"><span class="keyword">while</span>(-<span class="number">1</span>!=(length=is.read())) &#123;</div><div class="line">	os.write(length);</div><div class="line">&#125;</div><div class="line">os.close();</div><div class="line">is.close();</div></pre></td></tr></table></figure>
<h4 id="带缓冲-2"><a href="#带缓冲-2" class="headerlink" title="带缓冲"></a>带缓冲</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"d:/a.txt"</span>);</div><div class="line">OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:/b.txt"</span>);</div><div class="line">BufferedInputStream in =<span class="keyword">new</span> BufferedInputStream(is);</div><div class="line">BufferedOutputStream bos=<span class="keyword">new</span> BufferedOutputStream(os);</div><div class="line"><span class="keyword">int</span> length;</div><div class="line"><span class="keyword">while</span>(-<span class="number">1</span>!=(length=in.read())) &#123;</div><div class="line">	bos.write(length);</div><div class="line">&#125;</div><div class="line">bos.close();</div><div class="line">in.close();</div></pre></td></tr></table></figure>
<h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><h3 id="输入流-InputStreamReader-，输出流-OutputStreamWriter"><a href="#输入流-InputStreamReader-，输出流-OutputStreamWriter" class="headerlink" title="输入流(InputStreamReader)，输出流(OutputStreamWriter)"></a>输入流(InputStreamReader)，输出流(OutputStreamWriter)</h3><p>和字节流差不多，就不写那么详细了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//输出流</span></div><div class="line">BufferedWriter bw=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"d:/a.txt"</span>)));</div><div class="line">		bw.write(<span class="string">"fffffffffffff"</span>);</div><div class="line">		bw.write(<span class="string">"\n"</span>);<span class="comment">//windows的记事本换行是\r\n</span></div><div class="line">		bw.write(<span class="string">"aaaaaaaaaaaaaa"</span>);</div><div class="line">		bw.close();</div><div class="line"><span class="comment">//输入流</span></div><div class="line">BufferedReader br=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"d:/a.txt"</span>)));</div><div class="line">		String str;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">null</span>!=(str=br.readLine()))&#123;</div><div class="line">			System.out.println(str);</div><div class="line">		&#125;</div><div class="line">		br.close();</div></pre></td></tr></table></figure></p>
<h3 id="综合使用-1"><a href="#综合使用-1" class="headerlink" title="综合使用"></a>综合使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">BufferedReader br=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"d:/a.txt"</span>)));</div><div class="line">		BufferedWriter bw=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"d:/b.txt"</span>)));</div><div class="line">		String str=br.readLine();</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">null</span>!=str)&#123;</div><div class="line">			bw.write(str);</div><div class="line">			str=br.readLine();</div><div class="line">		&#125;</div><div class="line">		bw.close();</div><div class="line">		br.close();</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>当然实际使用还是要处理异常。finally关闭流。<br><img src="/2017/02/21/Java的io流笔记/face.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用SharedPreferences存储用户名密码]]></title>
      <url>https://bigbignews.club/2017/02/13/%E5%88%A9%E7%94%A8SharedPreferences%E5%AD%98%E5%82%A8%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>这里使用的是Context对象的getSharedPreferences()方法，目前个人感觉Activity对象的getPreferences()方法用处不大，完全可以被前者替代。</p>
<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>区别:<br>调用Context对象的getSharedPreferences()方法获得的SharedPreferences对象可以被同一应用程序下的其他组件共享。<br>调用Activity对象的getPreferences()方法获得的SharedPreferences对象只能在该Activity中使用。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>保存模块<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String userName=<span class="string">"abc"</span>;</div><div class="line">String password=<span class="string">"123"</span>;</div><div class="line">SharePreferences.Editor editor=getSharedPreferences(<span class="string">"date"</span>,Context.MODE_PRIVATE).editor();</div><div class="line">editor.putString(<span class="string">"userName"</span>,userName);</div><div class="line">editor.putString(<span class="string">"password"</span>, password);</div><div class="line">editor.apply();</div></pre></td></tr></table></figure></p>
<p>提取模块<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SharedPreferences pref=getSharedPreferences(<span class="string">"date"</span>, Context.MODE_PRIVATE);</div><div class="line">pref.getString(<span class="string">"userName"</span>,<span class="string">""</span>);<span class="comment">//第二项是默认值</span></div><div class="line"> pref.getString(<span class="string">"password"</span>,<span class="string">""</span>);</div></pre></td></tr></table></figure></p>
<p><img src="/2017/02/13/利用SharedPreferences存储用户名密码/face.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android解析json的方法]]></title>
      <url>https://bigbignews.club/2017/02/12/Android%E8%A7%A3%E6%9E%90json%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>按道理解析json有挺多方法，我之前找到了一个神好用的分享一下。<br><img src="/2017/02/12/Android解析json的方法/face.jpg" alt=""><br>工具：Android studio的gsonformat插件和两个固定工具类</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="安装gsonformat"><a href="#安装gsonformat" class="headerlink" title="安装gsonformat"></a>安装gsonformat</h3><p><img src="/2017/02/12/Android解析json的方法/g1.jpg" alt=""></p>
<h3 id="使用两个工具类"><a href="#使用两个工具类" class="headerlink" title="使用两个工具类"></a>使用两个工具类</h3><p>新建两个工具类<br> Json.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Json</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Json json;</div><div class="line">    Json() &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Json <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (json == <span class="keyword">null</span>) &#123;</div><div class="line">            json = <span class="keyword">new</span> GsonImpl();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> json;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">toJson</span><span class="params">(Object src)</span></span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T&gt; <span class="function">T <span class="title">toObject</span><span class="params">(String json, Class&lt;T&gt; claxx)</span></span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T&gt; <span class="function">T <span class="title">toObject</span><span class="params">(<span class="keyword">byte</span>[] bytes, Class&lt;T&gt; claxx)</span></span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">toList</span><span class="params">(String json, Class&lt;T&gt; claxx)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>GsonImpl.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonImpl</span> <span class="keyword">extends</span> <span class="title">Json</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">(Object src)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> gson.toJson(src);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">toObject</span><span class="params">(String json, Class&lt;T&gt; claxx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> gson.fromJson(json, claxx);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">toObject</span><span class="params">(<span class="keyword">byte</span>[] bytes, Class&lt;T&gt; claxx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> gson.fromJson(<span class="keyword">new</span> String(bytes), claxx);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">toList</span><span class="params">(String json, Class&lt;T&gt; claxx)</span> </span>&#123;</div><div class="line">          Type type = <span class="keyword">new</span> TypeToken&lt;ArrayList&lt;T&gt;&gt;() &#123;&#125;.getType();  </div><div class="line">             List&lt;T&gt; list = gson.fromJson(json, type);  </div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>自定义个javaBean类(无需写任何内容)<br>复制你要解析的json<br>然后alt+insert弹出如下界面(或者在你的javaBean类代码区域右键选择Generate)<br><img src="/2017/02/12/Android解析json的方法/g2.jpg" alt=""><br>把要解析的json放到输入框点击ok即可(注意json格式要标准)<br><img src="/2017/02/12/Android解析json的方法/g3.jpg" alt=""><br>javaBean类会生成相应的javabean<br>最后只需一句代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JavaBean bean =GsonImpl.get().toObject(json,JavaBean.class); <span class="comment">//json为你要解析的json格式为String</span></div></pre></td></tr></table></figure></p>
<p>最后只要用javabean的get方法取出来即可，例如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bean.getHeWeatherdataservice().get(<span class="number">0</span>).getBasic().getCity();</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[全局获得Context的方法]]></title>
      <url>https://bigbignews.club/2017/02/12/%E5%85%A8%E5%B1%80%E8%8E%B7%E5%BE%97Context%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>首先创建一个类继承Application<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Context context;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span></span>&#123;</div><div class="line">		context=getApplicationContext();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Context <span class="title">getContext</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> context;</div><div class="line">	&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在AndroidManifest.xml的 &lt; application&gt;标签指定即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.cczhr.mydemo"</span> &gt;</div><div class="line">		   <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">				<span class="attr">...</span></div><div class="line">				<span class="attr">...</span></div><div class="line">				<span class="attr">android:name</span>=<span class="string">"com.cczhr.mydemo.MyApplication"</span>&gt;</div><div class="line">		   <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>以后需要传入Context只需要写上即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MyApplication.getContext();</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的RecyclerView]]></title>
      <url>https://bigbignews.club/2017/02/05/Android%E7%9A%84RecyclerView/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="/2017/02/05/Android的RecyclerView/r2.jpg" alt=""></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>输入recyclerview，添加com.android.support:recyclerview-v7的依赖，冒号后面为版本号。<br><img src="/2017/02/05/Android的RecyclerView/r1.jpg" alt=""><br>在activity_main.xml添加RecyclerView这里是填满整个屏幕<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/recycler_view"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>接着新建fruit_item.xml用来自定义布局<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fruit_image"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fruit_name"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong><font color="red">概念：RecyclerView的任务就是回收和定位屏幕上的View。但View上要能够显示数据还    离不开Adapter和ViewHolder这两个类。 Adapter负责任务有：1.创建必要的ViewHolder； 2.绑定ViewHolder到模型层数据。而ViewHolder只做一件事，就是放View视图的组件。<br></font></strong></p>
<p>创建Adapter，首先要定义RecyclerView.Adapter,然后由他封装获取的数据。<br>RecyclerView要视图时，就会去找它的Adapter：<br>1）先调用Adapter的getItemCount()方法，询问数组列表中的对象数量。<br>2）RecyclerView调用adapter的createViewHolder(ViewGroup,int)方法创建ViewHolder以及ViewHolder要显示的视图。<br>3）RecyclerView会传入ViewHolder及其位置，调用onBindViewHolder(ViewGroup,int)方法。adapter会找到目标位置的数据并且绑定到ViewHolder视图上。绑定就是使用模型数据填充视图。<br>三个过程ok后，RecyclerView就能在屏幕上显示View了，另外createViewHolder以及onBindViewHolder使用并并不频繁。创建了够用的ViewHolder就停止调用了。然后会自动回收旧的ViewHolder来节约时间和节省内存。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">FruitAdapter</span>.<span class="title">ViewHolder</span>&gt;</span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; mFruitList;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        ImageView fruitImage;</div><div class="line">        TextView fruitName;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            fruitImage = (ImageView) itemView.findViewById(R.id.fruit_image);</div><div class="line">            fruitName = (TextView) itemView.findViewById(R.id.fruit_name);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FruitAdapter</span><span class="params">(List&lt;Fruit&gt; fruitList)</span></span>&#123;</div><div class="line">        mFruitList=fruitList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">       View view= LayoutInflater.from(parent.getContext()).inflate(R.layout.fruit_item,parent,<span class="keyword">false</span>);</div><div class="line">        ViewHolder holder=<span class="keyword">new</span> ViewHolder(view);</div><div class="line">        <span class="keyword">return</span> holder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        Fruit fruit=mFruitList.get(position);</div><div class="line">        holder.fruitImage.setImageResource(fruit.getImageId());</div><div class="line">        holder.fruitName.setText(fruit.getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mFruitList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着在MainActivity定义一个数组,并加入数据，为了能体验到滑动列表的效果这里使用了一个for循环添加两次数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFruits</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">            Fruit apple = <span class="keyword">new</span> Fruit((<span class="string">"Apple"</span>), R.drawable.apple_pic);</div><div class="line">            fruitList.add(apple);</div><div class="line">            Fruit banana = <span class="keyword">new</span> Fruit((<span class="string">"Banana"</span>), R.drawable.banana_pic);</div><div class="line">            fruitList.add(banana);</div><div class="line">            Fruit orange = <span class="keyword">new</span> Fruit((<span class="string">"Orange"</span>), R.drawable.orange_pic);</div><div class="line">            fruitList.add(orange);</div><div class="line">            Fruit watermelon = <span class="keyword">new</span> Fruit((<span class="string">"Watermelon"</span>), R.drawable.watermelon_pic);</div><div class="line">            fruitList.add(watermelon);</div><div class="line">            Fruit pear = <span class="keyword">new</span> Fruit((<span class="string">"Pear"</span>), R.drawable.pear_pic);</div><div class="line">            fruitList.add(pear);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Fruit .java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> imageId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(String name, <span class="keyword">int</span> imageId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.imageId = imageId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImageId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> imageId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>图片资源<br><img src="/2017/02/05/Android的RecyclerView/r3.jpg" alt=""></p>
<p>在onCreate方法中首先initFruits();初始化数据，为列表使用LinearLayout布局，把数据传进adapter，最后把adapter传进recyclerView即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">       ...</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initFruits();</div><div class="line">        RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);</div><div class="line">        LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">        recyclerView.setLayoutManager(layoutManager);</div><div class="line">        FruitAdapter adapter = <span class="keyword">new</span> FruitAdapter(fruitList);</div><div class="line">        recyclerView.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFruits</span><span class="params">()</span> </span>&#123;</div><div class="line">      ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="添加点击事件"><a href="#添加点击事件" class="headerlink" title="添加点击事件"></a>添加点击事件</h2><p>若要在水果图片添加点击事件只需要再onCreateViewHolder()方法中添加即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">holder.fruitImage.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> position = holder.getAdapterPosition();</div><div class="line">                Fruit fruit = mFruitList.get(position);</div><div class="line">                Toast.makeText(v.getContext(), <span class="string">"you clicked image "</span> + fruit.getName(), Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android通知栏的微技巧(转)]]></title>
      <url>https://bigbignews.club/2017/02/04/Android%E9%80%9A%E7%9F%A5%E6%A0%8F%E7%9A%84%E5%BE%AE%E6%8A%80%E5%B7%A7-%E8%BD%AC/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="/2017/02/04/Android通知栏的微技巧-转/Android通知栏.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简易翻墙的方法]]></title>
      <url>https://bigbignews.club/2017/02/01/%E7%AE%80%E6%98%93%E7%BF%BB%E5%A2%99%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><pre><code>Github是个好地方
</code></pre><h3 id="方法一-dowsDNS"><a href="#方法一-dowsDNS" class="headerlink" title="方法一 dowsDNS"></a>方法一 dowsDNS</h3><p>最近找到一个效果挺不错的一个翻墙软件<a href="https://github.com/LitePalFramework/LitePal" target="_blank" rel="external"><em>dowsDNS</em></a>。是Github里面的一个开源项目。<br>官方说明如下<br><img src="/2017/02/01/简易翻墙的方法/使用方法.jpg" alt=""><br>官方下载地址（自动设置dns和恢复dns在win10无效）：<br><a href="https://github.com/dowsnature/dowsDNS/releases/latest/" target="_blank" rel="external">https://github.com/dowsnature/dowsDNS/releases/latest/</a><br><img src="/2017/02/01/简易翻墙的方法/f1.jpg" alt=""><br>我的修改版下载地址（可以直接显示本机ip地址）<br>(推荐)：<a href="https://drive.wps.cn/view/l/d42455cf74034a5e83e9f958bf24ab3c" target="_blank" rel="external">https://drive.wps.cn/view/l/d42455cf74034a5e83e9f958bf24ab3c</a><br><img src="/2017/02/01/简易翻墙的方法/f2.jpg" alt=""></p>
<h3 id="安卓手机使用方法"><a href="#安卓手机使用方法" class="headerlink" title="安卓手机使用方法"></a>安卓手机使用方法</h3><p>其实和局域网电脑翻墙的的操作是一样的修改dns，不过需要用一个app改dns。<br>Pure DNS app下载地址  <a href="https://drive.wps.cn/view/l/6d8384baa0684f77ab8e77c913356478" target="_blank" rel="external">https://drive.wps.cn/view/l/6d8384baa0684f77ab8e77c913356478</a></p>
<h3 id="苹果手机使用方法"><a href="#苹果手机使用方法" class="headerlink" title="苹果手机使用方法"></a>苹果手机使用方法</h3><p>苹果手机更简单了，直接wifi选项修改dns即可。</p>
<h3 id="注意：只支持https加密的网站"><a href="#注意：只支持https加密的网站" class="headerlink" title="注意：只支持https加密的网站"></a>注意：只支持https加密的网站</h3><p>  例如 <a href="https://twitter.com/" target="_blank" rel="external">https://twitter.com/</a><br>（不过你需要的绝大部分外国网站都支持https，google，youtube，Twitter，Instagram等等都有采用https的）</p>
<h3 id="方法二-puredns（推荐）"><a href="#方法二-puredns（推荐）" class="headerlink" title="方法二 puredns（推荐）"></a>方法二 puredns（推荐）</h3><p>这个更加简单了 直接看说明就好，直接修改dns即可，苹果用户也支持，缺点也是一样的，只支持https加密的网站。<br><a href="http://puredns.cn/" target="_blank" rel="external">http://puredns.cn/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 翻墙 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单例模式]]></title>
      <url>https://bigbignews.club/2017/01/27/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><pre><code>　单例模式有以下特点：
    1、单例类只能有一个实例。
    2、单例类必须自己创建自己的唯一实例。
    3、单例类必须给所有其他对象提供这一实例。
单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。
</code></pre><p>为什么单例模式可以确保只有一个实例呢,分析以下代码可得，创建了一个private Singleton1()构造方法不能被外部访问，避免了外部实例化new一个 Singleton1类，Singleton1 getInstance()选择 static 是为了能在外部不实例化的的时候使用这个方法，<br>最后用户只能有一个Singleton1对象实例化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//饿汉式单例类.在类初始化时，已经自行实例化   </span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 单例 </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Singleton1 s1=Singleton1.getInstance();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton1 single = <span class="keyword">new</span> Singleton1();  </div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> single;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java泛型笔记]]></title>
      <url>https://bigbignews.club/2017/01/26/Java%E6%B3%9B%E5%9E%8B%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Notepad</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;		<span class="comment">// 此处指定了两个泛型类型</span></div><div class="line">	<span class="keyword">private</span> K key ;		<span class="comment">// 此变量的类型由外部决定</span></div><div class="line">	<span class="keyword">private</span> V value ;	<span class="comment">// 此变量的类型由外部决定</span></div><div class="line">	<span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.key ;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.value ;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(K key)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.key = key ;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(V value)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.value = value ;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericsDemo01</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">		Notepad&lt;String,Integer&gt; t = <span class="keyword">null</span> ;		<span class="comment">// 定义两个泛型类型的对象</span></div><div class="line">		t = <span class="keyword">new</span> Notepad&lt;String,Integer&gt;() ;		<span class="comment">// 里面的key为String，value为Integer</span></div><div class="line">		t.setKey(<span class="string">"Not Found"</span>) ;		<span class="comment">// 设置第一个内容</span></div><div class="line">		t.setValue(<span class="number">18</span>) ;			<span class="comment">// 设置第二个内容</span></div><div class="line">		System.out.print(<span class="string">"姓名；"</span> + t.getKey()) ;		<span class="comment">// 取得信息</span></div><div class="line">		System.out.print(<span class="string">"，年龄；"</span> + t.getValue()) ;		<span class="comment">// 取得信息</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的数据库]]></title>
      <url>https://bigbignews.club/2017/01/24/Android%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="LitePal"><a href="#LitePal" class="headerlink" title="LitePal"></a>LitePal</h1><p>熟悉Android的人都知道Android自带了一个SQLite数据库Android也给了一些api来操作它，不过有一个更好用的API就是<a href="https://github.com/LitePalFramework/LitePal" target="_blank" rel="external"><em>LitePal</em></a>。</p>
<pre><code>LitePal是一款开源的Android数据库框架，采用了对象关系映射(ORM)的模式，将平时开发时最常用的一些数据库功能进行了封装，使得开发者不用编写一行SQL语句就可以完成各种建表、増删改查的操作。并且LitePal很“轻”，jar包大小不到100k，而且近乎零配置，这一点和Hibernate这类的框架有很大区别。目前LitePal的源码已经托管到了GitHub上。
</code></pre><h2 id="LitePal的配置"><a href="#LitePal的配置" class="headerlink" title="LitePal的配置"></a>LitePal的配置</h2><p>配置LitePal很简单，打开<a href="https://github.com/LitePalFramework/LitePal" target="_blank" rel="external"><em>LitePal</em></a>找到下图的地方。<br><img src="/2017/01/24/Android的数据库/l1.jpg" alt=""><br>把下面代码复制到Android项目的app/build.gradle的dependencies{}里面即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'org.litepal.android:core:1.4.1'</span></div></pre></td></tr></table></figure></p>
<p>其中1.4.1代表版本号，想要最新的版本号去打开<a href="https://github.com/LitePalFramework/LitePal" target="_blank" rel="external"><em>LitePal</em></a>找即可。<br>然后点击Sync Now，即可成功引入Jar包。<br><img src="/2017/01/24/Android的数据库/sync.jpg" alt=""><br>接下来配置litepal.xml文件，在app/src/main目录下新建assets文件夹，在assets文件夹中新建litepal.xml文件输入以下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- dbname value为数据库名，version value为版本号  &lt;list&gt;主要用来映射模型 --&gt;</span> </div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">litepal</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">"BookStore"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>为了方便LitePal获得Context对象最后还要修改AndroidManifest.xml，在&lt; application&gt;标签<br>中加入android:name=”org.litepal.LitePalApplication”</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"org.litepal.LitePalApplication"</span></div><div class="line">        <span class="attr">...</span></div><div class="line">    &gt;</div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然也可以在直接用 LitePal.initialize(Context);方法传递Context以便LitePal能正常运行。</p>
<h2 id="LitePal创建数据库和表的建立更新与删除"><a href="#LitePal创建数据库和表的建立更新与删除" class="headerlink" title="LitePal创建数据库和表的建立更新与删除"></a>LitePal创建数据库和表的建立更新与删除</h2><p>LitePal的建立表很简单，想要新建一个Book表就新建定义一个Book类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//继承DataSupport是为了能够 crud（增删改查），本身创建数据库和表是可以不用继承也能创建成功的</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">extends</span> <span class="title">DataSupport</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String author;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pages;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> author;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.author = author;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> price;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.price = price;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPages</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> pages;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPages</span><span class="params">(<span class="keyword">int</span> pages)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pages = pages;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很明显这是一个javabean，在Book表里面定义了id，author，price，pages，name字段，并生成setter和getter方法。<br>接下来需要把Book类映射模型列表当中，修改litepal.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- dbname value为数据库名，version value为版本号  &lt;list&gt;主要用来映射模型 --&gt;</span> </div><div class="line"><span class="comment">&lt;!--&lt;mapping&gt;标签需要完整类名--&gt;</span></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">litepal</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">"BookStore"</span> /&gt;</span></div><div class="line">     ...</div><div class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.app.cczhr.litepaldemo.Book"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>最后只要任意进行一次数据库的操作，Bookstore.db即可自动创建完毕。这里我使用的是 Connector.getDatabase();方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Connector.getDatabase();</div></pre></td></tr></table></figure></p>
<p>如果要新建多一个表只需要重复之前的动作即可，若要修改已生成的表字段只需要修改你要改的表的类，若要删除表就把相关代码删除。<br>做完所有的更改操作后最后在&lt; litepal&gt;标签下的  &lt; version value=”1” /&gt;里面的版本号加1即可。</p>
<pre><code>注意：id字段在LitePal为默认自增主键，类型只能为int。
</code></pre><h2 id="LitePal添加数据"><a href="#LitePal添加数据" class="headerlink" title="LitePal添加数据"></a>LitePal添加数据</h2><h3 id="LitePal添加数据（初级）"><a href="#LitePal添加数据（初级）" class="headerlink" title="LitePal添加数据（初级）"></a>LitePal添加数据（初级）</h3><p>LitePal添加数据（初级）很简单,用Book类的各种set方法对数据设置，最后使用save方法保存即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Book book=<span class="keyword">new</span> Book();</div><div class="line">book.setName(<span class="string">"新华字典"</span>);</div><div class="line">book.setAuthor(<span class="string">"新华出版社"</span>);</div><div class="line">book.setPages(<span class="number">666</span>);</div><div class="line">book.setPrice(<span class="number">16.66</span>);</div><div class="line">book.save();</div></pre></td></tr></table></figure></p>
<h3 id="LitePal添加数据（进阶）"><a href="#LitePal添加数据（进阶）" class="headerlink" title="LitePal添加数据（进阶）"></a>LitePal添加数据（进阶）</h3><p>看完剩下的，你就会进阶玩法了。<br><img src="/2017/01/24/Android的数据库/hj.jpg" alt=""></p>
<h2 id="LitePal更新数据"><a href="#LitePal更新数据" class="headerlink" title="LitePal更新数据"></a>LitePal更新数据</h2><p>LitePal更新数据，可以看到new了一个Book，然后直接set要修改的值，最后使用updateAll方法指定更新的条件，这里指定的是name =”新华字典” 同时 author =”新华出版社”的数据，若updateAll里面什么都不填则是修改全部的pages字段。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Book book=<span class="keyword">new</span> Book();</div><div class="line">book.setPages(<span class="number">233</span>);</div><div class="line">book.updateAll(<span class="string">"name = ? and author = ?"</span>,<span class="string">"新华字典"</span>,<span class="string">"新华出版社"</span>);</div></pre></td></tr></table></figure></p>
<pre><code>注意，若你想把pages改为默认值0是不能直接book.setPages(0);的，
LitePal提供了改默认值的setToDefault方法，如以下代码。
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Book book=<span class="keyword">new</span> Book();</div><div class="line">book.setToDefault(<span class="string">"pages"</span>);<span class="comment">//填入要修改的字段名</span></div><div class="line">book.updateAll(<span class="string">"name = ? and author = ?"</span>,<span class="string">"新华字典"</span>,<span class="string">"新华出版社"</span>);</div></pre></td></tr></table></figure>
<h2 id="LitePal删除数据"><a href="#LitePal删除数据" class="headerlink" title="LitePal删除数据"></a>LitePal删除数据</h2><p>LitePal删除数据和更新数据差不多,这里表示删除book表里面price&gt;15的数据。<br>若deleteAll不填条件则是删除book表全部的内容。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DataSupport.deleteAll(Book.class,<span class="string">"price &gt; ?"</span>,<span class="string">"15"</span>);</div></pre></td></tr></table></figure></p>
<h2 id="LitePal查询数据"><a href="#LitePal查询数据" class="headerlink" title="LitePal查询数据"></a>LitePal查询数据</h2><p> 返回全部结果<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">LIst&lt;book&gt; books=DataSupport.findAll(book.class);</div><div class="line"><span class="keyword">for</span>(Book book : books)&#123;</div><div class="line">	book.getName();</div><div class="line">	....</div><div class="line">	book.getPrice();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>较复杂的查询操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">LIst&lt;book&gt; books=DataSupport.select(<span class="string">"name"</span>,<span class="string">"author"</span>,<span class="string">"pages"</span>)<span class="comment">//表示选取"name","author","pages"这三种数据</span></div><div class="line">                            .where(<span class="string">"pages&gt;?"</span>,<span class="string">"400"</span>)<span class="comment">//表示其中”pages“要大于400</span></div><div class="line">                            .order(<span class="string">"pages desc"</span>)<span class="comment">//表示按页数降序排列，去掉desc为降序</span></div><div class="line">                            .limit(<span class="number">10</span>)<span class="comment">//表示查询数量</span></div><div class="line">                            .offset(<span class="number">10</span>)<span class="comment">//表示偏移量，即从11条开始</span></div><div class="line">                            .findAll(book.class);</div></pre></td></tr></table></figure></p>
<h2 id="LitePal使用原生的方法查询数据"><a href="#LitePal使用原生的方法查询数据" class="headerlink" title="LitePal使用原生的方法查询数据"></a>LitePal使用原生的方法查询数据</h2><p>LitePal同时也支持原生的查询数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Cursor c=DataSupport.findBySQL(<span class="string">"select name from book where pages &gt;? and price &lt; ?"</span>,<span class="string">"50"</span>,<span class="string">"100"</span>);</div><div class="line"><span class="keyword">if</span>(c.moveToFirst())&#123;</div><div class="line">	do&#123;</div><div class="line">		String name=c.getString(c.getColumnIndex(<span class="string">"name"</span>));</div><div class="line">	&#125;<span class="keyword">while</span> (c.moveToNext);</div><div class="line">&#125;</div><div class="line">c.close();</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于京东抢优惠券的思考]]></title>
      <url>https://bigbignews.club/2017/01/16/%E5%85%B3%E4%BA%8E%E4%BA%AC%E4%B8%9C%E6%8A%A2%E4%BC%98%E6%83%A0%E5%88%B8%E7%9A%84%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><pre><code>又到了每个月买一次猫砂的日子了。
</code></pre><p>  作为一名贤惠的好男人通常打开京东选好猫砂下单前都会看看有没有优惠券可以拿，看到100-5的果断拿了。然后看到了三星某笔记本只要1块钱的优惠券。<br><img src="/2017/01/16/关于京东抢优惠券的思考/jd1.jpg" alt=""></p>
<pre><code>说实话当时我的内心是毫无波动的
</code></pre><p>  于是我凭直觉的打开了手机浏览器版的京东和电脑版的京东。<br>  <img src="/2017/01/16/关于京东抢优惠券的思考/jd2.jpg" alt=""><br>  <img src="/2017/01/16/关于京东抢优惠券的思考/jd3.jpg" alt=""><br>  <img src="/2017/01/16/关于京东抢优惠券的思考/jd4.jpg" alt=""></p>
<pre><code>发现只有手机版的才有显示
</code></pre><p>  看到后我内心泛起一个小波浪，于是才有以下内容。<br>  抓起优惠券列表内容的包<br>  <img src="/2017/01/16/关于京东抢优惠券的思考/jd5.jpg" alt=""><br>  拿了一个休闲食品的优惠券再抓包</p>
<pre><code>以下链接为了方便查看经过了UrlDecode解码
</code></pre><p>   <img src="/2017/01/16/关于京东抢优惠券的思考/jd6_1.jpg" alt=""><br>   二次打开是这样的<br>   <img src="/2017/01/16/关于京东抢优惠券的思考/jd8.jpg" alt=""></p>
<pre><code>yep
</code></pre><p>  领取成功还会post一个这个<br>   <img src="/2017/01/16/关于京东抢优惠券的思考/jd9.jpg" alt=""><br>    二次打开是这样的<br>    <img src="/2017/01/16/关于京东抢优惠券的思考/jd11.jpg" alt=""><br>    截取一下精华<br>    <img src="/2017/01/16/关于京东抢优惠券的思考/jd6_2.jpg" alt=""><br>    <img src="/2017/01/16/关于京东抢优惠券的思考/jd7.jpg" alt=""></p>
<pre><code>&quot;key&quot; &quot;roleId&quot; &quot;batchId&quot;是我们可以提前知道的东西
</code></pre><p>   然而“sign”这玩意像一把钥匙，每次请求都有所改变，果然走到保险箱没有钥匙很尴尬。<br>   <img src="/2017/01/16/关于京东抢优惠券的思考/jd233.jpg" alt=""><br>   研究到此结束。<br>   毕竟还是too young too naive。<br>   当然优惠券列表的json数据里面”batchCount”代表了优惠券的总数，还是有点用处的。<br>   <img src="/2017/01/16/关于京东抢优惠券的思考/jd12.png" alt=""></p>
<pre><code>当然实现一步抢票有很多种思路，这只是其中一种方法而已。
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 京东 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为什么静态方法不能直接访问非静态成员？(转)]]></title>
      <url>https://bigbignews.club/2017/01/13/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E4%B8%8D%E8%83%BD%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E9%9D%9E%E9%9D%99%E6%80%81%E6%88%90%E5%91%98/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><code>最近对单例模型有点理解不能，决定复习一下static关键字的含义~
网上看到一篇写的不错的当然mark一下啦。</code><br>static成员是在JVM的CLASSLOADER加载类的时候初始化的，而非static的成员是在创建对象，即new 操作的时候才初始化的；类加载的时候初始化static的成员，此时static 已经分配内存空间，所以可以访问；非static的成员还没有通过new创建对象而进行初始化，所以必然不可以访问。<br>简单点说：静态成员属于类,不需要生成对象就存在了.而非静态需要生成对象才产生，所以静态成员不能直接访问.<br>下面说说静态的特点：<br>     1.随着类的加载而加载——静态会随着类的消失而消失，说明静态的生命周期最长<br>     2.优先于对象的存在——静态是先存在的，对象是后存在的<br>     3.被所有对象共享<br>    4.可以直接被类名多调用</p>
<p>静态的使用注意事项：<br>1.静态方法只能访问静态成员（包括成员变量和成员方法）<br>   非静态方法可以访问静态也可以访问非静态<br>2.静态方法中不可以定义this，super关键字<br>   因为 一个类中，一个static变量只会有一个内存空间，虽然有多个类实例，但这些类实例中的这个static变量会共享同一个内存空间。静态方法在优先于对象存在，所以静态方法中不可以出现this，super关键字。<br>3.主函数是静态的。</p>
<p>静态的利弊：<br>   利：对 对象的共享数据进行单独空间的存储，节省空间，没有必要每一个对象中都存储一份，可以直接被类名所调用<br>   弊：生命周期过长，访问出现局限性（只能访问静态）</p>
<p>实例变量和类变量（static声明的变量）的区别：<br>1.存放位置<br>类变量随着类的加载存在于方法区中，实例变量随着对象的建立存在于堆内存里<br>2.生命周期<br>类变量生命周期最长，随着“类”的加载而加载，随着类的消失而消失<br>实例变量随着“对象”的消失而消失</p>
]]></content>
      
        
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android传递简单数据的方法]]></title>
      <url>https://bigbignews.club/2017/01/12/Android%E4%BC%A0%E9%80%92%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>目录</p>
<ol>
<li>Activity之间传递数据<ol>
<li><a href="#1-1"><em>FirstAty传输给SecondAty</em></a></li>
<li><a href="#1-2"><em>SecondAty关闭后返回的数据给FirstAty</em></a></li>
</ol>
</li>
<li>Fragment之间的数据传递</li>
<li>Activity与Fragment之间的数据传递<br><span id="1-1"></span><h2 id="Activity之间传递数据"><a href="#Activity之间传递数据" class="headerlink" title="Activity之间传递数据"></a>Activity之间传递数据</h2><h3 id="FirstAty传输给SecondAty"><a href="#FirstAty传输给SecondAty" class="headerlink" title="(FirstAty传输给SecondAty)"></a>(FirstAty传输给SecondAty)</h3><h4 id="传单一数据-主要用到Intent-putExtra-方法也可以用传数据包来实现"><a href="#传单一数据-主要用到Intent-putExtra-方法也可以用传数据包来实现" class="headerlink" title="传单一数据(主要用到Intent.putExtra()方法也可以用传数据包来实现  )"></a>传单一数据(主要用到Intent.putExtra()方法<a href="#jump"><em>也可以用传数据包来实现</em></a>  )</h4>下面是FirstAty.java所需要的代码<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent i =<span class="keyword">new</span> Intent(FirstAty.class,SecondAty.class);</div><div class="line">i.putExtra(<span class="string">"data"</span>,<span class="string">"Hi~"</span>);<span class="comment">//putExtra("A",B)中，AB为键值对，第一个参数为键名，第二个参数为键对应的值。</span></div><div class="line">startActivity(i);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>putExtra可以传递的包括基本数据类型（含基本数据类型的数组）、String(包含数组)、Parcelable（包含数组）、Serializable、Bundle、CharSequence、Intent几种类型的数据。</p>
<p>下面是SecondAty.java所需要的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent i =getIntent();</div><div class="line">String data=i.getStringExtra(<span class="string">"data"</span>);<span class="comment">//此处用新建一个字符串data保存获得的数据</span></div></pre></td></tr></table></figure></p>
<p><span id="jump"></span></p>
<h4 id="传数据包-主要用到Bundle类"><a href="#传数据包-主要用到Bundle类" class="headerlink" title="传数据包(主要用到Bundle类)"></a>传数据包(主要用到Bundle类)</h4><p>下面是FirstAty.java所需要的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   Bundle b = <span class="keyword">new</span> Bundle();   <span class="comment">//新建一个bundle类</span></div><div class="line">Intent i =<span class="keyword">new</span> Intent(FirstAty.class,SecondAty.class);</div><div class="line">b.putString(<span class="string">"name"</span>,<span class="string">"张三"</span>)；</div><div class="line">b.putInt(<span class="string">"age"</span>,<span class="number">100</span>);</div><div class="line">i.putExtras(b);</div></pre></td></tr></table></figure></p>
<p>下面是SecondAty.java所需要的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent i =getIntent();</div><div class="line">Bundle b =i.getExtras();</div><div class="line">   String name=b.getString(<span class="string">"name"</span>);<span class="comment">//获取数据</span></div><div class="line"><span class="keyword">int</span> age=b.getInt(<span class="string">"age"</span>)</div></pre></td></tr></table></figure></p>
<p><span id="1-2"></span></p>
<h3 id="SecondAty关闭后返回的数据给FirstAty"><a href="#SecondAty关闭后返回的数据给FirstAty" class="headerlink" title="(SecondAty关闭后返回的数据给FirstAty)"></a>(SecondAty关闭后返回的数据给FirstAty)</h3><p>下面是FirstAty.java所需要的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">   Intent i = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, TheAty.class);</div><div class="line"> 	startActivityForResult(i, <span class="number">2</span>);<span class="comment">//第二个参数为请求码，可以根据自己需求编号  </span></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">       <span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="comment">//只能得到requestCode(请求码):2  ;resultCode(结果码):默认 0; </span></div><div class="line">       &#125;</div><div class="line">       <span class="keyword">else</span>&#123;</div><div class="line">           String name =data.getStringExtra(<span class="string">"name"</span>);</div><div class="line">		<span class="keyword">int</span> age=data.getIntExtra(<span class="string">"age"</span>，<span class="number">0</span>);<span class="comment">//第二个参数是默认值</span></div><div class="line">		<span class="keyword">int</span> resultcode=resultCode;<span class="comment">//结果码</span></div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>  下面是SecondAty.java所需要的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Bundle b = <span class="keyword">new</span> Bundle();   <span class="comment">//新建一个bundle类</span></div><div class="line">Intent i =<span class="keyword">new</span> Intent();</div><div class="line">b.putString(<span class="string">"name"</span>,<span class="string">"张三"</span>)；</div><div class="line">b.putInt(<span class="string">"age"</span>,<span class="number">100</span>);</div><div class="line">i.putExtras(b);</div><div class="line">setResult(<span class="number">1</span>,i);<span class="comment">//第一个参数为结果码</span></div></pre></td></tr></table></figure></p>
<p><span id="2"></span></p>
<h2 id="Fragment的数据传递"><a href="#Fragment的数据传递" class="headerlink" title="Fragment的数据传递"></a>Fragment的数据传递</h2><h3 id="Fragment1传输给Fragment2-主要用到setArguments方法"><a href="#Fragment1传输给Fragment2-主要用到setArguments方法" class="headerlink" title="(Fragment1传输给Fragment2(主要用到setArguments方法))"></a>(Fragment1传输给Fragment2(主要用到setArguments方法))</h3><p>下面是Fragment1.java所需要的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">View rootView = inflater.inflate(R.layout.fragment1_main, container, <span class="keyword">false</span>);</div><div class="line">Fragment2 fragment2 = <span class="keyword">new</span> Fragment2();</div><div class="line">Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">bundle.putString(<span class="string">"name"</span>, <span class="string">"张三"</span>);</div><div class="line">fragment2.setArguments(bundle);</div><div class="line"></div><div class="line">FragmentManager fm = getFragmentManager();</div><div class="line">FragmentTransaction transaction = fm.beginTransaction();</div><div class="line">transaction.addToBackStack(<span class="keyword">null</span>);</div><div class="line">transaction.add(R.id.content,fragment2);</div><div class="line">transaction.hide(Fragment1.<span class="keyword">this</span>);</div><div class="line">transaction.commit();</div></pre></td></tr></table></figure></p>
<p>下面是Fragment2.java所需要的代码<br>一般在Fragment2的onAttach生命周期里面去接收。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Bundle arguments = getArguments();</div><div class="line">String name = arguments.getString(<span class="string">"name"</span>);</div></pre></td></tr></table></figure></p>
<h3 id="Fragment2返回传输给Fragment1-未完待续"><a href="#Fragment2返回传输给Fragment1-未完待续" class="headerlink" title="(Fragment2返回传输给Fragment1(未完待续~))"></a>(Fragment2返回传输给Fragment1(未完待续~))</h3>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[总结]]></title>
      <url>https://bigbignews.club/2017/01/08/%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><pre><code>看到了年龄和我差不多的大神已经能够独立开发自己的应用了，我也羡慕他们。
加油吧。
新年快乐。
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[弄个大新闻]]></title>
      <url>https://bigbignews.club/2017/01/07/%E5%BC%84%E4%B8%AA%E5%A4%A7%E6%96%B0%E9%97%BB/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>获得了 <a href="http://bignews.me" target="_blank" rel="external">大新闻</a> </p>
]]></content>
      
        
        <tags>
            
            <tag> 大新闻 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[markdown语法]]></title>
      <url>https://bigbignews.club/2017/01/06/markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="/2017/01/06/markdown语法/yufa.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[好久不见]]></title>
      <url>https://bigbignews.club/2017/01/06/%E5%A5%BD%E4%B9%85%E4%B8%8D%E8%A7%81/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="czh"><a href="#czh" class="headerlink" title="czh"></a>czh</h2><p>以后在这里更新<br>测试<br><img src="/2017/01/06/好久不见/img/1.jpg" alt="一张图片"></p>
<p>  <img src="http://www.baidu.com/img/bdlogo.gif" alt="baidu" title="百度logo"></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://bigbignews.club/2016/10/29/hello-world/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
