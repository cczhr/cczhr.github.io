<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[代理模式]]></title>
      <url>http://yoursite.com/2017/07/16/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>1.Subject(抽象主题类):<br>抽象类或者接口，主要负责<font color="#FF0000">声明真实主题和代理的共同接口方法</font>。<br>2.RealSubject(真实主题类):<br>也叫被委托类或被代理类，继承抽象主题类或是实现抽象主题类接口，负责<font color="#FF0000">定义抽象主题类声明的方法的具体内容</font>。<br>3.ProxySubject(代理类):<br>也叫委托类或代理类，继承抽象主题类或是实现抽象主题类接口，该类有一个对真实主题的引用，负责<font color="#FF0000">在实现的方法中直接调用真实主题类的方法</font>。<br>4.Client:客户类:<br>即<font color="#FF0000">使用代理的类</font>。</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>Subject(抽象主题类):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">outPut</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>RealSubject(真实主题类):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outPut</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"这就是静态代理"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ProxySubject(代理类):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxySubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Subject mSubject;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ProxySubject</span><span class="params">(Subject subject)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.mSubject=subject;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outPut</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		mSubject.outPut();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Client:客户类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Subject realSubject=<span class="keyword">new</span> RealSubject();</div><div class="line">		Subject proxySubject=<span class="keyword">new</span> ProxySubject(realSubject);</div><div class="line">		proxySubject.outPut();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果<br><img src="/2017/07/16/代理模式/d1.jpg" alt=""></p>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="理论-1"><a href="#理论-1" class="headerlink" title="理论"></a>理论</h3><p>动态代理通过java的反射机制来动态生成代理者的对象。<br>1.Subject(抽象主题类):<br>接口，主要负责<font color="#FF0000">声明真实主题和代理的共同接口方法</font>。<br>2.RealSubject(真实主题类):<br>也叫被委托类或被代理类，实现抽象主题类接口，负责<font color="#FF0000">定义抽象主题类声明的方法的具体内容</font>。<br>3.ProxySubject(代理类):<br>也叫委托类或代理类，负责<font color="#FF0000">在实现实现jdk的InvocationHandler接口invoke方法现动态代理</font>。<br>4.Client:客户类:<br>即<font color="#FF0000">使用代理的类</font>。</p>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>Subject(抽象主题类):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">outPut</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>RealSubject(真实主题类):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outPut</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"这就是静态代理"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><font color="#FF0000">ProxySubject(代理类):</font><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxySubject</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Object obj;<span class="comment">//真实对象的引用</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ProxySubject</span><span class="params">(Object obj)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.obj=obj;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></div><div class="line">			<span class="keyword">throws</span> Throwable &#123;</div><div class="line">		System.out.println(<span class="string">"开始调用真实主题类方法"</span>);</div><div class="line">		Object result=method.invoke(obj, args);<span class="comment">//调用真实主题类方法</span></div><div class="line">		System.out.println(<span class="string">"调用真实主题类方法结束"</span>);</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><font color="#FF0000">Client:客户类:</font><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Subject realSubject=<span class="keyword">new</span> RealSubject();</div><div class="line">		<span class="comment">//构造一个动态代理</span></div><div class="line">		ProxySubject proxySubject= <span class="keyword">new</span> ProxySubject(realSubject);</div><div class="line">		<span class="comment">//获取真实主题的ClassLoader</span></div><div class="line">		ClassLoader loader=realSubject.getClass().getClassLoader();</div><div class="line">		<span class="comment">//动态构造一个代理对象</span></div><div class="line">		Subject realSubjectProxy=(Subject)Proxy.newProxyInstance(loader, <span class="keyword">new</span> Class[]&#123;Subject.class&#125;, proxySubject);</div><div class="line">		</div><div class="line">		realSubjectProxy.outPut();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果<br><img src="/2017/07/16/代理模式/d2.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android开发艺术探索笔记]]></title>
      <url>http://yoursite.com/2017/07/01/android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="第一章Activity的生命周期和启动模式"><a href="#第一章Activity的生命周期和启动模式" class="headerlink" title="第一章Activity的生命周期和启动模式"></a>第一章Activity的生命周期和启动模式</h2><h3 id="Activity生命周期"><a href="#Activity生命周期" class="headerlink" title="Activity生命周期"></a>Activity生命周期</h3><h4 id="单个Activity"><a href="#单个Activity" class="headerlink" title="单个Activity"></a>单个Activity</h4><p>启动Activity<br>onCreat-&gt;onStart-&gt;onResume<br>Activity切换到桌面(Activity用了透明主题不会回调onStop)<br>onPause-&gt;onStop<br>返回Activity<br>onRestart-&gt;onStart-&gt;onResume<br>按Back键回退<br>onPause-&gt;onStop-&gt;onDestroy<br>直接强制停止应用<br>没有回调</p>
<h4 id="两个Activity"><a href="#两个Activity" class="headerlink" title="两个Activity"></a>两个Activity</h4><p>Activity之间的切换<br>（A1切换A2）<br>A1 onPause<br>A2 onCreat-&gt;onStart-&gt;onResume<br>A1 onStop<br>（A2按Back键回退A1）<br>A2 onPause<br>A1 onRestart-&gt;onStart-&gt;onResume<br>A2 onStop-&gt;onDestroy</p>
<h3 id="Activity启动模式"><a href="#Activity启动模式" class="headerlink" title="Activity启动模式"></a>Activity启动模式</h3><h4 id="standard-标准模式"><a href="#standard-标准模式" class="headerlink" title="standard(标准模式)"></a>standard(标准模式)</h4><p>每个Activity都在同一个栈<br>每次启动一个Activity都新建实例</p>
<h4 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h4><p>每个Activity都在同一个栈<br>除了启动本来就在栈顶的Activity不会新建实例<br>启动不在栈顶的Activity都新建实例</p>
<h4 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h4><p>每个Activity都在同一个栈<br>要启动的Activity在栈内的不会重复新建实例<br>每次切换非栈顶的Activity会把在它后入栈Activity清除</p>
<h4 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h4><p>每个Activity独立一个栈<br>要启动的Activity在栈内的不会重复新建实例<br>每次切换Activity切换栈</p>
<h3 id="Activity启动方式"><a href="#Activity启动方式" class="headerlink" title="Activity启动方式"></a>Activity启动方式</h3><h4 id="显式-Intent"><a href="#显式-Intent" class="headerlink" title="显式 Intent"></a>显式 Intent</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent i=<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,Main2.class);</div><div class="line">startActivity(i);</div></pre></td></tr></table></figure>
<h4 id="隐式-Intent"><a href="#隐式-Intent" class="headerlink" title="隐式 Intent"></a>隐式 Intent</h4><p>隐式 Intent不明确指定启动哪个Activity，而是设置Action、Data、Category，让系统来筛选出合适的Activity。筛选是根据所有的&lt; intent-filter &gt;来筛选，可以使用隐式 Intent从A应用启动B应用。</p>
<h5 id="设置Action"><a href="#设置Action" class="headerlink" title="设置Action"></a>设置Action</h5><p>android:label是设置标签用来区分同一个应用不同activity用同一个action的情况。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".Main2"</span> <span class="attr">android:label</span>=<span class="string">"hhh"</span>&gt;</span> </div><div class="line"><span class="comment">&lt;!--&lt;activity android:name=".Main2" android:exported="false"&gt;改为这样其它应用无法访问 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span><span class="comment">&lt;!--此句一般都要加 --&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.app.cczhr.democ.my2"</span>/&gt;</span><span class="comment">&lt;!--一般命名方式是包名+Action名 --&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Intent i=<span class="keyword">new</span> Intent(<span class="string">"com.app.cczhr.democ.my2"</span>);</div><div class="line"><span class="comment">/*也可以这样写</span></div><div class="line">Intent i=new Intent();</div><div class="line">i.setAction("com.app.cczhr.democ.my2");*/</div><div class="line">startActivity(i);</div></pre></td></tr></table></figure></p>
<h5 id="设置Data"><a href="#设置Data" class="headerlink" title="设置Data"></a>设置Data</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".Main2"</span> <span class="attr">android:label</span>=<span class="string">"main2"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></div><div class="line">		 </div><div class="line">         <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"app"</span> /&gt;</span></div><div class="line">		 <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</span><span class="comment">&lt;!--设置可以浏览器启动 --&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>/&gt;</span></div><div class="line"></div><div class="line">     <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<p>启动<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> Intent i=<span class="keyword">new</span> Intent();</div><div class="line"> i.setData(Uri.parse(<span class="string">"app://"</span>));</div><div class="line">startActivity(i);</div></pre></td></tr></table></figure></p>
<p>也可以浏览器直接访问”app://“启动<br>其它语法（懒得打）<br><img src="/2017/07/01/android开发艺术探索笔记/face.jpg" alt=""><br><img src="/2017/07/01/android开发艺术探索笔记/b1.jpg" alt=""><br><img src="/2017/07/01/android开发艺术探索笔记/b2.jpg" alt=""></p>
<h5 id="设置Category"><a href="#设置Category" class="headerlink" title="设置Category"></a>设置Category</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".Main2"</span> <span class="attr">android:label</span>=<span class="string">"main2"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></div><div class="line">		 <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"jjj"</span> /&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<p>启动<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent i=<span class="keyword">new</span> Intent();</div><div class="line">i.addCategory(<span class="string">"jjj"</span>);</div><div class="line">startActivity(i);</div></pre></td></tr></table></figure></p>
<h2 id="第二章IPC机制-进程间通信机制"><a href="#第二章IPC机制-进程间通信机制" class="headerlink" title="第二章IPC机制(进程间通信机制)"></a>第二章IPC机制(进程间通信机制)</h2><h3 id="启动服务和绑定服务"><a href="#启动服务和绑定服务" class="headerlink" title="启动服务和绑定服务"></a>启动服务和绑定服务</h3><p>此部分出处为：<a href="http://www.jianshu.com/p/2fb6eb14fdec" target="_blank" rel="external">http://www.jianshu.com/p/2fb6eb14fdec</a><br>作者：食梦兽<br>个人略微修改</p>
<h4 id="启动服务-startService"><a href="#启动服务-startService" class="headerlink" title="启动服务(startService)"></a>启动服务(startService)</h4><p>使用Service的步骤：<br>1.定义一个类继承Service<br>2.在Manifest.xml文件中配置该Service<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line">           <span class="attr">android:name</span>=<span class="string">".AppService"</span></div><div class="line">           <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">           <span class="attr">android:exported</span>=<span class="string">"true"</span></div><div class="line">           &gt;</div><div class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3.使用Context的startService(Intent)方法启动该Service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//跨进程访问方法</span></div><div class="line">   Intent i=<span class="keyword">new</span> Intent();</div><div class="line">   i.setComponent(<span class="keyword">new</span>  ComponentName(<span class="string">"com.app.cczhr.myaidl"</span>,<span class="string">"com.app.cczhr.myaidl.AppService"</span>));</div></pre></td></tr></table></figure></p>
<p>4.不再使用时，调用stopService(Intent)方法停止该服务</p>
<p>使用这种start方式启动的Service的生命周期如下：<br>onCreate()—&gt;onStartCommand()（onStart()方法已过时） —&gt; onDestory()</p>
<p>说明：如果服务已经开启，不会重复的执行onCreate()， 而是会调用onStart()和onStartCommand()。<br>服务停止的时候调用 onDestory()。服务只会被停止一次。</p>
<p>特点：一旦服务开启跟调用者(开启者)就没有任何关系了。<br>开启者退出了，开启者挂了，服务还在后台长期的运行。<br>开启者不能调用服务里面的方法。</p>
<h4 id="绑定服务-bindService"><a href="#绑定服务-bindService" class="headerlink" title="绑定服务(bindService)"></a>绑定服务(bindService)</h4><p>使用Service的步骤：<br>1.定义一个类继承Service<br>2.在Manifest.xml文件中配置该Service<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line">           <span class="attr">android:name</span>=<span class="string">".AppService"</span></div><div class="line">           <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">           <span class="attr">android:exported</span>=<span class="string">"true"</span></div><div class="line">           &gt;</div><div class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3.使用Context的bindService(Intent, ServiceConnection, int)方法启动该Service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//跨进程访问方法</span></div><div class="line">   Intent i=<span class="keyword">new</span> Intent();</div><div class="line">   i.setComponent(<span class="keyword">new</span>  ComponentName(<span class="string">"com.app.cczhr.myaidl"</span>,<span class="string">"com.app.cczhr.myaidl.AppService"</span>));</div><div class="line">     bindService(i, <span class="keyword">this</span>, Context.BIND_AUTO_CREATE);</div></pre></td></tr></table></figure></p>
<p>4.不再使用时，调用unbindService(ServiceConnection)方法停止该服务<br>使用这种bind方式启动的Service的生命周期如下：<br>onCreate() —&gt;onBind()—&gt;onunbind()—&gt;onDestory()</p>
<p>注意：绑定服务不会调用onstart()或者onstartcommand()方法</p>
<p>特点：bind的方式开启服务，绑定服务，调用者挂了，服务也会跟着挂掉。<br>绑定者可以调用服务里面的方法。</p>
<h3 id="对象序列化和反序列化"><a href="#对象序列化和反序列化" class="headerlink" title="对象序列化和反序列化"></a>对象序列化和反序列化</h3><p>知识背景：<br>将对象转换为字节流保存起来，并在以后还原这个对象，这种机制叫做对象序列化。<br>• 当一个对象被序列化时，只保存对象的非静态成员变量，不能保存任何的成员方法和静态的成员 变量。<br>• 如果一个对象的成员变量是一个对象，那么这个 对象的数据成员也会被保存。<br>• 如果一个可序列化的对象包含对某个不可序列化 的对象的引用，那么整个序列化操作将会失败，并且会抛出一个NotSerializableException。我 们可以将这个引用标记为transient，那么对象仍然可以序列化。</p>
<p>选择序列化方法的原则:<br>•在使用内存的时候，Parcelable比Serializable性能高，所以推荐使用Parcelable。<br>•Serializable在序列化的时候会产生大量的临时变量，从而引起频繁的GC。<br>•Parcelable不能使用在要将数据存储在磁盘上的情况，因为Parcelable不能很好的保证数据的持续性在外界有变化的情况下。尽管Serializable效率低点，但此时还是建议使用Serializable 。</p>
<h4 id="使用Serializable"><a href="#使用Serializable" class="headerlink" title="使用Serializable"></a>使用Serializable</h4><p>例子，serialVersionUID是用来检验反序列化的类是否发生变化的。<br>Serializable是一个空接口主要用来标记。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</div><div class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializableTest1</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></div><div class="line">	&#123;</div><div class="line">		Person p1 = <span class="keyword">new</span> Person(<span class="number">20</span>, <span class="string">"zhangsan"</span>, <span class="number">4.55</span>);</div><div class="line">		Person p2 = <span class="keyword">new</span> Person(<span class="number">50</span>, <span class="string">"lisi"</span>, <span class="number">4.67</span>);</div><div class="line">		Person p3 = <span class="keyword">new</span> Person(<span class="number">10</span>, <span class="string">"wangwu"</span>, <span class="number">17.78</span>);</div><div class="line"></div><div class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"d://person.txt"</span>);</div><div class="line">		ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</div><div class="line">		oos.writeObject(p1);</div><div class="line">		oos.writeObject(p2);</div><div class="line">		oos.writeObject(p3);</div><div class="line">		oos.close();</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"--------------------"</span>);</div><div class="line">		FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"d://person.txt"</span>);</div><div class="line">		ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</div><div class="line">		Person p = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</div><div class="line">		&#123;</div><div class="line">			p = (Person) ois.readObject();</div><div class="line">			System.out.println(p.age + <span class="string">","</span> + p.name + <span class="string">","</span> + p.height);</div><div class="line">		&#125;</div><div class="line">		ois.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">657728328721741525L</span>;</div><div class="line">	<span class="keyword">int</span> age;</div><div class="line">    String name;</div><div class="line">	<span class="keyword">double</span> height;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name, <span class="keyword">double</span> height)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.height = height;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	更细化的处理</div><div class="line">	private void writeObject(java.io.ObjectOutputStream out) throws IOException</div><div class="line">	&#123;</div><div class="line">		out.writeInt(age);</div><div class="line">		out.writeUTF(name);</div><div class="line">		System.out.println("write object");</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private void readObject(java.io.ObjectInputStream in) throws IOException,</div><div class="line">			ClassNotFoundException</div><div class="line">	&#123;</div><div class="line">		age = in.readInt();</div><div class="line">		name = in.readUTF();</div><div class="line">		System.out.println("read object");</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	*/</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果<br><img src="/2017/07/01/android开发艺术探索笔记/s11.jpg" alt=""></p>
<h4 id="使用Parcelable"><a href="#使用Parcelable" class="headerlink" title="使用Parcelable"></a>使用Parcelable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.os.Parcel;</div><div class="line"><span class="keyword">import</span> android.os.Parcelable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Parcelable</span>  </span>&#123;</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    String name;</div><div class="line">    <span class="keyword">double</span> height;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name, <span class="keyword">double</span> height)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.height = height;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Person</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">        age = in.readInt();</div><div class="line">        name = in.readString();</div><div class="line">        height = in.readDouble();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;Person&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Person&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Person(in);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> Person[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Person[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel parcel, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        parcel.writeInt(age);</div><div class="line">        parcel.writeString(name);</div><div class="line">        parcel.writeDouble(height);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发送<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Person p1 = <span class="keyword">new</span> Person(<span class="number">20</span>, <span class="string">"zhangsan"</span>, <span class="number">4.55</span>);</div><div class="line">Intent i=<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,Main2.class);</div><div class="line">i.putExtra(<span class="string">"person"</span>,p1);</div><div class="line">startActivity(i);</div></pre></td></tr></table></figure></p>
<p>接收<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent i = getIntent();</div><div class="line">Person p1 =(Person)i.getParcelableExtra(<span class="string">"person"</span>);</div><div class="line">Log.e(<span class="string">"message"</span>,p1.age+<span class="string">","</span>+p1.name+<span class="string">","</span>+p1.height);</div></pre></td></tr></table></figure></p>
<h3 id="使用aidl"><a href="#使用aidl" class="headerlink" title="使用aidl"></a>使用aidl</h3><p>1.</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Retrofit2笔记]]></title>
      <url>http://yoursite.com/2017/06/15/Retrofit2%E7%AC%94%E8%AE%B0/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的fragment页面切换优化笔记]]></title>
      <url>http://yoursite.com/2017/05/11/Android%E7%9A%84fragment%E9%A1%B5%E9%9D%A2%E5%88%87%E6%8D%A2%E4%BC%98%E5%8C%96%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="闲谈"><a href="#闲谈" class="headerlink" title="闲谈"></a>闲谈</h2><p>最近我在做一个小项目，在空余的时间想怎么样的学习效率是最快的，我在观察别人的同时也问了下自己，应该是和水平相似甚至比你高一点点的人学习效率是最快的，让那个人告诉我他的经验，自己就不用折腾了。<br>那假如每个人都这样想，感觉折腾那个人才是最蠢的。<br>是么。<br>折腾+互相分享才是最快的。</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>原来切换fragment的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceFragment</span><span class="params">(Fragment targetFragment)</span></span>&#123;</div><div class="line">     FragmentManager fragmentManager=getSupportFragmentManager();</div><div class="line">       FragmentTransaction transaction=fragmentManager.beginTransaction();</div><div class="line">       transaction.replace(R.id.first_main,targetFragment);</div><div class="line">       transaction.commit();</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这种方法会每次replace会把生命周期全部执行一遍，如果在这些生命周期函数 里拉取数据的话，就会不断重复的加载刷新数据，不停的切换就会卡顿。</p>
<p>正确方法是fragment页面切换用add(),hide()和show()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceFragment</span><span class="params">(Fragment targetFragment)</span></span>&#123;</div><div class="line">       FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();</div><div class="line">       <span class="keyword">if</span> (!targetFragment.isAdded()) &#123;</div><div class="line">           <span class="keyword">if</span>(currentFragment != <span class="keyword">null</span>) &#123;</div><div class="line">               transaction.hide(currentFragment).add(R.id.first_main, targetFragment).commit();</div><div class="line">           &#125;<span class="keyword">else</span> &#123;</div><div class="line">               transaction.add(R.id.first_main, targetFragment).commit();</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           transaction.hide(currentFragment).show(targetFragment).commit();</div><div class="line">       &#125;</div><div class="line">        currentFragment = targetFragment;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>看起来很完美，实际体验也好了很多，但是只要你把这个app放到后台一段时间再操作就会出现fragment重叠现象。</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>当系统内存不足，Fragment 的宿主 Activity 回收的时候，Fragment 的实例并没有随之被回收。Activity 被系统回收时，会主动调用 onSaveInstance() 方法来保存视图层（View Hierarchy），所以当 Activity 通过导航再次被重建时，之前被实例化过的 Fragment 依然会出现在 Activity 中，此时的 FragmentTransaction 中的相当于又再次 add 了 fragment 进去的，hide()和show()方法对之前保存的fragment已经失效了，所以就出现了重叠。</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>重新onSaveInstanceState()就不会保存之前的 fragment state了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line"><span class="comment">//super.onSaveInstanceState(outState);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="刷新数据的问题"><a href="#刷新数据的问题" class="headerlink" title="刷新数据的问题"></a>刷新数据的问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onHiddenChanged</span><span class="params">(<span class="keyword">boolean</span> hidden)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.onHiddenChanged(hidden);</div><div class="line">    <span class="comment">//这里写返回刷新的语句</span></div><div class="line">        <span class="keyword">if</span> (!hidden) &#123;</div><div class="line">            firstRefresh();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mvp和mvvm框架笔记]]></title>
      <url>http://yoursite.com/2017/04/30/mvp%E5%92%8Cmvvm%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>1.mvp<br><img src="/2017/04/30/mvp和mvvm框架笔记/mvp.jpg" alt=""><br>其中数据逻辑相当于M，Activity（负责View的绘制以及与用户交互）相当于V ，View于Model间的交互则为P，Model与View之间的交互由Presenter完成。还有一点就是Presenter与View之间的交互是通过接口的。<br>总结：</p>
<ol>
<li>各部分之间的通信，都是双向的。</li>
<li>View 与 Model 不发生联系，都通过 Presenter 传递。</li>
<li>View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。</li>
</ol>
<p>2.mvvm<br><img src="/2017/04/30/mvp和mvvm框架笔记/mvvm.jpg" alt=""><br>MVVM是Model-View-ViewModel的简写. 它是有三个部分组成：Model、View、ViewModel。Model：数据模型层。包含业务逻辑和校验逻辑,View：屏幕上显示的UI界面（layout、views）,ViewModel：View和Model之间的链接桥梁，处理视图逻辑。<br>当View有用户输入后，ViewModel通知Model更新数据，同理Model数据更新后，ViewModel通知View更新。<br>总结：<br>MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。</p>
<h2 id="mvp的使用"><a href="#mvp的使用" class="headerlink" title="mvp的使用"></a>mvp的使用</h2><h3 id="首先是M-数据逻辑"><a href="#首先是M-数据逻辑" class="headerlink" title="首先是M(数据逻辑)"></a>首先是M(数据逻辑)</h3><p>UserModel.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserModel</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">checkUserValidity</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span> || password == <span class="keyword">null</span> ||</div><div class="line">                username.isEmpty() ||</div><div class="line">                password.isEmpty()) &#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="然后是V-View的绘制以及与用户交互-——通过interface-接口-与View-Activity交互"><a href="#然后是V-View的绘制以及与用户交互-——通过interface-接口-与View-Activity交互" class="headerlink" title="然后是V(View的绘制以及与用户交互)——通过interface(接口)与View(Activity交互)"></a>然后是V(View的绘制以及与用户交互)——通过interface(接口)与View(Activity交互)</h3><p>接口<br>ILoginView.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ILoginView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showProgress</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hideProgress</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPasswordError</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getUsername</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getPassword</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loginSuccess</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Activity<br>实现接口<br>LoginActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">ILoginView</span>,<span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> EditText usernameEdit,passwrodEdit;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button loginButton;</div><div class="line"></div><div class="line">    ProgressDialog pd;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_mvplogin);</div><div class="line"></div><div class="line">        pd = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        usernameEdit = (EditText) findViewById(R.id.et_username);</div><div class="line">        passwrodEdit = (EditText) findViewById(R.id.et_username);</div><div class="line">        loginButton = (Button) findViewById(R.id.bt_login);</div><div class="line"></div><div class="line">        loginButton.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showProgress</span><span class="params">()</span> </span>&#123;</div><div class="line">        pd.show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hideProgress</span><span class="params">()</span> </span>&#123;</div><div class="line">        pd.cancel();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPasswordError</span><span class="params">()</span> </span>&#123;</div><div class="line">        passwrodEdit.setError(<span class="string">"passwrod error"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> usernameEdit.getText().toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> passwrodEdit.getText().toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginSuccess</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"login success"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId())&#123;</div><div class="line">            <span class="keyword">case</span> R.id.bt_login:</div><div class="line"></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="最后是P-View于Model间的交互"><a href="#最后是P-View于Model间的交互" class="headerlink" title="最后是P(View于Model间的交互)"></a>最后是P(View于Model间的交互)</h3><p>与Model间交互接口<br>ILoginPresenter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ILoginPresenter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Login</span><span class="params">(String username, String password)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现接口<br>LoginPresenter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginPersenter</span> <span class="keyword">implements</span> <span class="title">ILoginPresenter</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ILoginView loginView;</div><div class="line">    <span class="keyword">private</span> UserModel mUser;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginPersenter</span><span class="params">(ILoginView loginView)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.loginView = loginView;</div><div class="line">        initUser();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUser</span><span class="params">()</span></span>&#123;</div><div class="line">        mUser = <span class="keyword">new</span> UserModel(loginView.getUsername(),loginView.getPassword());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Login</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        loginView.showProgress();</div><div class="line">        <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                loginView.hideProgress();</div><div class="line">                <span class="keyword">int</span> code = mUser.checkUserValidity(loginView.getUsername(), loginView.getPassword());</div><div class="line">                <span class="keyword">if</span> (code == -<span class="number">1</span>) &#123;</div><div class="line">                    loginView.setPasswordError();</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">0</span>) &#123;</div><div class="line">                    loginView.loginSuccess();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,<span class="number">2000</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="最后在LoginActivity中补上P的调用"><a href="#最后在LoginActivity中补上P的调用" class="headerlink" title="最后在LoginActivity中补上P的调用"></a>最后在LoginActivity中补上P的调用</h3><p>LoginActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">....</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">	...</div><div class="line">    &#125;</div><div class="line">....</div><div class="line"><span class="comment">//初始化</span></div><div class="line">loginPresenter = <span class="keyword">new</span> LoginPersenter(<span class="keyword">this</span>);<span class="comment">//方便使用LoginActivity里的方法</span></div><div class="line">...</div><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId())&#123;</div><div class="line">            <span class="keyword">case</span> R.id.bt_login:</div><div class="line"><span class="comment">//Click方法中的调用</span></div><div class="line">loginPresenter.Login(usernameEdit.getText().toString(),passwrodEdit.getText().toString());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">		.....</div></pre></td></tr></table></figure></p>
<p>Done!</p>
<h2 id="mvvm的使用"><a href="#mvvm的使用" class="headerlink" title="mvvm的使用"></a>mvvm的使用</h2><h3 id="首先是M-数据逻辑-和mvp一样"><a href="#首先是M-数据逻辑-和mvp一样" class="headerlink" title="首先是M(数据逻辑)和mvp一样"></a>首先是M(数据逻辑)和mvp一样</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserModel</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bindable</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">        notifyPropertyChanged(BR.username);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bindable</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">        notifyPropertyChanged(BR.password);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">checkUserValidity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span> || password == <span class="keyword">null</span> ||</div><div class="line">                username.isEmpty() ||</div><div class="line">                password.isEmpty()) &#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="接下来是V-屏幕上显示的UI界面-layout、views"><a href="#接下来是V-屏幕上显示的UI界面-layout、views" class="headerlink" title="接下来是V(屏幕上显示的UI界面 layout、views)"></a>接下来是V(屏幕上显示的UI界面 layout、views)</h3><p>这里涉及到databinding，先解释下databinding用法。</p>
<h4 id="使用databinding"><a href="#使用databinding" class="headerlink" title="使用databinding"></a>使用databinding</h4><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>在app的build.gradle上加上以下代码，配置之后，就可以开始使用数据绑定了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">android &#123;  </div><div class="line">    ...  </div><div class="line">    ...  </div><div class="line">    ...  </div><div class="line">    dataBinding&#123;  </div><div class="line">        enabled <span class="keyword">true</span>  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>要使用数据绑定，我们得首先创建一个实体类，例如使用上面的M(UserModel.java)</p>
<p>然后我们来看看布局文件该怎么写，首先布局文件不再是以传统的某一个容器作为根节点，而是使用<layout></layout>作为根节点，在<layout>节点中我们可以通过<data>节点来引入我们要使用的数据源。</data></layout></p>
<p>在data中定义的variable节点，name属性表示变量的名称，type表示这个变量的类型，实例就是我们实体类的位置。<br>activity_mvvmlogin.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"user"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"com.netease.mvpormvvmdemo.mvvm.UserModel"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--</span></div><div class="line">	也可以用import写法</div><div class="line">	&lt;data&gt;  </div><div class="line">    	&lt;import type="com.netease.mvpormvvmdemo.mvvm.UserModel"/&gt;  </div><div class="line">   		 &lt;variable  </div><div class="line">        	name="user"  </div><div class="line">      	    type="UserModel"/&gt;  </div><div class="line">   	 &lt;/data&gt;</div><div class="line">   --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/et_username"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/et_password"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/bt_login"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Login"</span></div><div class="line">            /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="最后是VM-View和Model之间的链接桥梁，处理视图逻辑。"><a href="#最后是VM-View和Model之间的链接桥梁，处理视图逻辑。" class="headerlink" title="最后是VM(View和Model之间的链接桥梁，处理视图逻辑。)"></a>最后是VM(View和Model之间的链接桥梁，处理视图逻辑。)</h3><p>LoginActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</div><div class="line"></div><div class="line">    ActivityMvvmloginBinding binding;</div><div class="line">    ProgressDialog pd;</div><div class="line">    UserModel userModel;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="comment">//绑定</span></div><div class="line">        binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_mvvmlogin);</div><div class="line">        pd = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        binding.btLogin.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                userModel = <span class="keyword">new</span> UserModel(binding.etUsername.getText().toString(),binding.etPassword.getText().toString());             <span class="comment">//使用绑定类的方法</span></div><div class="line">                binding.setUser(userModel);</div><div class="line">                doLoign();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doLoign</span><span class="params">()</span></span>&#123;</div><div class="line">        pd.show();</div><div class="line">        <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                pd.cancel();</div><div class="line">                <span class="keyword">int</span> code = userModel.checkUserValidity();</div><div class="line">                <span class="keyword">if</span> (code == -<span class="number">1</span>) &#123;</div><div class="line">				<span class="comment">//使用绑定view</span></div><div class="line">                    binding.etPassword.setError(<span class="string">"passwrod error"</span>);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">0</span>) &#123;</div><div class="line">                    Toast.makeText(getBaseContext(), <span class="string">"login success"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,<span class="number">2000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Done!<br>更详细的mvvm可以转去 <a href="http://blog.csdn.net/u012702547/article/details/52077515" target="_blank" rel="external">http://blog.csdn.net/u012702547/article/details/52077515</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android使用okhttp3和handler实现简单联网交互]]></title>
      <url>http://yoursite.com/2017/04/16/Android%E4%BD%BF%E7%94%A8okhttp3%E5%92%8Chandler%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E8%81%94%E7%BD%91%E4%BA%A4%E4%BA%92/</url>
      <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>需要引入okhttp3的包<br><img src="/2017/04/16/Android使用okhttp3和handler实现简单联网交互/o1.jpg" alt=""><br><img src="/2017/04/16/Android使用okhttp3和handler实现简单联网交互/o2.jpg" alt=""></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>不讲原理直接开干 这里介绍比较片面 有些方法并没有用到<br>想要了解更具体的原理和方法，自行查阅资料，这里只是使用工具的例子<br><img src="/2017/04/16/Android使用okhttp3和handler实现简单联网交互/face.png" alt=""><br>创建一个异步操作的联网的工具包<br>HttpUtil.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> okhttp3.FormBody;</div><div class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</div><div class="line"><span class="keyword">import</span> okhttp3.Request;</div><div class="line"><span class="keyword">import</span> okhttp3.RequestBody;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by cczhr on 2017/3/11.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtil</span> </span>&#123;</div><div class="line">   <span class="comment">//get请求例子</span></div><div class="line">   <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">getSample</span><span class="params">(String address,String user,String password,String id,okhttp3.Callback callback)</span></span>&#123;</div><div class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">        Request request=<span class="keyword">new</span> Request.Builder()</div><div class="line">                .url(address+<span class="string">"?id="</span>+id+<span class="string">"&amp;&amp;user="</span>+user+<span class="string">"&amp;&amp;password="</span>+password)</div><div class="line">                .build();</div><div class="line">        client. newCall(request).enqueue(callback);</div><div class="line">    &#125;</div><div class="line">  </div><div class="line"><span class="comment">//post 请求例子</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span>   <span class="title">postSample</span><span class="params">(String address,String user,String password,okhttp3.Callback callback)</span></span>&#123;</div><div class="line">     </div><div class="line">	 OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">        RequestBody requestBody=<span class="keyword">new</span> FormBody.Builder()</div><div class="line">                .add(<span class="string">"user"</span>,user)</div><div class="line">                .add(<span class="string">"password"</span>,password)</div><div class="line">                .build();</div><div class="line"></div><div class="line">        Request request=<span class="keyword">new</span> Request.Builder()</div><div class="line">                .url(url)</div><div class="line">                .post(requestBody)</div><div class="line">                .build();</div><div class="line">        client. newCall(request).enqueue(callback);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>MainActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//执行get请求 url,user,password,id在实际情况中要给值</span></div><div class="line">            HttpUtil.getSample(url,user,password,id, <span class="keyword">new</span> okhttp3.Callback() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">                  <span class="comment">//网络请求失败会执行的方法</span></div><div class="line">                &#125;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                   <span class="comment">//网络请求成功会执行的方法</span></div><div class="line">				  <span class="keyword">if</span> (response!=<span class="keyword">null</span>)&#123;</div><div class="line">				  <span class="comment">//下面是把请求网站后获取到的内容转换为字符串例子</span></div><div class="line">                        InputStream inputStream=response.body().byteStream();</div><div class="line">                        BufferedReader reader=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</div><div class="line">                        StringBuilder result=<span class="keyword">new</span> StringBuilder();</div><div class="line">                        String line;</div><div class="line">                        <span class="keyword">while</span> ((line=reader.readLine())!=<span class="keyword">null</span>)&#123;</div><div class="line">                            result.append(line);</div><div class="line">                        &#125;</div><div class="line">                        String date=(result.toString());</div><div class="line">                        System.out.println(date);</div><div class="line">						<span class="comment">//注意这里不能直接操作ui</span></div><div class="line">						<span class="comment">//请求完毕后使用handler回到ui线程</span></div><div class="line">						 Message message=<span class="keyword">new</span> Message();</div><div class="line">                         message.what=<span class="number">1</span>;<span class="comment">//后面的数字是随便定的 实际操作最好用一个常量</span></div><div class="line">                         handler.sendMessage(message);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">	<span class="comment">//post 请求也是一样的</span></div><div class="line">	   HttpUtil.postSample(url,user,password,id, <span class="keyword">new</span> okhttp3.Callback() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">                  <span class="comment">//网络请求失败会执行的方法</span></div><div class="line">                &#125;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                 .......</div><div class="line">				 .......</div><div class="line">				 .......</div><div class="line">				 </div><div class="line">            &#125;);</div></pre></td></tr></table></figure></p>
<p>MainActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Handler handler=<span class="keyword">new</span> Handler()&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what)&#123;</div><div class="line">                <span class="keyword">case</span>  <span class="number">1</span>:</div><div class="line">				<span class="comment">//执行ui线程的操作 这里是弹出一个消息框</span></div><div class="line">                  Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"操作成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<p>当然最后别忘了给App联网权限<br>AndroidManifest.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.app.cczhr.httpdemo"</span>&gt;</div><div class="line">		<span class="comment">&lt;!--  联网权限--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></div><div class="line">   </div><div class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></div><div class="line">    ......</div><div class="line">	......</div><div class="line">	......</div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Done!</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的NavigationView获取headerLayout组件的方法]]></title>
      <url>http://yoursite.com/2017/03/30/Android%E7%9A%84NavigationView%E8%8E%B7%E5%8F%96headerLayout%E7%BB%84%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>1.获取NavigationView<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.......</div><div class="line">setContentView(R.layout.activity_main);</div><div class="line">...</div><div class="line">NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);</div></pre></td></tr></table></figure></p>
<p>2.获取headerLayout<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">View headerLayout = navigationView.inflateHeaderView(R.layout.nav_header_main);</div></pre></td></tr></table></figure></p>
<p>3.成功获取其中的组件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TextView  teacher = (TextView) headerLayout.findViewById(R.id.teacher);</div></pre></td></tr></table></figure></p>
<p>4.删除.activity_main.xml的app:headerLayout<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:headerLayout="@layout/nav_header_main"</div></pre></td></tr></table></figure></p>
<p>Done！<br>也可以这样(这种个人没有尝试)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">View headerView = navigationView.getHeaderView(<span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<p>详细可以转去<br><a href="https://segmentfault.com/a/1190000004151222" target="_blank" rel="external">https://segmentfault.com/a/1190000004151222</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的RxJava笔记]]></title>
      <url>http://yoursite.com/2017/03/07/Android%E7%9A%84RxJava%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>RxJava在Java里有两种实现，一种是手动的一种是调用Java里面的类，先回顾一下传统Java的做法<br>手动版<br><img src="/2017/03/07/Android的RxJava笔记/Android的RxJava笔记\r1.png" alt=""><br>类版<br><img src="/2017/03/07/Android的RxJava笔记/Android的RxJava笔记\r2.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java的线程笔记]]></title>
      <url>http://yoursite.com/2017/02/26/Java%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h2><ol>
<li>继承Thread类并重写run方法。  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// 处理具体的逻辑</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>运行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MyThread myThread = <span class="keyword">new</span> MyThread();</div><div class="line">myThread.start();</div><div class="line">------------------------------------------------------</div><div class="line"><span class="keyword">new</span> MyThread().start();<span class="comment">//匿名写法</span></div></pre></td></tr></table></figure></p>
<ol>
<li>通过定义实现Runnable接口的类进而实现 run方法<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// 处理具体的逻辑</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>运行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">MyThread myThread = <span class="keyword">new</span> MyThread();</div><div class="line"><span class="keyword">new</span> Thread(myThread).start();</div><div class="line">------------------------------------------------------------</div><div class="line"><span class="comment">//匿名类写法</span></div><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// 处理具体的逻辑</span></div><div class="line">&#125;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure></p>
<h2 id="人为停止线程推荐的方法"><a href="#人为停止线程推荐的方法" class="headerlink" title="人为停止线程推荐的方法"></a>人为停止线程推荐的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag=<span class="keyword">true</span>；</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123; </div><div class="line">	<span class="keyword">while</span> (flag) &#123;</div><div class="line">	…&#125;     </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopRunning</span><span class="params">()</span> </span>&#123;</div><div class="line">		flag = <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControlThread</span> </span>&#123;  </div><div class="line">	<span class="keyword">private</span> Runnable  r=<span class="keyword">new</span> MyThread(); </div><div class="line">	<span class="keyword">private</span> Thread t=<span class="keyword">new</span> Thread(r);   </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">()</span> </span>&#123; </div><div class="line">		t.start(); </div><div class="line">	&#125;         </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopThread</span><span class="params">()</span></span>&#123;  </div><div class="line">		r.stopRunning();&#125; </div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="同步锁-synchronized"><a href="#同步锁-synchronized" class="headerlink" title="同步锁(synchronized)"></a>同步锁(synchronized)</h2><h3 id="成员变量与局部变量"><a href="#成员变量与局部变量" class="headerlink" title="成员变量与局部变量"></a>成员变量与局部变量</h3><p>1.如果一个变量是<font color="#FF0000">成员变量</font>，那么多个线程对<font color="#FF0000">同一个对象</font>是彼此影响的(一个线程对成员的改变会影响另一个线程)。<br>例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO 自动生成的方法存根</span></div><div class="line">		Runnable r=<span class="keyword">new</span> HelloThread();</div><div class="line">		Thread t1=<span class="keyword">new</span> Thread(r);</div><div class="line">		Thread t2=<span class="keyword">new</span> Thread(r);</div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">			System.out.println(<span class="string">"number:"</span>+i++);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep((<span class="keyword">long</span>) (Math.random()*<span class="number">1000</span>));</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(<span class="number">10</span>==i)&#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果<br><img src="/2017/02/26/Java的线程笔记/t1.jpg" alt=""><br>2.如果一个变量是<font color="#FF0000">局部变量</font>，那么每个线程都有一个该局部变量的拷贝，一个线程对该局部变量的改变不会影响到其它的线程。<br>例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO 自动生成的方法存根</span></div><div class="line">		Runnable r=<span class="keyword">new</span> HelloThread();</div><div class="line">		Thread t1=<span class="keyword">new</span> Thread(r);</div><div class="line">		Thread t2=<span class="keyword">new</span> Thread(r);</div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">			System.out.println(<span class="string">"number:"</span>+i++);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep((<span class="keyword">long</span>) (Math.random()*<span class="number">1000</span>));</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(<span class="number">10</span>==i)&#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果<br><img src="/2017/02/26/Java的线程笔记/t2.jpg" alt=""></p>
<h3 id="静态方法和非静态方法"><a href="#静态方法和非静态方法" class="headerlink" title="静态方法和非静态方法"></a>静态方法和非静态方法</h3><p>Java 中的<font color="#FF0000">每个对象都</font>有一个锁（lock）或者叫做监视器（monitor），当访问某个对象的 synchronized 方法时，表示将<font color="#FF0000">该对象</font>上锁，此时其他任何线程都无法再去访问 该 synchronized 方法了，直到之前的那个线程执行方法完毕后（或者是抛出了异常）<br>， 那么将该对象的锁释放掉，其他线程才有可能再去访问该 synchronized 方法。 </p>
<p>如果<font color="#FF0000">一个对象</font>有多个 <font color="#FF0000"> synchronized方法</font>，某一时刻某个线程已经进入到了某个<font color="#FF0000"> synchronized方法</font> ，那么在该方法没有执行完毕前，其他线程是无法访问该对象的任何 <font color="#FF0000"> synchronized方法</font> 方法的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheThread2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Example example=<span class="keyword">new</span> Example();</div><div class="line">		Thread t1=<span class="keyword">new</span> TheThread(example);</div><div class="line">		Thread t2=<span class="keyword">new</span> TheThread1(example);</div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">100</span>);</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			System.out.println(<span class="string">"hello"</span>+i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute2</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">100</span>);</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			System.out.println(<span class="string">"world"</span>+i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> Example example;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TheThread</span><span class="params">(Example example)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.example=example;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		example.execute();</div><div class="line">		<span class="keyword">super</span>.run();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> Example example;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TheThread1</span><span class="params">(Example example)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.example=example;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		example.execute2();</div><div class="line">		<span class="keyword">super</span>.run();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果<br><img src="/2017/02/26/Java的线程笔记/t3.jpg" alt=""><br>如果某个 synchronized 方法是 static 的，那么当线程访问该方法时，它锁的<font color="#FF0000">并不是 synchronized 方法所在的对象</font>，而是 <font color="#FF0000">synchronized 方法所在的对象所对应的 Class 对 象</font>，因为 Java 中无论一个类有多少个对象，这些对象会对应<font color="#FF0000">唯一一个 Class 对象</font>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheThread2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Example example=<span class="keyword">new</span> Example();</div><div class="line">		Thread t1=<span class="keyword">new</span> TheThread(example);</div><div class="line">		Thread t2=<span class="keyword">new</span> TheThread1(example);</div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</div><div class="line">		.....</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute2</span><span class="params">()</span></span>&#123;</div><div class="line">		...</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果<br><img src="/2017/02/26/Java的线程笔记/t4.jpg" alt=""><br>因此当线程分别访问同一个类的两个对象的两个 static，synchronized 方法时，他们 的执行顺序也是顺序的，也就是说一个线程先去执行方法，执行完毕后另一个线程 。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheThread2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Example example=<span class="keyword">new</span> Example();<span class="comment">//不管生成多少个新对象也可以成功加锁</span></div><div class="line">		Thread t1=<span class="keyword">new</span> TheThread(example);</div><div class="line">		Thread t2=<span class="keyword">new</span> TheThread1(example);</div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</div><div class="line">		.....</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute2</span><span class="params">()</span></span>&#123;</div><div class="line">		...</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果<br><img src="/2017/02/26/Java的线程笔记/t5.jpg" alt=""></p>
<h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><p>表示线程在执行的时候会对 object 对象上锁，锁的只是方法的某一个代码块。<br>同步代码块是一种细粒度的并发控制，只会将块中的代码同步，位于方法内、同步代码块块之外的代码是可以被多个线程同时访问到的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheThread2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Example example=<span class="keyword">new</span> Example();</div><div class="line">		Thread t1=<span class="keyword">new</span> TheThread(example);</div><div class="line">		Thread t2=<span class="keyword">new</span> TheThread1(example);</div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</div><div class="line">	<span class="keyword">private</span>  Object o1=<span class="keyword">new</span> Object();</div><div class="line">	<span class="keyword">private</span> String o2=<span class="string">"233"</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">synchronized</span> (o1) &#123;</div><div class="line">		.....</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">execute2</span><span class="params">()</span></span>&#123;</div><div class="line">	    <span class="keyword">synchronized</span> (o2) &#123;</div><div class="line">		...</div><div class="line">		&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果<br><img src="/2017/02/26/Java的线程笔记/t6.jpg" alt=""></p>
<h2 id="wait及notify"><a href="#wait及notify" class="headerlink" title="wait及notify"></a>wait及notify</h2><p><b>wait</b>的作用就是让使持有该对象的线程把该对象的<font color="#FF0000">控制权交出去</font>，然后处于<font color="#FF0000">等待状态</font>。这时<font color="#FF0000">其它线程可抢夺控制权</font>。</p>
<font color="#FF0000"><b>注意:一旦它重新获得对象的同步请求，所有之前的请求状态都    会恢复，也就是线程调用wait的地方的状态。线程将会在之前调用wait的地方继续运行下去。 </b></font>

<p><b>另一个会导致线程暂停的方法还有 Thread 类的 sleep 方法，它会导致线程睡眠指定 的毫秒数，但线程在睡眠的过程中是<font color="#FF0000">不会释放掉对象的锁的</font>。</b></p>
<p><b>notify</b>的作用就是<font color="#FF0000">唤醒请求队列中的一个线程</font>，而notifyAll<font color="#FF0000">唤醒的是请求队列中的所有线程</font>。</p>
<font color="#FF0000"><b>注意:被唤醒的线程不会马上运行，除非获取了该Object的锁。也就是说，调用notify的线程，在调用notify后，不会像wait一样，马上阻塞线程的运行。而是继续运行，直到相应的线程调度完成或者让出Object的锁。而被唤醒的线程会在当前线程让出Object锁后，与其他线程以常规的方式竞争对象锁。</b></font>



<p>例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO 自动生成的方法存根</span></div><div class="line">		Sample sample = <span class="keyword">new</span> Sample();</div><div class="line">		Thread t1 = <span class="keyword">new</span> IncreaseThread(sample);</div><div class="line">		Thread t2 = <span class="keyword">new</span> DecreaseThread(sample);</div><div class="line">		Thread t3 = <span class="keyword">new</span> IncreaseThread(sample);</div><div class="line">		Thread t4 = <span class="keyword">new</span> DecreaseThread(sample);</div><div class="line"></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">		t3.start();</div><div class="line">		t4.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> number;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">while</span> (<span class="number">0</span> != number) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				wait();</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		number++;</div><div class="line">		System.out.println(number);</div><div class="line">		notify();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">decrease</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">while</span> (<span class="number">0</span> == number) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				wait();</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		number--;</div><div class="line">		System.out.println(number);</div><div class="line">		notify();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IncreaseThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Sample sample;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">IncreaseThread</span><span class="params">(Sample sample)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.sample = sample;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep((<span class="keyword">long</span>) (Math.random() * <span class="number">1000</span>));</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			sample.increase();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecreaseThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Sample sample;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DecreaseThread</span><span class="params">(Sample sample)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.sample = sample;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep((<span class="keyword">long</span>) (Math.random() * <span class="number">1000</span>));</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			sample.decrease();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果<br><img src="/2017/02/26/Java的线程笔记/t7.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[装饰模式]]></title>
      <url>http://yoursite.com/2017/02/24/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h2><pre><code>装饰模式 ：动态地将责任附加到对象上.若要扩展功能,装饰者提供了比继承更有弹性的替代方案。
</code></pre><p>装饰模式使用被装饰类的一个子类的实例，把客户端的调用委派到被装饰类，装饰模式的关键在于这种扩展是完全透明的。<br>装饰模式在Java种使用也很广泛，比如我们在重新定义按钮、对话框等时候，实际上已经在使用装饰模式了。装饰模式最浅显的例子是相片-相框的例子。<br><img src="/2017/02/24/装饰模式/z3.jpg" alt="" title="原理图"><br>其中类的职责如下：<br>抽象构件角色（Project）：给出一个接口，以规范准备接收附加责任的对象<br>具体构件角色（Employe）：定义一个将要接收附加责任的类<br>装饰角色（Manager）：持有一个构件对象的实例，并定义一个与抽象构件接口一致的接口<br>具体装饰角色（ManagerA、ManagerB）：负责给构件对象“贴上”附加的责任</p>
<h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><p>装饰模式直接看代码挺难理解的，我通过一个例子来说明。<br>有一家公司是出口眼镜和汽车的，过完年，要开始给海外客户供货了，其中有三位需要汽车大客户分别需要三批不同的车：上了漆的车，上了漆和加尾翼的车，还有加了尾翼的车。还有一位需要眼镜的客户。造车和造眼镜本公司就可以直接制造。而汽车上漆和加尾翼需要委托代工工厂。</p>
<p>新建一个公司老板(Boss.java)——抽象构件角色<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Boss</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeProject</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着造车部门(MakeCar.java)——具体构件角色<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MakeCar</span> <span class="keyword">implements</span> <span class="title">Boss</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeProject</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"造完车"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>造眼镜部门(MakeEyeglass.java)——具体构件角色<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MakeEyeglass</span> <span class="keyword">implements</span> <span class="title">Boss</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeProject</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"造完眼镜"</span>);		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代工工厂(Factory.java)——装饰角色<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">Boss</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> Boss boss;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Factory</span><span class="params">(Boss boss)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.boss=boss;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeProject</span><span class="params">()</span> </span>&#123;</div><div class="line">		boss.makeProject();	</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上漆(MakeCarPush1.java)——具体装饰角色<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MakeCarPush1</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MakeCarPush1</span><span class="params">(Boss boss)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(boss);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeProject</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.makeProject();</div><div class="line">		addColors();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addColors</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"上漆"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>加尾翼(MakeCarPush2)——具体装饰角色<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MakeCarPush2</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MakeCarPush2</span><span class="params">(Boss boss)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(boss);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeProject</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.makeProject();</div><div class="line">		addWing();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWing</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"加尾翼"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现类(Start.java)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Start</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		MakeCarPush1 mc1=<span class="keyword">new</span> MakeCarPush1(<span class="keyword">new</span> Factory(<span class="keyword">new</span> MakeCar()));</div><div class="line">		mc1.makeProject();</div><div class="line">		</div><div class="line">		MakeCarPush2 mc2=<span class="keyword">new</span> MakeCarPush2(<span class="keyword">new</span> MakeCarPush1(<span class="keyword">new</span> Factory(<span class="keyword">new</span> MakeCar())));</div><div class="line">		mc2.makeProject();</div><div class="line">		</div><div class="line">		MakeCarPush2 mc3=<span class="keyword">new</span> MakeCarPush2(<span class="keyword">new</span> Factory(<span class="keyword">new</span> MakeCar()));</div><div class="line">		mc3.makeProject();</div><div class="line">		</div><div class="line">		MakeEyeglass me=<span class="keyword">new</span> MakeEyeglass();</div><div class="line">		me.makeProject();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最终效果<br><img src="/2017/02/24/装饰模式/z1.jpg" alt="" title="最终效果"></p>
]]></content>
      
        
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java的io流笔记]]></title>
      <url>http://yoursite.com/2017/02/21/Java%E7%9A%84io%E6%B5%81%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>代码只显示关键部分。FileInputStream读取文件(需要事前有文件可读取)，FileOutputStream输出文件(无文件会自动新建)。<br>最外层嵌套DataOutputStream，DataInputStream可支持输入输出java的基本数据类型，详情自己看文档~，最外层的流的关了不再需要关里面。</p>
<h3 id="输入流（InputStream）"><a href="#输入流（InputStream）" class="headerlink" title="输入流（InputStream）"></a>输入流（InputStream）</h3><h4 id="无缓冲"><a href="#无缓冲" class="headerlink" title="无缓冲"></a>无缓冲</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"d:/a.txt"</span>);<span class="comment">//读取文件</span></div><div class="line"><span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">200</span>];<span class="comment">//自定义一个字节数组</span></div><div class="line"><span class="keyword">int</span> length;<span class="comment">//定义一个长度变量。</span></div><div class="line"><span class="keyword">while</span>(-<span class="number">1</span>!=(length=is.read(buffer,<span class="number">0</span>,<span class="number">200</span>)))&#123;</div><div class="line"><span class="comment">//is.read代表每次读的字节长度，当读完后会返回-1，</span></div><div class="line"><span class="comment">//这里的is.read里面三个参数分别为存放的字节数组，读取偏移量，读取长度。</span></div><div class="line"><span class="comment">//注意：读取偏移量+读取长度&lt;=存放的字节数组长度</span></div><div class="line">	</div><div class="line">	String str=<span class="keyword">new</span> String(buffer,<span class="number">0</span>,length);</div><div class="line"><span class="comment">//把字节数组转为字符串</span></div><div class="line"><span class="comment">//三个参数分别为要转的字节数组，读取偏移量，读取长度。</span></div><div class="line">	System.out.println(str);</div><div class="line">&#125;</div><div class="line">is.close();<span class="comment">//关闭输入流</span></div></pre></td></tr></table></figure>
<p>也可以这样<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"d:/a.txt"</span>);<span class="comment">//读取文件</span></div><div class="line"><span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">200</span>];<span class="comment">//自定义一个字节数组</span></div><div class="line"><span class="keyword">int</span> length;<span class="comment">//定义一个长度变量。</span></div><div class="line"></div><div class="line"><span class="comment">//这里是每次读取buffer定义的200字节</span></div><div class="line"><span class="keyword">while</span>(-<span class="number">1</span>!=(length=is.read(buffer)))&#123;</div><div class="line"></div><div class="line">	String str=<span class="keyword">new</span> String(buffer).trim();<span class="comment">//把字节数组转为字符串，同时去掉前后的空格和空字符。</span></div><div class="line">	<span class="comment">//String str=new String(buffer,0,length);使用这个不会出现空字符的现象</span></div><div class="line">	System.out.println(str);</div><div class="line">&#125;</div><div class="line">is.close();<span class="comment">//关闭输入流</span></div></pre></td></tr></table></figure></p>
<h4 id="带缓冲"><a href="#带缓冲" class="headerlink" title="带缓冲"></a>带缓冲</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"d:/a.txt"</span>);</div><div class="line">BufferedInputStream in =<span class="keyword">new</span> BufferedInputStream(is);</div><div class="line"><span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">200</span>];</div><div class="line"><span class="keyword">int</span> length;</div><div class="line">	<span class="keyword">while</span>(-<span class="number">1</span>!=(length=in.read(buffer)))&#123;</div><div class="line">		String str=<span class="keyword">new</span> String(buffer,<span class="number">0</span>,length);</div><div class="line">		System.out.println(str);</div><div class="line">&#125;</div><div class="line">in.close();</div></pre></td></tr></table></figure>
<h3 id="输出流（OutputStream）"><a href="#输出流（OutputStream）" class="headerlink" title="输出流（OutputStream）"></a>输出流（OutputStream）</h3><h4 id="无缓冲-1"><a href="#无缓冲-1" class="headerlink" title="无缓冲"></a>无缓冲</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">OutputStream os=<span class="keyword">new</span> FileOutputStream(<span class="string">"d:/b.txt"</span>,<span class="keyword">true</span>);<span class="comment">//后面加true表示把内容追加到最后，不加就覆盖原来内容。</span></div><div class="line">String str=<span class="string">"hello"</span>;</div><div class="line"><span class="keyword">byte</span>[] buffer=str.getBytes();<span class="comment">//转换为字节数组</span></div><div class="line">os.write(buffer);</div><div class="line">os.close();</div></pre></td></tr></table></figure>
<h4 id="带缓冲-1"><a href="#带缓冲-1" class="headerlink" title="带缓冲"></a>带缓冲</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">OutputStream os=<span class="keyword">new</span> FileOutputStream(<span class="string">"d:/b.txt"</span>);</div><div class="line">BufferedOutputStream bos=<span class="keyword">new</span> BufferedOutputStream(os);</div><div class="line">bos.write(<span class="string">"hello"</span>.getBytes());</div><div class="line"><span class="comment">//bos.flush();强制清空缓冲</span></div><div class="line">bos.close();</div></pre></td></tr></table></figure>
<h3 id="综合使用"><a href="#综合使用" class="headerlink" title="综合使用"></a>综合使用</h3><h4 id="无缓冲-2"><a href="#无缓冲-2" class="headerlink" title="无缓冲"></a>无缓冲</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"d:/a.txt"</span>);</div><div class="line">OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:/b.txt"</span>);</div><div class="line"><span class="keyword">int</span> length;</div><div class="line"><span class="keyword">while</span>(-<span class="number">1</span>!=(length=is.read())) &#123;</div><div class="line">	os.write(length);</div><div class="line">&#125;</div><div class="line">os.close();</div><div class="line">is.close();</div></pre></td></tr></table></figure>
<h4 id="带缓冲-2"><a href="#带缓冲-2" class="headerlink" title="带缓冲"></a>带缓冲</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"d:/a.txt"</span>);</div><div class="line">OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:/b.txt"</span>);</div><div class="line">BufferedInputStream in =<span class="keyword">new</span> BufferedInputStream(is);</div><div class="line">BufferedOutputStream bos=<span class="keyword">new</span> BufferedOutputStream(os);</div><div class="line"><span class="keyword">int</span> length;</div><div class="line"><span class="keyword">while</span>(-<span class="number">1</span>!=(length=in.read())) &#123;</div><div class="line">	bos.write(length);</div><div class="line">&#125;</div><div class="line">bos.close();</div><div class="line">in.close();</div></pre></td></tr></table></figure>
<h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><h3 id="输入流-InputStreamReader-，输出流-OutputStreamWriter"><a href="#输入流-InputStreamReader-，输出流-OutputStreamWriter" class="headerlink" title="输入流(InputStreamReader)，输出流(OutputStreamWriter)"></a>输入流(InputStreamReader)，输出流(OutputStreamWriter)</h3><p>和字节流差不多，就不写那么详细了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//输出流</span></div><div class="line">BufferedWriter bw=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"d:/a.txt"</span>)));</div><div class="line">		bw.write(<span class="string">"fffffffffffff"</span>);</div><div class="line">		bw.write(<span class="string">"\n"</span>);<span class="comment">//windows的记事本换行是\r\n</span></div><div class="line">		bw.write(<span class="string">"aaaaaaaaaaaaaa"</span>);</div><div class="line">		bw.close();</div><div class="line"><span class="comment">//输入流</span></div><div class="line">BufferedReader br=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"d:/a.txt"</span>)));</div><div class="line">		String str;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">null</span>!=(str=br.readLine()))&#123;</div><div class="line">			System.out.println(str);</div><div class="line">		&#125;</div><div class="line">		br.close();</div></pre></td></tr></table></figure></p>
<h3 id="综合使用-1"><a href="#综合使用-1" class="headerlink" title="综合使用"></a>综合使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">BufferedReader br=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"d:/a.txt"</span>)));</div><div class="line">		BufferedWriter bw=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"d:/b.txt"</span>)));</div><div class="line">		String str=br.readLine();</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">null</span>!=str)&#123;</div><div class="line">			bw.write(str);</div><div class="line">			str=br.readLine();</div><div class="line">		&#125;</div><div class="line">		bw.close();</div><div class="line">		br.close();</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>当然实际使用还是要处理异常。finally关闭流。<br><img src="/2017/02/21/Java的io流笔记/face.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用SharedPreferences存储用户名密码]]></title>
      <url>http://yoursite.com/2017/02/13/%E5%88%A9%E7%94%A8SharedPreferences%E5%AD%98%E5%82%A8%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>这里使用的是Context对象的getSharedPreferences()方法，目前个人感觉Activity对象的getPreferences()方法用处不大，完全可以被前者替代。</p>
<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>区别:<br>调用Context对象的getSharedPreferences()方法获得的SharedPreferences对象可以被同一应用程序下的其他组件共享。<br>调用Activity对象的getPreferences()方法获得的SharedPreferences对象只能在该Activity中使用。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>保存模块<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String userName=<span class="string">"abc"</span>;</div><div class="line">String password=<span class="string">"123"</span>;</div><div class="line">SharePreferences.Editor editor=getSharedPreferences(<span class="string">"date"</span>,Context.MODE_PRIVATE).editor();</div><div class="line">editor.putString(<span class="string">"userName"</span>,userName);</div><div class="line">editor.putString(<span class="string">"password"</span>, password);</div><div class="line">editor.apply();</div></pre></td></tr></table></figure></p>
<p>提取模块<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SharedPreferences pref=getSharedPreferences(<span class="string">"date"</span>, Context.MODE_PRIVATE);</div><div class="line">pref.getString(<span class="string">"userName"</span>,<span class="string">""</span>);<span class="comment">//第二项是默认值</span></div><div class="line"> pref.getString(<span class="string">"password"</span>,<span class="string">""</span>);</div></pre></td></tr></table></figure></p>
<p><img src="/2017/02/13/利用SharedPreferences存储用户名密码/face.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android解析json的方法]]></title>
      <url>http://yoursite.com/2017/02/12/Android%E8%A7%A3%E6%9E%90json%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>按道理解析json有挺多方法，我之前找到了一个神好用的分享一下。<br><img src="/2017/02/12/Android解析json的方法/face.jpg" alt=""><br>工具：Android studio的gsonformat插件和两个固定工具类</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="安装gsonformat"><a href="#安装gsonformat" class="headerlink" title="安装gsonformat"></a>安装gsonformat</h3><p><img src="/2017/02/12/Android解析json的方法/g1.jpg" alt=""></p>
<h3 id="使用两个工具类"><a href="#使用两个工具类" class="headerlink" title="使用两个工具类"></a>使用两个工具类</h3><p>新建两个工具类<br> Json.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Json</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Json json;</div><div class="line">    Json() &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Json <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (json == <span class="keyword">null</span>) &#123;</div><div class="line">            json = <span class="keyword">new</span> GsonImpl();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> json;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">toJson</span><span class="params">(Object src)</span></span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T&gt; <span class="function">T <span class="title">toObject</span><span class="params">(String json, Class&lt;T&gt; claxx)</span></span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T&gt; <span class="function">T <span class="title">toObject</span><span class="params">(<span class="keyword">byte</span>[] bytes, Class&lt;T&gt; claxx)</span></span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">toList</span><span class="params">(String json, Class&lt;T&gt; claxx)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>GsonImpl.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonImpl</span> <span class="keyword">extends</span> <span class="title">Json</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">(Object src)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> gson.toJson(src);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">toObject</span><span class="params">(String json, Class&lt;T&gt; claxx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> gson.fromJson(json, claxx);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">toObject</span><span class="params">(<span class="keyword">byte</span>[] bytes, Class&lt;T&gt; claxx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> gson.fromJson(<span class="keyword">new</span> String(bytes), claxx);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">toList</span><span class="params">(String json, Class&lt;T&gt; claxx)</span> </span>&#123;</div><div class="line">          Type type = <span class="keyword">new</span> TypeToken&lt;ArrayList&lt;T&gt;&gt;() &#123;&#125;.getType();  </div><div class="line">             List&lt;T&gt; list = gson.fromJson(json, type);  </div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>自定义个javaBean类(无需写任何内容)<br>复制你要解析的json<br>然后alt+insert弹出如下界面(或者在你的javaBean类代码区域右键选择Generate)<br><img src="/2017/02/12/Android解析json的方法/g2.jpg" alt=""><br>把要解析的json放到输入框点击ok即可(注意json格式要标准)<br><img src="/2017/02/12/Android解析json的方法/g3.jpg" alt=""><br>javaBean类会生成相应的javabean<br>最后只需一句代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JavaBean bean =GsonImpl.get().toObject(json,JavaBean.class); <span class="comment">//json为你要解析的json格式为String</span></div></pre></td></tr></table></figure></p>
<p>最后只要用javabean的get方法取出来即可，例如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bean.getHeWeatherdataservice().get(<span class="number">0</span>).getBasic().getCity();</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[全局获得Context的方法]]></title>
      <url>http://yoursite.com/2017/02/12/%E5%85%A8%E5%B1%80%E8%8E%B7%E5%BE%97Context%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>首先创建一个类继承Application<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Context context;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span></span>&#123;</div><div class="line">		context=getApplicationContext();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Context <span class="title">getContext</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> context;</div><div class="line">	&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在AndroidManifest.xml的 &lt; application&gt;标签指定即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.cczhr.mydemo"</span> &gt;</div><div class="line">		   <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">				<span class="attr">...</span></div><div class="line">				<span class="attr">...</span></div><div class="line">				<span class="attr">android:name</span>=<span class="string">"com.cczhr.mydemo.MyApplication"</span>&gt;</div><div class="line">		   <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>以后需要传入Context只需要写上即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MyApplication.getContext();</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的RecyclerView]]></title>
      <url>http://yoursite.com/2017/02/05/Android%E7%9A%84RecyclerView/</url>
      <content type="html"><![CDATA[<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="/2017/02/05/Android的RecyclerView/r2.jpg" alt=""></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>输入recyclerview，添加com.android.support:recyclerview-v7的依赖，冒号后面为版本号。<br><img src="/2017/02/05/Android的RecyclerView/r1.jpg" alt=""><br>在activity_main.xml添加RecyclerView这里是填满整个屏幕<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/recycler_view"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>接着新建fruit_item.xml用来自定义布局<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fruit_image"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fruit_name"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong><font color="red">概念：RecyclerView的任务就是回收和定位屏幕上的View。但View上要能够显示数据还    离不开Adapter和ViewHolder这两个类。 Adapter负责任务有：1.创建必要的ViewHolder； 2.绑定ViewHolder到模型层数据。而ViewHolder只做一件事，就是放View视图的组件。<br></font></strong></p>
<p>创建Adapter，首先要定义RecyclerView.Adapter,然后由他封装获取的数据。<br>RecyclerView要视图时，就会去找它的Adapter：<br>1）先调用Adapter的getItemCount()方法，询问数组列表中的对象数量。<br>2）RecyclerView调用adapter的createViewHolder(ViewGroup,int)方法创建ViewHolder以及ViewHolder要显示的视图。<br>3）RecyclerView会传入ViewHolder及其位置，调用onBindViewHolder(ViewGroup,int)方法。adapter会找到目标位置的数据并且绑定到ViewHolder视图上。绑定就是使用模型数据填充视图。<br>三个过程ok后，RecyclerView就能在屏幕上显示View了，另外createViewHolder以及onBindViewHolder使用并并不频繁。创建了够用的ViewHolder就停止调用了。然后会自动回收旧的ViewHolder来节约时间和节省内存。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">FruitAdapter</span>.<span class="title">ViewHolder</span>&gt;</span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; mFruitList;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        ImageView fruitImage;</div><div class="line">        TextView fruitName;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            fruitImage = (ImageView) itemView.findViewById(R.id.fruit_image);</div><div class="line">            fruitName = (TextView) itemView.findViewById(R.id.fruit_name);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FruitAdapter</span><span class="params">(List&lt;Fruit&gt; fruitList)</span></span>&#123;</div><div class="line">        mFruitList=fruitList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">       View view= LayoutInflater.from(parent.getContext()).inflate(R.layout.fruit_item,parent,<span class="keyword">false</span>);</div><div class="line">        ViewHolder holder=<span class="keyword">new</span> ViewHolder(view);</div><div class="line">        <span class="keyword">return</span> holder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        Fruit fruit=mFruitList.get(position);</div><div class="line">        holder.fruitImage.setImageResource(fruit.getImageId());</div><div class="line">        holder.fruitName.setText(fruit.getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mFruitList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着在MainActivity定义一个数组,并加入数据，为了能体验到滑动列表的效果这里使用了一个for循环添加两次数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFruits</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">            Fruit apple = <span class="keyword">new</span> Fruit((<span class="string">"Apple"</span>), R.drawable.apple_pic);</div><div class="line">            fruitList.add(apple);</div><div class="line">            Fruit banana = <span class="keyword">new</span> Fruit((<span class="string">"Banana"</span>), R.drawable.banana_pic);</div><div class="line">            fruitList.add(banana);</div><div class="line">            Fruit orange = <span class="keyword">new</span> Fruit((<span class="string">"Orange"</span>), R.drawable.orange_pic);</div><div class="line">            fruitList.add(orange);</div><div class="line">            Fruit watermelon = <span class="keyword">new</span> Fruit((<span class="string">"Watermelon"</span>), R.drawable.watermelon_pic);</div><div class="line">            fruitList.add(watermelon);</div><div class="line">            Fruit pear = <span class="keyword">new</span> Fruit((<span class="string">"Pear"</span>), R.drawable.pear_pic);</div><div class="line">            fruitList.add(pear);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Fruit .java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> imageId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(String name, <span class="keyword">int</span> imageId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.imageId = imageId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImageId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> imageId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>图片资源<br><img src="/2017/02/05/Android的RecyclerView/r3.jpg" alt=""></p>
<p>在onCreate方法中首先initFruits();初始化数据，为列表使用LinearLayout布局，把数据传进adapter，最后把adapter传进recyclerView即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">       ...</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initFruits();</div><div class="line">        RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);</div><div class="line">        LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">        recyclerView.setLayoutManager(layoutManager);</div><div class="line">        FruitAdapter adapter = <span class="keyword">new</span> FruitAdapter(fruitList);</div><div class="line">        recyclerView.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFruits</span><span class="params">()</span> </span>&#123;</div><div class="line">      ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="添加点击事件"><a href="#添加点击事件" class="headerlink" title="添加点击事件"></a>添加点击事件</h2><p>若要在水果图片添加点击事件只需要再onCreateViewHolder()方法中添加即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">holder.fruitImage.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> position = holder.getAdapterPosition();</div><div class="line">                Fruit fruit = mFruitList.get(position);</div><div class="line">                Toast.makeText(v.getContext(), <span class="string">"you clicked image "</span> + fruit.getName(), Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android通知栏的微技巧(转)]]></title>
      <url>http://yoursite.com/2017/02/04/Android%E9%80%9A%E7%9F%A5%E6%A0%8F%E7%9A%84%E5%BE%AE%E6%8A%80%E5%B7%A7-%E8%BD%AC/</url>
      <content type="html"><![CDATA[<p><img src="/2017/02/04/Android通知栏的微技巧-转/Android通知栏.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简易翻墙的方法]]></title>
      <url>http://yoursite.com/2017/02/01/%E7%AE%80%E6%98%93%E7%BF%BB%E5%A2%99%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><pre><code>Github是个好地方
</code></pre><h3 id="方法一-dowsDNS"><a href="#方法一-dowsDNS" class="headerlink" title="方法一 dowsDNS"></a>方法一 dowsDNS</h3><p>最近找到一个效果挺不错的一个翻墙软件<a href="https://github.com/LitePalFramework/LitePal" target="_blank" rel="external"><em>dowsDNS</em></a>。是Github里面的一个开源项目。<br>官方说明如下<br><img src="/2017/02/01/简易翻墙的方法/使用方法.jpg" alt=""><br>官方下载地址（自动设置dns和恢复dns在win10无效）：<br><a href="https://github.com/dowsnature/dowsDNS/releases/latest/" target="_blank" rel="external">https://github.com/dowsnature/dowsDNS/releases/latest/</a><br><img src="/2017/02/01/简易翻墙的方法/f1.jpg" alt=""><br>我的修改版下载地址（可以直接显示本机ip地址）<br>(推荐)：<a href="https://drive.wps.cn/view/l/d42455cf74034a5e83e9f958bf24ab3c" target="_blank" rel="external">https://drive.wps.cn/view/l/d42455cf74034a5e83e9f958bf24ab3c</a><br><img src="/2017/02/01/简易翻墙的方法/f2.jpg" alt=""></p>
<h3 id="安卓手机使用方法"><a href="#安卓手机使用方法" class="headerlink" title="安卓手机使用方法"></a>安卓手机使用方法</h3><p>其实和局域网电脑翻墙的的操作是一样的修改dns，不过需要用一个app改dns。<br>Pure DNS app下载地址  <a href="https://drive.wps.cn/view/l/6d8384baa0684f77ab8e77c913356478" target="_blank" rel="external">https://drive.wps.cn/view/l/6d8384baa0684f77ab8e77c913356478</a></p>
<h3 id="苹果手机使用方法"><a href="#苹果手机使用方法" class="headerlink" title="苹果手机使用方法"></a>苹果手机使用方法</h3><p>苹果手机更简单了，直接wifi选项修改dns即可。</p>
<h3 id="注意：只支持https加密的网站"><a href="#注意：只支持https加密的网站" class="headerlink" title="注意：只支持https加密的网站"></a>注意：只支持https加密的网站</h3><p>  例如 <a href="https://twitter.com/" target="_blank" rel="external">https://twitter.com/</a><br>（不过你需要的绝大部分外国网站都支持https，google，youtube，Twitter，Instagram等等都有采用https的）</p>
<h3 id="方法二-puredns（推荐）"><a href="#方法二-puredns（推荐）" class="headerlink" title="方法二 puredns（推荐）"></a>方法二 puredns（推荐）</h3><p>这个更加简单了 直接看说明就好，直接修改dns即可，苹果用户也支持，缺点也是一样的，只支持https加密的网站。<br><a href="http://puredns.cn/" target="_blank" rel="external">http://puredns.cn/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 翻墙 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单例模式]]></title>
      <url>http://yoursite.com/2017/01/27/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<pre><code>　单例模式有以下特点：
    1、单例类只能有一个实例。
    2、单例类必须自己创建自己的唯一实例。
    3、单例类必须给所有其他对象提供这一实例。
单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。
</code></pre><p>为什么单例模式可以确保只有一个实例呢,分析以下代码可得，创建了一个private Singleton1()构造方法不能被外部访问，避免了外部实例化new一个 Singleton1类，Singleton1 getInstance()选择 static 是为了能在外部不实例化的的时候使用这个方法，<br>最后用户只能有一个Singleton1对象实例化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//饿汉式单例类.在类初始化时，已经自行实例化   </span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 单例 </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Singleton1 s1=Singleton1.getInstance();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton1 single = <span class="keyword">new</span> Singleton1();  </div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> single;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java泛型笔记]]></title>
      <url>http://yoursite.com/2017/01/26/Java%E6%B3%9B%E5%9E%8B%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Notepad</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;		<span class="comment">// 此处指定了两个泛型类型</span></div><div class="line">	<span class="keyword">private</span> K key ;		<span class="comment">// 此变量的类型由外部决定</span></div><div class="line">	<span class="keyword">private</span> V value ;	<span class="comment">// 此变量的类型由外部决定</span></div><div class="line">	<span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.key ;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.value ;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(K key)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.key = key ;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(V value)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.value = value ;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericsDemo01</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">		Notepad&lt;String,Integer&gt; t = <span class="keyword">null</span> ;		<span class="comment">// 定义两个泛型类型的对象</span></div><div class="line">		t = <span class="keyword">new</span> Notepad&lt;String,Integer&gt;() ;		<span class="comment">// 里面的key为String，value为Integer</span></div><div class="line">		t.setKey(<span class="string">"Not Found"</span>) ;		<span class="comment">// 设置第一个内容</span></div><div class="line">		t.setValue(<span class="number">18</span>) ;			<span class="comment">// 设置第二个内容</span></div><div class="line">		System.out.print(<span class="string">"姓名；"</span> + t.getKey()) ;		<span class="comment">// 取得信息</span></div><div class="line">		System.out.print(<span class="string">"，年龄；"</span> + t.getValue()) ;		<span class="comment">// 取得信息</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的数据库]]></title>
      <url>http://yoursite.com/2017/01/24/Android%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="LitePal"><a href="#LitePal" class="headerlink" title="LitePal"></a>LitePal</h1><p>熟悉Android的人都知道Android自带了一个SQLite数据库Android也给了一些api来操作它，不过有一个更好用的API就是<a href="https://github.com/LitePalFramework/LitePal" target="_blank" rel="external"><em>LitePal</em></a>。</p>
<pre><code>LitePal是一款开源的Android数据库框架，采用了对象关系映射(ORM)的模式，将平时开发时最常用的一些数据库功能进行了封装，使得开发者不用编写一行SQL语句就可以完成各种建表、増删改查的操作。并且LitePal很“轻”，jar包大小不到100k，而且近乎零配置，这一点和Hibernate这类的框架有很大区别。目前LitePal的源码已经托管到了GitHub上。
</code></pre><h2 id="LitePal的配置"><a href="#LitePal的配置" class="headerlink" title="LitePal的配置"></a>LitePal的配置</h2><p>配置LitePal很简单，打开<a href="https://github.com/LitePalFramework/LitePal" target="_blank" rel="external"><em>LitePal</em></a>找到下图的地方。<br><img src="/2017/01/24/Android的数据库/l1.jpg" alt=""><br>把下面代码复制到Android项目的app/build.gradle的dependencies{}里面即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'org.litepal.android:core:1.4.1'</span></div></pre></td></tr></table></figure></p>
<p>其中1.4.1代表版本号，想要最新的版本号去打开<a href="https://github.com/LitePalFramework/LitePal" target="_blank" rel="external"><em>LitePal</em></a>找即可。<br>然后点击Sync Now，即可成功引入Jar包。<br><img src="/2017/01/24/Android的数据库/sync.jpg" alt=""><br>接下来配置litepal.xml文件，在app/src/main目录下新建assets文件夹，在assets文件夹中新建litepal.xml文件输入以下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- dbname value为数据库名，version value为版本号  &lt;list&gt;主要用来映射模型 --&gt;</span> </div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">litepal</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">"BookStore"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>为了方便LitePal获得Context对象最后还要修改AndroidManifest.xml，在&lt; application&gt;标签<br>中加入android:name=”org.litepal.LitePalApplication”</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"org.litepal.LitePalApplication"</span></div><div class="line">        <span class="attr">...</span></div><div class="line">    &gt;</div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然也可以在直接用 LitePal.initialize(Context);方法传递Context以便LitePal能正常运行。</p>
<h2 id="LitePal创建数据库和表的建立更新与删除"><a href="#LitePal创建数据库和表的建立更新与删除" class="headerlink" title="LitePal创建数据库和表的建立更新与删除"></a>LitePal创建数据库和表的建立更新与删除</h2><p>LitePal的建立表很简单，想要新建一个Book表就新建定义一个Book类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//继承DataSupport是为了能够 crud（增删改查），本身创建数据库和表是可以不用继承也能创建成功的</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">extends</span> <span class="title">DataSupport</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String author;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pages;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> author;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.author = author;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> price;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.price = price;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPages</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> pages;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPages</span><span class="params">(<span class="keyword">int</span> pages)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pages = pages;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很明显这是一个javabean，在Book表里面定义了id，author，price，pages，name字段，并生成setter和getter方法。<br>接下来需要把Book类映射模型列表当中，修改litepal.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- dbname value为数据库名，version value为版本号  &lt;list&gt;主要用来映射模型 --&gt;</span> </div><div class="line"><span class="comment">&lt;!--&lt;mapping&gt;标签需要完整类名--&gt;</span></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">litepal</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">"BookStore"</span> /&gt;</span></div><div class="line">     ...</div><div class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.app.cczhr.litepaldemo.Book"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>最后只要任意进行一次数据库的操作，Bookstore.db即可自动创建完毕。这里我使用的是 Connector.getDatabase();方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Connector.getDatabase();</div></pre></td></tr></table></figure></p>
<p>如果要新建多一个表只需要重复之前的动作即可，若要修改已生成的表字段只需要修改你要改的表的类，若要删除表就把相关代码删除。<br>做完所有的更改操作后最后在&lt; litepal&gt;标签下的  &lt; version value=”1” /&gt;里面的版本号加1即可。</p>
<pre><code>注意：id字段在LitePal为默认自增主键，类型只能为int。
</code></pre><h2 id="LitePal添加数据"><a href="#LitePal添加数据" class="headerlink" title="LitePal添加数据"></a>LitePal添加数据</h2><h3 id="LitePal添加数据（初级）"><a href="#LitePal添加数据（初级）" class="headerlink" title="LitePal添加数据（初级）"></a>LitePal添加数据（初级）</h3><p>LitePal添加数据（初级）很简单,用Book类的各种set方法对数据设置，最后使用save方法保存即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Book book=<span class="keyword">new</span> Book();</div><div class="line">book.setName(<span class="string">"新华字典"</span>);</div><div class="line">book.setAuthor(<span class="string">"新华出版社"</span>);</div><div class="line">book.setPages(<span class="number">666</span>);</div><div class="line">book.setPrice(<span class="number">16.66</span>);</div><div class="line">book.save();</div></pre></td></tr></table></figure></p>
<h3 id="LitePal添加数据（进阶）"><a href="#LitePal添加数据（进阶）" class="headerlink" title="LitePal添加数据（进阶）"></a>LitePal添加数据（进阶）</h3><p>看完剩下的，你就会进阶玩法了。<br><img src="/2017/01/24/Android的数据库/hj.jpg" alt=""></p>
<h2 id="LitePal更新数据"><a href="#LitePal更新数据" class="headerlink" title="LitePal更新数据"></a>LitePal更新数据</h2><p>LitePal更新数据，可以看到new了一个Book，然后直接set要修改的值，最后使用updateAll方法指定更新的条件，这里指定的是name =”新华字典” 同时 author =”新华出版社”的数据，若updateAll里面什么都不填则是修改全部的pages字段。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Book book=<span class="keyword">new</span> Book();</div><div class="line">book.setPages(<span class="number">233</span>);</div><div class="line">book.updateAll(<span class="string">"name = ? and author = ?"</span>,<span class="string">"新华字典"</span>,<span class="string">"新华出版社"</span>);</div></pre></td></tr></table></figure></p>
<pre><code>注意，若你想把pages改为默认值0是不能直接book.setPages(0);的，
LitePal提供了改默认值的setToDefault方法，如以下代码。
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Book book=<span class="keyword">new</span> Book();</div><div class="line">book.setToDefault(<span class="string">"pages"</span>);<span class="comment">//填入要修改的字段名</span></div><div class="line">book.updateAll(<span class="string">"name = ? and author = ?"</span>,<span class="string">"新华字典"</span>,<span class="string">"新华出版社"</span>);</div></pre></td></tr></table></figure>
<h2 id="LitePal删除数据"><a href="#LitePal删除数据" class="headerlink" title="LitePal删除数据"></a>LitePal删除数据</h2><p>LitePal删除数据和更新数据差不多,这里表示删除book表里面price&gt;15的数据。<br>若deleteAll不填条件则是删除book表全部的内容。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DataSupport.deleteAll(Book.class,<span class="string">"price &gt; ?"</span>,<span class="string">"15"</span>);</div></pre></td></tr></table></figure></p>
<h2 id="LitePal查询数据"><a href="#LitePal查询数据" class="headerlink" title="LitePal查询数据"></a>LitePal查询数据</h2><p> 返回全部结果<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">LIst&lt;book&gt; books=DataSupport.findAll(book.class);</div><div class="line"><span class="keyword">for</span>(Book book : books)&#123;</div><div class="line">	book.getName();</div><div class="line">	....</div><div class="line">	book.getPrice();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>较复杂的查询操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">LIst&lt;book&gt; books=DataSupport.select(<span class="string">"name"</span>,<span class="string">"author"</span>,<span class="string">"pages"</span>)<span class="comment">//表示选取"name","author","pages"这三种数据</span></div><div class="line">                            .where(<span class="string">"pages&gt;?"</span>,<span class="string">"400"</span>)<span class="comment">//表示其中”pages“要大于400</span></div><div class="line">                            .order(<span class="string">"pages desc"</span>)<span class="comment">//表示按页数降序排列，去掉desc为降序</span></div><div class="line">                            .limit(<span class="number">10</span>)<span class="comment">//表示查询数量</span></div><div class="line">                            .offset(<span class="number">10</span>)<span class="comment">//表示偏移量，即从11条开始</span></div><div class="line">                            .findAll(book.class);</div></pre></td></tr></table></figure></p>
<h2 id="LitePal使用原生的方法查询数据"><a href="#LitePal使用原生的方法查询数据" class="headerlink" title="LitePal使用原生的方法查询数据"></a>LitePal使用原生的方法查询数据</h2><p>LitePal同时也支持原生的查询数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Cursor c=DataSupport.findBySQL(<span class="string">"select name from book where pages &gt;? and price &lt; ?"</span>,<span class="string">"50"</span>,<span class="string">"100"</span>);</div><div class="line"><span class="keyword">if</span>(c.moveToFirst())&#123;</div><div class="line">	do&#123;</div><div class="line">		String name=c.getString(c.getColumnIndex(<span class="string">"name"</span>));</div><div class="line">	&#125;<span class="keyword">while</span> (c.moveToNext);</div><div class="line">&#125;</div><div class="line">c.close();</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于京东抢优惠券的思考]]></title>
      <url>http://yoursite.com/2017/01/16/%E5%85%B3%E4%BA%8E%E4%BA%AC%E4%B8%9C%E6%8A%A2%E4%BC%98%E6%83%A0%E5%88%B8%E7%9A%84%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<pre><code>又到了每个月买一次猫砂的日子了。
</code></pre><p>  作为一名贤惠的好男人通常打开京东选好猫砂下单前都会看看有没有优惠券可以拿，看到100-5的果断拿了。然后看到了三星某笔记本只要1块钱的优惠券。<br><img src="/2017/01/16/关于京东抢优惠券的思考/jd1.jpg" alt=""></p>
<pre><code>说实话当时我的内心是毫无波动的
</code></pre><p>  于是我凭直觉的打开了手机浏览器版的京东和电脑版的京东。<br>  <img src="/2017/01/16/关于京东抢优惠券的思考/jd2.jpg" alt=""><br>  <img src="/2017/01/16/关于京东抢优惠券的思考/jd3.jpg" alt=""><br>  <img src="/2017/01/16/关于京东抢优惠券的思考/jd4.jpg" alt=""></p>
<pre><code>发现只有手机版的才有显示
</code></pre><p>  看到后我内心泛起一个小波浪，于是才有以下内容。<br>  抓起优惠券列表内容的包<br>  <img src="/2017/01/16/关于京东抢优惠券的思考/jd5.jpg" alt=""><br>  拿了一个休闲食品的优惠券再抓包</p>
<pre><code>以下链接为了方便查看经过了UrlDecode解码
</code></pre><p>   <img src="/2017/01/16/关于京东抢优惠券的思考/jd6_1.jpg" alt=""><br>   二次打开是这样的<br>   <img src="/2017/01/16/关于京东抢优惠券的思考/jd8.jpg" alt=""></p>
<pre><code>yep
</code></pre><p>  领取成功还会post一个这个<br>   <img src="/2017/01/16/关于京东抢优惠券的思考/jd9.jpg" alt=""><br>    二次打开是这样的<br>    <img src="/2017/01/16/关于京东抢优惠券的思考/jd11.jpg" alt=""><br>    截取一下精华<br>    <img src="/2017/01/16/关于京东抢优惠券的思考/jd6_2.jpg" alt=""><br>    <img src="/2017/01/16/关于京东抢优惠券的思考/jd7.jpg" alt=""></p>
<pre><code>&quot;key&quot; &quot;roleId&quot; &quot;batchId&quot;是我们可以提前知道的东西
</code></pre><p>   然而“sign”这玩意像一把钥匙，每次请求都有所改变，果然走到保险箱没有钥匙很尴尬。<br>   <img src="/2017/01/16/关于京东抢优惠券的思考/jd233.jpg" alt=""><br>   研究到此结束。<br>   毕竟还是too young too naive。<br>   当然优惠券列表的json数据里面”batchCount”代表了优惠券的总数，还是有点用处的。<br>   <img src="/2017/01/16/关于京东抢优惠券的思考/jd12.png" alt=""></p>
<pre><code>当然实现一步抢票有很多种思路，这只是其中一种方法而已。
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 京东 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为什么静态方法不能直接访问非静态成员？(转)]]></title>
      <url>http://yoursite.com/2017/01/13/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E4%B8%8D%E8%83%BD%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E9%9D%9E%E9%9D%99%E6%80%81%E6%88%90%E5%91%98/</url>
      <content type="html"><![CDATA[<p><code>最近对单例模型有点理解不能，决定复习一下static关键字的含义~
网上看到一篇写的不错的当然mark一下啦。</code><br>static成员是在JVM的CLASSLOADER加载类的时候初始化的，而非static的成员是在创建对象，即new 操作的时候才初始化的；类加载的时候初始化static的成员，此时static 已经分配内存空间，所以可以访问；非static的成员还没有通过new创建对象而进行初始化，所以必然不可以访问。<br>简单点说：静态成员属于类,不需要生成对象就存在了.而非静态需要生成对象才产生，所以静态成员不能直接访问.<br>下面说说静态的特点：<br>     1.随着类的加载而加载——静态会随着类的消失而消失，说明静态的生命周期最长<br>     2.优先于对象的存在——静态是先存在的，对象是后存在的<br>     3.被所有对象共享<br>    4.可以直接被类名多调用</p>
<p>静态的使用注意事项：<br>1.静态方法只能访问静态成员（包括成员变量和成员方法）<br>   非静态方法可以访问静态也可以访问非静态<br>2.静态方法中不可以定义this，super关键字<br>   因为 一个类中，一个static变量只会有一个内存空间，虽然有多个类实例，但这些类实例中的这个static变量会共享同一个内存空间。静态方法在优先于对象存在，所以静态方法中不可以出现this，super关键字。<br>3.主函数是静态的。</p>
<p>静态的利弊：<br>   利：对 对象的共享数据进行单独空间的存储，节省空间，没有必要每一个对象中都存储一份，可以直接被类名所调用<br>   弊：生命周期过长，访问出现局限性（只能访问静态）</p>
<p>实例变量和类变量（static声明的变量）的区别：<br>1.存放位置<br>类变量随着类的加载存在于方法区中，实例变量随着对象的建立存在于堆内存里<br>2.生命周期<br>类变量生命周期最长，随着“类”的加载而加载，随着类的消失而消失<br>实例变量随着“对象”的消失而消失</p>
]]></content>
      
        
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android传递简单数据的方法]]></title>
      <url>http://yoursite.com/2017/01/12/Android%E4%BC%A0%E9%80%92%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>目录</p>
<ol>
<li>Activity之间传递数据<ol>
<li><a href="#1-1"><em>FirstAty传输给SecondAty</em></a></li>
<li><a href="#1-2"><em>SecondAty关闭后返回的数据给FirstAty</em></a></li>
</ol>
</li>
<li>Fragment之间的数据传递</li>
<li>Activity与Fragment之间的数据传递<br><span id="1-1"></span><h2 id="Activity之间传递数据"><a href="#Activity之间传递数据" class="headerlink" title="Activity之间传递数据"></a>Activity之间传递数据</h2><h3 id="FirstAty传输给SecondAty"><a href="#FirstAty传输给SecondAty" class="headerlink" title="(FirstAty传输给SecondAty)"></a>(FirstAty传输给SecondAty)</h3><h4 id="传单一数据-主要用到Intent-putExtra-方法也可以用传数据包来实现"><a href="#传单一数据-主要用到Intent-putExtra-方法也可以用传数据包来实现" class="headerlink" title="传单一数据(主要用到Intent.putExtra()方法也可以用传数据包来实现  )"></a>传单一数据(主要用到Intent.putExtra()方法<a href="#jump"><em>也可以用传数据包来实现</em></a>  )</h4>下面是FirstAty.java所需要的代码<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent i =<span class="keyword">new</span> Intent(FirstAty.class,SecondAty.class);</div><div class="line">i.putExtra(<span class="string">"data"</span>,<span class="string">"Hi~"</span>);<span class="comment">//putExtra("A",B)中，AB为键值对，第一个参数为键名，第二个参数为键对应的值。</span></div><div class="line">startActivity(i);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>putExtra可以传递的包括基本数据类型（含基本数据类型的数组）、String(包含数组)、Parcelable（包含数组）、Serializable、Bundle、CharSequence、Intent几种类型的数据。</p>
<p>下面是SecondAty.java所需要的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent i =getIntent();</div><div class="line">String data=i.getStringExtra(<span class="string">"data"</span>);<span class="comment">//此处用新建一个字符串data保存获得的数据</span></div></pre></td></tr></table></figure></p>
<p><span id="jump"></span></p>
<h4 id="传数据包-主要用到Bundle类"><a href="#传数据包-主要用到Bundle类" class="headerlink" title="传数据包(主要用到Bundle类)"></a>传数据包(主要用到Bundle类)</h4><p>下面是FirstAty.java所需要的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   Bundle b = <span class="keyword">new</span> Bundle();   <span class="comment">//新建一个bundle类</span></div><div class="line">Intent i =<span class="keyword">new</span> Intent(FirstAty.class,SecondAty.class);</div><div class="line">b.putString(<span class="string">"name"</span>,<span class="string">"张三"</span>)；</div><div class="line">b.putInt(<span class="string">"age"</span>,<span class="number">100</span>);</div><div class="line">i.putExtras(b);</div></pre></td></tr></table></figure></p>
<p>下面是SecondAty.java所需要的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent i =getIntent();</div><div class="line">Bundle b =i.getExtras();</div><div class="line">   String name=b.getString(<span class="string">"name"</span>);<span class="comment">//获取数据</span></div><div class="line"><span class="keyword">int</span> age=b.getInt(<span class="string">"age"</span>)</div></pre></td></tr></table></figure></p>
<p><span id="1-2"></span></p>
<h3 id="SecondAty关闭后返回的数据给FirstAty"><a href="#SecondAty关闭后返回的数据给FirstAty" class="headerlink" title="(SecondAty关闭后返回的数据给FirstAty)"></a>(SecondAty关闭后返回的数据给FirstAty)</h3><p>下面是FirstAty.java所需要的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">   Intent i = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, TheAty.class);</div><div class="line"> 	startActivityForResult(i, <span class="number">2</span>);<span class="comment">//第二个参数为请求码，可以根据自己需求编号  </span></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">       <span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="comment">//只能得到requestCode(请求码):2  ;resultCode(结果码):默认 0; </span></div><div class="line">       &#125;</div><div class="line">       <span class="keyword">else</span>&#123;</div><div class="line">           String name =data.getStringExtra(<span class="string">"name"</span>);</div><div class="line">		<span class="keyword">int</span> age=data.getIntExtra(<span class="string">"age"</span>，<span class="number">0</span>);<span class="comment">//第二个参数是默认值</span></div><div class="line">		<span class="keyword">int</span> resultcode=resultCode;<span class="comment">//结果码</span></div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>  下面是SecondAty.java所需要的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Bundle b = <span class="keyword">new</span> Bundle();   <span class="comment">//新建一个bundle类</span></div><div class="line">Intent i =<span class="keyword">new</span> Intent();</div><div class="line">b.putString(<span class="string">"name"</span>,<span class="string">"张三"</span>)；</div><div class="line">b.putInt(<span class="string">"age"</span>,<span class="number">100</span>);</div><div class="line">i.putExtras(b);</div><div class="line">setResult(<span class="number">1</span>,i);<span class="comment">//第一个参数为结果码</span></div></pre></td></tr></table></figure></p>
<p><span id="2"></span></p>
<h2 id="Fragment的数据传递"><a href="#Fragment的数据传递" class="headerlink" title="Fragment的数据传递"></a>Fragment的数据传递</h2><h3 id="Fragment1传输给Fragment2-主要用到setArguments方法"><a href="#Fragment1传输给Fragment2-主要用到setArguments方法" class="headerlink" title="(Fragment1传输给Fragment2(主要用到setArguments方法))"></a>(Fragment1传输给Fragment2(主要用到setArguments方法))</h3><p>下面是Fragment1.java所需要的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">View rootView = inflater.inflate(R.layout.fragment1_main, container, <span class="keyword">false</span>);</div><div class="line">Fragment2 fragment2 = <span class="keyword">new</span> Fragment2();</div><div class="line">Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">bundle.putString(<span class="string">"name"</span>, <span class="string">"张三"</span>);</div><div class="line">fragment2.setArguments(bundle);</div><div class="line"></div><div class="line">FragmentManager fm = getFragmentManager();</div><div class="line">FragmentTransaction transaction = fm.beginTransaction();</div><div class="line">transaction.addToBackStack(<span class="keyword">null</span>);</div><div class="line">transaction.add(R.id.content,fragment2);</div><div class="line">transaction.hide(Fragment1.<span class="keyword">this</span>);</div><div class="line">transaction.commit();</div></pre></td></tr></table></figure></p>
<p>下面是Fragment2.java所需要的代码<br>一般在Fragment2的onAttach生命周期里面去接收。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Bundle arguments = getArguments();</div><div class="line">String name = arguments.getString(<span class="string">"name"</span>);</div></pre></td></tr></table></figure></p>
<h3 id="Fragment2返回传输给Fragment1-未完待续"><a href="#Fragment2返回传输给Fragment1-未完待续" class="headerlink" title="(Fragment2返回传输给Fragment1(未完待续~))"></a>(Fragment2返回传输给Fragment1(未完待续~))</h3>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[总结]]></title>
      <url>http://yoursite.com/2017/01/08/%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<pre><code>看到了年龄和我差不多的大神已经能够独立开发自己的应用了，我也羡慕他们。
加油吧。
新年快乐。
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[弄个大新闻]]></title>
      <url>http://yoursite.com/2017/01/07/%E5%BC%84%E4%B8%AA%E5%A4%A7%E6%96%B0%E9%97%BB/</url>
      <content type="html"><![CDATA[<p>获得了 <a href="http://bignews.me" target="_blank" rel="external">大新闻</a> </p>
]]></content>
      
        
        <tags>
            
            <tag> 大新闻 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[markdown语法]]></title>
      <url>http://yoursite.com/2017/01/06/markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><img src="/2017/01/06/markdown语法/yufa.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[好久不见]]></title>
      <url>http://yoursite.com/2017/01/06/%E5%A5%BD%E4%B9%85%E4%B8%8D%E8%A7%81/</url>
      <content type="html"><![CDATA[<h2 id="czh"><a href="#czh" class="headerlink" title="czh"></a>czh</h2><p>以后在这里更新<br>测试<br><img src="/2017/01/06/好久不见/img/1.jpg" alt="一张图片"></p>
<p>  <img src="http://www.baidu.com/img/bdlogo.gif" alt="baidu" title="百度logo"></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/10/29/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
